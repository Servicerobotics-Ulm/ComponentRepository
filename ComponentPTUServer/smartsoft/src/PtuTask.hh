//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//------------------------------------------------------------------------
//
//  Copyright (C) 2010;2013 Manuel Wopfner; Matthias Lutz
//
//        lutz@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#ifndef _PTUTASK_HH
#define _PTUTASK_HH

#include "PtuTaskCore.hh"

#include <DomainPTU/CommPTUMoveRequest.hh>
#include <DomainPTU/CommPTUMoveResponse.hh>
#include <CommBasicObjects/CommPose3d.hh>

#include <armadillo.hh>
#include <mrpt/hwdrivers/CPtuDPerception.h>

#include "ParameterStateStruct.hh"

#include <string>

using namespace mrpt::hwdrivers;

class PtuTask  : public PtuTaskCore
{
private:
	typedef DomainPTU::PTUMoveStatus PTUStatus;

	enum PTUAxis {
		PAN, TILT, NONE
	};

//	struct PTUParameters {
//		CommBasicObjects::CommPose3d sensorOffset;
//
//		bool reset;
//
//		double start_up_speed_pan;
//		double start_up_speed_tilt;
//		double speed_pan;
//		double speed_tilt;
//		double acceleration_pan;
//		double acceleration_tilt;
//		double max_speed_pan;
//		double max_speed_tilt;
//		double min_speed_pan;
//		double min_speed_tilt;
//
//		bool modified;
//	};

	static const uint32_t waitTries = 6;

	mrpt::hwdrivers::CPtuDPerception ptu;
	bool ptuActive;

	bool posChanged;
	double currentPan;
	double currentTilt;

	double commandedPan;
	double commandedTilt;

//	PTUParameters localParam;
	ParameterStateStruct localParam;
//	PTUParameters globalParam;

	arma::mat ptuRobotOffset;
	CommBasicObjects::CommBaseVelocity zero_velocity;
	CommBasicObjects::CommBasePose default_base_position;

	DomainPTU::CommPTUMoveRequest oneElementGoalBuffer;
	SmartACE::SmartMutex goalBufferMutex;
	SmartACE::SmartCVwithMemory newGoalCV;
public:
	PtuTask(SmartACE::SmartComponent *comp);
	virtual ~PtuTask();
	
	virtual int on_entry();
	virtual int on_execute();
	virtual int on_exit();

	void startPTU();
	void stopPTU();

	bool init(const std::string& device);

	void setGoal(const DomainPTU::CommPTUMoveRequest& request);
//	void setParameter(const CommPTUObjects::CommPTUParameter& param);
	void move(const DomainPTU::CommPTUMoveRequest& request, DomainPTU::CommPTUMoveResponse& answer);
	void getPos(double& pan, double& tilt);

private:
	PTUStatus lookPointRobot(const DomainPTU::CommPTUMoveRequest& request);
	PTUStatus lookPointWorld(const DomainPTU::CommPTUMoveRequest& request);

	PTUStatus movePanAbs(double pan);
	PTUStatus movePanOff(double pan);

	PTUStatus moveTiltAbs(double tilt);
	PTUStatus moveTiltOff(double tilt);

	PTUStatus moveToAbsPos(double pan, double tilt);
	PTUStatus moveToOffPos(double pan, double tilt);

	void waitTillPosReached(PTUStatus& status);

	void checkForErros(PTUStatus& status, PTUAxis axis);
};

#endif
