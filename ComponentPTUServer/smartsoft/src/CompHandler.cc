//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "CompHandler.hh"
#include "ComponentPTUServer.hh"

#include <iostream>

// include communication objects
#include <CommBasicObjects/CommBaseState.hh>
#include <CommBasicObjects/CommDevicePoseState.hh>
#include <DomainPTU/CommPTUGoalEventParameter.hh>
#include <DomainPTU/CommPTUGoalEventResult.hh>
#include <DomainPTU/CommPTUMoveRequest.hh>
#include <DomainPTU/CommPTUMoveResponse.hh>
#include <CommBasicObjects/CommVoid.hh>
#include <DomainPTU/PTUGoalEventState.hh>


void CompHandler::onStartup() 
{
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	Smart::StatusCode status;

	// connect to ptu unit
	if (COMP->ptuTask->init(COMP->getGlobalState().getPTU().getDevice())) {
		std::cout << "\n" << "Device: " << COMP->getGlobalState().getPTU().getDevice() << " successfully connected!\n";
	} else {
		std::cerr << "\n" << "ERROR: device " << COMP->getGlobalState().getPTU().getDevice() << " could not be opened!\n";
	}

	// Start all services. If you need manual control, use the content of this function to
	// connect and start each service individually, e.g:
	// COMP->connectMyPortName("SmartExampleComponent", "examplePort");
	// status = COMP->connectAndStartAllServices();
	
	if(COMP->getGlobalState().getBase().getOn_base()){
		status = COMP->connectBaseStateClient(COMP->connections.baseStateClient.serverName, COMP->connections.baseStateClient.serviceName);
		status = COMP->connectBaseStateQueryClient(COMP->connections.baseStateQueryClient.serverName, COMP->connections.baseStateQueryClient.serviceName);
	}

	// Start all tasks. If you need manual control, use the content of this function to
	// start each task individually.
	// COMP->startAllTasks();
	
	COMP->devicePoseStateTask->start();
	COMP->ptuTask->start();

	// Start all timers. If you need manual control, use the content of this function to
	// start each timer individually.
	COMP->startAllTimers();
	
	// Notify the component that setup/initialization is finished.
	// You may move this function to any other place.
	COMP->setStartupFinished(); 
}

void CompHandler::onShutdown() 
{
	std::cout << "shutdown - put your cleanup code in CompHandler::onShutdown()!!!\n";
	
}
