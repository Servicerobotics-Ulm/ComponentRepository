//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "ComponentPTUServerAcePortFactory.hh"

// create a static instance of the default AcePortFactory
static ComponentPTUServerAcePortFactory acePortFactory;

ComponentPTUServerAcePortFactory::ComponentPTUServerAcePortFactory()
{  
	componentImpl = 0;
	ComponentPTUServer::instance()->addPortFactory("ACE_SmartSoft", this);
}

ComponentPTUServerAcePortFactory::~ComponentPTUServerAcePortFactory()
{  }

void ComponentPTUServerAcePortFactory::initialize(ComponentPTUServer *component, int argc, char* argv[])
{
	if(component->connections.component.defaultScheduler != "DEFAULT") {
		ACE_Sched_Params sched_params(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(component->connections.component.defaultScheduler == "FIFO") {
			sched_params.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				sched_params.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				sched_params.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(component->connections.component.defaultScheduler == "RR") {
			sched_params.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				sched_params.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				sched_params.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		// create new instance of the SmartSoft component with customized scheuling parameters 
		componentImpl = new ComponentPTUServerImpl(component->connections.component.name, argc, argv, sched_params);
	} else {
		// create new instance of the SmartSoft component
		componentImpl = new ComponentPTUServerImpl(component->connections.component.name, argc, argv);
	}
}

int ComponentPTUServerAcePortFactory::onStartup()
{
	return componentImpl->startComponentInfrastructure();
}

Smart::IPushClientPattern<CommBasicObjects::CommBaseState> * ComponentPTUServerAcePortFactory::createBaseStateClient()
{
	return new SmartACE::PushClient<CommBasicObjects::CommBaseState>(componentImpl);
}

Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommBasicObjects::CommBaseState> * ComponentPTUServerAcePortFactory::createBaseStateQueryClient()
{
	return new SmartACE::QueryClient<CommBasicObjects::CommVoid, CommBasicObjects::CommBaseState>(componentImpl);
}


Smart::IPushServerPattern<CommBasicObjects::CommDevicePoseState> * ComponentPTUServerAcePortFactory::createDevicePoseStateServer(const std::string &serviceName)
{
	return new SmartACE::PushServer<CommBasicObjects::CommDevicePoseState>(componentImpl, serviceName);
}

Smart::IEventServerPattern<DomainPTU::CommPTUGoalEventParameter, DomainPTU::CommPTUGoalEventResult, DomainPTU::PTUGoalEventState> * ComponentPTUServerAcePortFactory::createGoalEventServer(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<DomainPTU::CommPTUGoalEventParameter, DomainPTU::CommPTUGoalEventResult, DomainPTU::PTUGoalEventState>> goalEventServerEventTestHandler)
{
	return new SmartACE::EventServer<DomainPTU::CommPTUGoalEventParameter, DomainPTU::CommPTUGoalEventResult, DomainPTU::PTUGoalEventState>(componentImpl, serviceName, goalEventServerEventTestHandler);
}

Smart::IQueryServerPattern<DomainPTU::CommPTUMoveRequest, DomainPTU::CommPTUMoveResponse> * ComponentPTUServerAcePortFactory::createMoveQueryServer(const std::string &serviceName)
{
	return new SmartACE::QueryServer<DomainPTU::CommPTUMoveRequest, DomainPTU::CommPTUMoveResponse>(componentImpl, serviceName);
}

Smart::ISendServerPattern<DomainPTU::CommPTUMoveRequest> * ComponentPTUServerAcePortFactory::createMoveSendServer(const std::string &serviceName)
{
	return new SmartACE::SendServer<DomainPTU::CommPTUMoveRequest>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<CommBasicObjects::CommVoid, DomainPTU::CommMobilePTUState> * ComponentPTUServerAcePortFactory::createStateQueryServer(const std::string &serviceName)
{
	return new SmartACE::QueryServer<CommBasicObjects::CommVoid, DomainPTU::CommMobilePTUState>(componentImpl, serviceName);
}


SmartACE::SmartComponent* ComponentPTUServerAcePortFactory::getComponentImpl()
{
	return componentImpl;
}

int ComponentPTUServerAcePortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	componentImpl->stopComponentInfrastructure(timeoutTime);
	return 0;
}

void ComponentPTUServerAcePortFactory::destroy()
{
	// clean-up component's internally used resources (internally used communication middleware) 
	componentImpl->cleanUpComponentResources();
	delete componentImpl;
}
