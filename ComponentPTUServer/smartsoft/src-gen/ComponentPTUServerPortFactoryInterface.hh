//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef COMPONENTPTUSERVER_PORTFACTORYINTERFACE_HH_
#define COMPONENTPTUSERVER_PORTFACTORYINTERFACE_HH_

// include communication objects
#include <CommBasicObjects/CommBaseState.hh>
#include <CommBasicObjects/CommBaseStateACE.hh>
#include <CommBasicObjects/CommDevicePoseState.hh>
#include <CommBasicObjects/CommDevicePoseStateACE.hh>
#include <DomainPTU/CommMobilePTUState.hh>
#include <DomainPTU/CommMobilePTUStateACE.hh>
#include <DomainPTU/CommPTUGoalEventParameter.hh>
#include <DomainPTU/CommPTUGoalEventParameterACE.hh>
#include <DomainPTU/CommPTUGoalEventResult.hh>
#include <DomainPTU/CommPTUGoalEventResultACE.hh>
#include <DomainPTU/CommPTUMoveRequest.hh>
#include <DomainPTU/CommPTUMoveRequestACE.hh>
#include <DomainPTU/CommPTUMoveResponse.hh>
#include <DomainPTU/CommPTUMoveResponseACE.hh>
#include <CommBasicObjects/CommVoid.hh>
#include <CommBasicObjects/CommVoidACE.hh>
#include <DomainPTU/PTUGoalEventState.hh>
#include <DomainPTU/PTUGoalEventStateACE.hh>

#include <chrono>

// include component's main class
#include "ComponentPTUServer.hh"

// forward declaration
class ComponentPTUServer;

class ComponentPTUServerPortFactoryInterface {
public:
	ComponentPTUServerPortFactoryInterface() { };
	virtual ~ComponentPTUServerPortFactoryInterface() { };

	virtual void initialize(ComponentPTUServer *component, int argc, char* argv[]) = 0;
	virtual int onStartup() = 0;

	virtual Smart::IPushClientPattern<CommBasicObjects::CommBaseState> * createBaseStateClient() = 0;
	virtual Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommBasicObjects::CommBaseState> * createBaseStateQueryClient() = 0;
	
	virtual Smart::IPushServerPattern<CommBasicObjects::CommDevicePoseState> * createDevicePoseStateServer(const std::string &serviceName) = 0;
	virtual Smart::IEventServerPattern<DomainPTU::CommPTUGoalEventParameter, DomainPTU::CommPTUGoalEventResult, DomainPTU::PTUGoalEventState> * createGoalEventServer(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<DomainPTU::CommPTUGoalEventParameter, DomainPTU::CommPTUGoalEventResult, DomainPTU::PTUGoalEventState>> goalEventServerEventTestHandler) = 0;
	virtual Smart::IQueryServerPattern<DomainPTU::CommPTUMoveRequest, DomainPTU::CommPTUMoveResponse> * createMoveQueryServer(const std::string &serviceName) = 0;
	virtual Smart::ISendServerPattern<DomainPTU::CommPTUMoveRequest> * createMoveSendServer(const std::string &serviceName) = 0;
	virtual Smart::IQueryServerPattern<CommBasicObjects::CommVoid, DomainPTU::CommMobilePTUState> * createStateQueryServer(const std::string &serviceName) = 0;

	virtual int onShutdown(const std::chrono::steady_clock::duration &timeoutTime=std::chrono::seconds(2)) = 0;
	virtual void destroy() = 0;
};

#endif /* COMPONENTPTUSERVER_PORTFACTORYINTERFACE_HH_ */
