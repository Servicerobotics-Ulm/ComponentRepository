ComponentWebots2DLidar/BaseURI/value/0=http\://www.servicerobotik-ulm.de
ComponentWebots2DLidar/Homepage/value/3=http\://servicerobotik-ulm.de/components
ComponentWebots2DLidar/MarketName/value/1=ComponentWebots2DLidar
ComponentWebots2DLidar/Purpose/value/4=Example
ComponentWebots2DLidar/Supplier/value/2=Servicerobotics Ulm
ComponentWebots2DLidar/shortDescription=\n\nComponentWebots2DLidar connects to an lidar (laser scanner) in the webots simulator, measuring distances with laser rays.\n \nThe scans are made each Webots timeStep, at the same time (see Time of flight (ToF)). The rays are ordered horizontal from right to left. Distances are in measured in mm.\n\nNote that it is possible to reduce the data size by removing distance values with are not within a min or max distance or by reducing the resolution (angle between two rays) or the opening_angle (angle of all rays in the reduced data set).\n\nHow a new lidar can be added to Webots\:\n* Add a new Robot, set its controller to '&lt;extern&gt;', its coordinate system should be x\=front, y\=left, z\=up of the lidar rays.\n* The robots name must set the same in Webots and here.\n* Add the lidar in children of the robot, rotate it to match the coordinate system above.\n\nexample code\:\n\n```cpp\nCommBasicObjects\:\:CommMobileLaserScan scan;\nif(this->laserServiceInGetUpdate(scan) \!\= Smart\:\:SMART_OK) (some error handling here)\nint count \= scan.get_scan_size();\nfor (int i \= 0; i < count; ++i) {\n\t// scan.get_scan_angle is between 0 and 2*pi, 0\=front of lidar\n\tdouble angle \= scan.get_scan_angle(i) / M_PI * 180;\n\t// angle should be between -180 and +180 degrees, 0\=front of lidar\n\tif( angle > 180 )\n\t\tangle -\= 360;\n\tdouble distance \= scan.get_scan_distance(i);\n    ...\n}\n```\n  \n
eclipse.preferences.version=1
