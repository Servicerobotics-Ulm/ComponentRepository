# baseURI: http://www.servicerobotik-ulm.de/ComponentsAndSystems#ComponentWebots2DLidar
# imports: http://robmosys.eu/rdf/composition-structures
# imports: http://seronet-projekt.de/models/t2#Navigation

# imports: http://www.servicerobotik-ulm.de/DomainModels/CommBasicObjects

#######################################
# Technical Data Sheet
# for a SeRoNet Software Component as 
# exported by the SmartMDSD Toolchain
#
# erste Zeile des .ttl muss enthalten: "# ComponentID: <id uri>"
# This file will be placed in:
# <componentName>/datasheet-gen/<componentName>.ttl
#######################################

# all generated files use these prefixes
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix t1: <http://seronet-projekt.de/models/t1#> .
@prefix spdx: <http://spdx.org/rdf/terms#> .
@prefix spdx-lic: <http://spdx.org/licenses/> .

@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# TODO past “Durchstich”: exactly identify which elements belong to SeRoNet and which belong to RobMoSys
@prefix robmosys: <http://robmosys.eu/rdf/composition-structures#> .

# these namespaces can be different in generated files
@prefix t3: <http://www.servicerobotik-ulm.de/ComponentsAndSystems#> .

@prefix CommBasicObjects: <http://www.servicerobotik-ulm.de/DomainModels/CommBasicObjects#> .

##### Software Component ComponentWebots2DLidar
# see https://robmosys.eu/wiki/modeling:metamodels:component
t3:ComponentWebots2DLidar a robmosys:ComponentDefinition;
	a owl:Ontology ;
	owl:imports <http://robmosys.eu/rdf/composition-structures> ;
	owl:imports <http://www.servicerobotik-ulm.de/DomainModels/CommBasicObjects> ;
	
	# Human readable name of this component
	# Equals with the project name
	rdfs:label "ComponentWebots2DLidar";

	# Abstract. 1-sentence, very brief, description about this component.
	t1:shortDescription "
	
	ComponentWebots2DLidar connects to an lidar (laser scanner) in the Webots simulator, measuring horizontal distances with laser rays.
	 
	The laser scans are made each Webots timeStep, at the same time (see Time of flight (ToF)). The laser rays are ordered horizontal from right to left. Distances are in measured in mm.
	
	Note that it is possible to reduce the data size by changing the minimal or maximal range or by reducing the resolution (angle between two rays) or the opening_angle (angle of all rays in the reduced data set).
	
	Webots can display the laser rays: Menu 'View' 'Optional Rendering' 'Show Lidar Point Cloud' or press the key CTRL+F8. Webots displays only these rays which are hitting obstacles within minimal or maximal range.
	
	How a new lidar can be added to Webots:
	* Add a new Robot node for this lidar, set its controller to '&lt;extern&gt;', its coordinate system should be x=front, y=left, z=up of the lidar ray origin.
	* give same robot name in webots and in parameter <a href="#internal-parameter-webots">'webots'</a> 'robotName'
	
	Example:
	  
	```
	Robot {
	  children [
	    Lidar {
	    }
	  ]
	  name "exampleRobot"
	  controller "<extern>"
	}
	```
	
	Example from ComponentLaserObstacleAvoid:
	
	```cpp
	CommBasicObjects::CommMobileLaserScan scan;
	status = this->laserServiceInGetUpdate(scan);
	if(status != Smart::SMART_OK) {
	    std::cout << "laser error " << status << std::endl;
		return 0;
	}
	int count = scan.get_scan_size();
	for (int i = 0; i < count; ++i) {
	    // scan.get_scan_distance(i) returns the distance in mm
	    double distance = scan.get_scan_distance(i);
	    // scan.get_scan_angle returns an angle between 0 and 2*pi, angle 0 means front of lidar, counterclockwise
	    double angle = scan.get_scan_angle(i);
	    // this ray hits an obstacle at this position relative of lidar:  x mm to front and y mm to left
	    double x = distance * cos(angle);
	    double y = distance * sin(angle);
	    ...
	}
	```
	
	other similar Components:
	
	- [ComponentLaserHokuyoURGServer](../ComponentLaserHokuyoURGServer)
	- [ComponentLaserLMS1xx](../ComponentLaserLMS1xx)
	- [SmartLaserLMS200Server](../SmartLaserLMS200Server)
	- [ComponentLaserS300Server](../ComponentLaserS300Server)
	- [ComponentOPCUALaser](../ComponentOPCUALaser)
	- [ComponentRobotinoLaserServer](../ComponentRobotinoLaserServer)
	- [SmartGazeboBaseServer](../SmartGazeboBaseServer)
	";

	
	# DatasheetProperty MarketName
	t1:marketNameDescription "ComponentWebots2DLidar";
	# DatasheetProperty Supplier
	t1:supplierDescription "Servicerobotics Ulm";
	# The webpage with additional information about this component
	t1:homepage "https://wiki.servicerobotik-ulm.de/directory:collection"^^xsd:anyURI;
	# DatasheetProperty Purpose
	t1:purposeDescription "universal horizontal laser device in Webots simulator";

	# Services this component provides or requires
	# ComponentPort BaseStateServiceIn
	t1:requiredService t3:ComponentWebots2DLidar_BaseStateServiceIn;
	# ComponentPort LaserServiceOut
	t1:providedService t3:ComponentWebots2DLidar_LaserServiceOut;
	# ComponentPort LaserQueryServiceAnsw
	t1:providedService t3:ComponentWebots2DLidar_LaserQueryServiceAnsw;
.

# a service definition usage. Here: provided service
# see https://robmosys.eu/wiki/modeling:metamodels:component
t3:ComponentWebots2DLidar_BaseStateServiceIn 
	rdf:type CommBasicObjects:BaseStateService ;
	# name of this service definition as from the model
	rdfs:label "BaseStateServiceIn";


.

# a service definition usage. Here: provided service
# see https://robmosys.eu/wiki/modeling:metamodels:component
t3:ComponentWebots2DLidar_LaserServiceOut 
	rdf:type CommBasicObjects:LaserService ;
	# name of this service definition as from the model
	rdfs:label "LaserServiceOut";


.

# a service definition usage. Here: provided service
# see https://robmosys.eu/wiki/modeling:metamodels:component
t3:ComponentWebots2DLidar_LaserQueryServiceAnsw 
	rdf:type CommBasicObjects:LaserQueryService ;
	# name of this service definition as from the model
	rdfs:label "LaserQueryServiceAnsw";


.

