{
	"name": "ComponentWebots2DLidar",
	"shortDescription": "
	
	ComponentWebots2DLidar connects to an lidar (laser scanner) in the Webots simulator, measuring horizontal distances with laser rays.
	 
	The laser scans are made each Webots timeStep, at the same time (see Time of flight (ToF)). The laser rays are ordered horizontal from right to left. Distances are in measured in mm.
	
	Note that it is possible to reduce the data size by changing the minimal or maximal range or by reducing the resolution (angle between two rays) or the opening_angle (angle of all rays in the reduced data set).
	
	Webots can display the laser rays: Menu 'View' 'Optional Rendering' 'Show Lidar Point Cloud' or press the key CTRL+F8. Webots displays only these rays which are hitting obstacles within minimal or maximal range.
	
	How a new lidar can be added to Webots:
	* Add a new Robot node for this lidar, set its controller to '&lt;extern&gt;', its coordinate system should be x=front, y=left, z=up of the lidar ray origin.
	* give same robot name in webots and in parameter <a href="#internal-parameter-webots">'webots'</a> 'robotName'
	
	Example:
	  
	```
	Robot {
	  children [
	    Lidar {
	    }
	  ]
	  name "exampleRobot"
	  controller "<extern>"
	}
	```
	
	Example program:
	
	```cpp
	CommBasicObjects::CommMobileLaserScan scan;
	status = this->laserServiceInGetUpdate(scan);
	if(status != Smart::SMART_OK) {
	    std::cout << "laser error " << status << std::endl;
		return 0;
	}
	int count = scan.get_scan_size();
	for (int i = 0; i < count; ++i) {
	    // scan.get_scan_distance(i) returns the distance in mm
	    double distance = scan.get_scan_distance(i);
	    // scan.get_scan_angle returns an angle between 0 and 2*pi, angle 0 means front of lidar, counterclockwise
	    double angle = scan.get_scan_angle(i);
	    // this ray hits an obstacle at this position relative of lidar:  x mm to front and y mm to left
	    double x = distance * cos(angle);
	    double y = distance * sin(angle);
	    ...
	}
	```
	
	other similar components:
	
	- [ComponentLaserHokuyoURGServer](../ComponentLaserHokuyoURGServer)
	- [ComponentLaserLMS1xx](../ComponentLaserLMS1xx)
	- [SmartLaserLMS200Server](../SmartLaserLMS200Server)
	- [ComponentLaserS300Server](../ComponentLaserS300Server)
	- [ComponentOPCUALaser](../ComponentOPCUALaser)
	- [ComponentRobotinoLaserServer](../ComponentRobotinoLaserServer)
	- [SmartGazeboBaseServer](../SmartGazeboBaseServer)
	",
	"type": "Toolify",
	"description": "",
	"purposes": ["universal horizontal laser device in Webots simulator"],
	"marketName": "ComponentWebots2DLidar",
	"supplier": "Servicerobotics Ulm",
	"homepage": "https://wiki.servicerobotik-ulm.de/directory:collection",
	"services": [
	],
	"mainstates": [
		"Neutral"
	],
	"parameters": [
		{
			"name": "COMMIT",
			"nameFQN": "COMMIT",
			"type": "parameter",
			"description": "Commit the current parameter configuration.",
			"attributes": []
		}
	],
	"triggers": [
	]
}
