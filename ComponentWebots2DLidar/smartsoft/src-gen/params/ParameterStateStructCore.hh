//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <list>
#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter webots
		 */
		class webotsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string robotName;
		
		public:
			// default constructor
			webotsType() {
				robotName = "Lidar";
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getRobotName() const { return robotName; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "webots(";
				os << "robotName = " << robotName;
				os << ")\n";
			}
			
		}; // end class webotsType
		
		/**
		 * Definition of Parameter scanner
		 */
		class scannerType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double azimuth;
			double elevation;
			unsigned int frequency;
			unsigned int length_unit;
			unsigned int max_range;
			unsigned int min_range;
			bool on_turret;
			unsigned int opening_angle;
			double resolution;
			double roll;
			bool verbose;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			scannerType() {
				azimuth = 0;
				elevation = 0;
				frequency = 50;
				length_unit = 1;
				max_range = 20000;
				min_range = 10;
				on_turret = false;
				opening_angle = 270;
				resolution = 0.5;
				roll = 0;
				verbose = false;
				x = 0;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAzimuth() const { return azimuth; }
			inline double getElevation() const { return elevation; }
			inline unsigned int getFrequency() const { return frequency; }
			inline unsigned int getLength_unit() const { return length_unit; }
			inline unsigned int getMax_range() const { return max_range; }
			inline unsigned int getMin_range() const { return min_range; }
			inline bool getOn_turret() const { return on_turret; }
			inline unsigned int getOpening_angle() const { return opening_angle; }
			inline double getResolution() const { return resolution; }
			inline double getRoll() const { return roll; }
			inline bool getVerbose() const { return verbose; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "scanner(";
				os << "azimuth = " << azimuth; os << ", ";
				os << "elevation = " << elevation; os << ", ";
				os << "frequency = " << frequency; os << ", ";
				os << "length_unit = " << length_unit; os << ", ";
				os << "max_range = " << max_range; os << ", ";
				os << "min_range = " << min_range; os << ", ";
				os << "on_turret = " << on_turret; os << ", ";
				os << "opening_angle = " << opening_angle; os << ", ";
				os << "resolution = " << resolution; os << ", ";
				os << "roll = " << roll; os << ", ";
				os << "verbose = " << verbose; os << ", ";
				os << "x = " << x; os << ", ";
				os << "y = " << y; os << ", ";
				os << "z = " << z;
				os << ")\n";
			}
			
		}; // end class scannerType
		
		/**
		 * Definition of Parameter base_manipulator
		 */
		class base_manipulatorType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double base_a;
			bool on_base;
			double steer_a;
			double turret_a;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			base_manipulatorType() {
				base_a = 0;
				on_base = true;
				steer_a = 0;
				turret_a = 0;
				x = 0;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getBase_a() const { return base_a; }
			inline bool getOn_base() const { return on_base; }
			inline double getSteer_a() const { return steer_a; }
			inline double getTurret_a() const { return turret_a; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "base_manipulator(";
				os << "base_a = " << base_a; os << ", ";
				os << "on_base = " << on_base; os << ", ";
				os << "steer_a = " << steer_a; os << ", ";
				os << "turret_a = " << turret_a; os << ", ";
				os << "x = " << x; os << ", ";
				os << "y = " << y; os << ", ";
				os << "z = " << z;
				os << ")\n";
			}
			
		}; // end class base_manipulatorType
		
		/**
		 * Definition of Parameter services
		 */
		class servicesType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool activate_push_newest;
			bool active_push_timed;
		
		public:
			// default constructor
			servicesType() {
				activate_push_newest = true;
				active_push_timed = true;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getActivate_push_newest() const { return activate_push_newest; }
			inline bool getActive_push_timed() const { return active_push_timed; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "services(";
				os << "activate_push_newest = " << activate_push_newest; os << ", ";
				os << "active_push_timed = " << active_push_timed;
				os << ")\n";
			}
			
		}; // end class servicesType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	base_manipulatorType base_manipulator;
	scannerType scanner;
	servicesType services;
	webotsType webots;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	base_manipulatorType getBase_manipulator() const {
		return base_manipulator;
	}
	scannerType getScanner() const {
		return scanner;
	}
	servicesType getServices() const {
		return services;
	}
	webotsType getWebots() const {
		return webots;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		base_manipulator.to_ostream(os);
		scanner.to_ostream(os);
		services.to_ostream(os);
		webots.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["base_manipulator"] = nlohmann::json {
			{"base_a" , getBase_manipulator().getBase_a()},
			{"on_base" , getBase_manipulator().getOn_base()},
			{"steer_a" , getBase_manipulator().getSteer_a()},
			{"turret_a" , getBase_manipulator().getTurret_a()},
			{"x" , getBase_manipulator().getX()},
			{"y" , getBase_manipulator().getY()},
			{"z" , getBase_manipulator().getZ()}
		};
		param["scanner"] = nlohmann::json {
			{"azimuth" , getScanner().getAzimuth()},
			{"elevation" , getScanner().getElevation()},
			{"frequency" , getScanner().getFrequency()},
			{"length_unit" , getScanner().getLength_unit()},
			{"max_range" , getScanner().getMax_range()},
			{"min_range" , getScanner().getMin_range()},
			{"on_turret" , getScanner().getOn_turret()},
			{"opening_angle" , getScanner().getOpening_angle()},
			{"resolution" , getScanner().getResolution()},
			{"roll" , getScanner().getRoll()},
			{"verbose" , getScanner().getVerbose()},
			{"x" , getScanner().getX()},
			{"y" , getScanner().getY()},
			{"z" , getScanner().getZ()}
		};
		param["services"] = nlohmann::json {
			{"activate_push_newest" , getServices().getActivate_push_newest()},
			{"active_push_timed" , getServices().getActive_push_timed()}
		};
		param["webots"] = nlohmann::json {
			{"robotName" , getWebots().getRobotName()}
		};
	
		
		return param.dump();
	}
};

#endif
