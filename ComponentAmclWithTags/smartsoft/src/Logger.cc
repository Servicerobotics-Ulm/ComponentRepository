//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2020 Nayabrasul Shaik
//
//        nayabrasul.shaik@thu.de
//
//        Christian Schlegel (christian.schlegel@thu.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

#include <Logger.hh>
#include <cmath>

#include <mrpt/poses/CPose3D.h>
//#include <mrpt/math.h>
Logger::Logger() {

	//create filename from current date and time
	std::ostringstream oss;
	std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
	std::time_t now_c = std::chrono::system_clock::to_time_t(now);
	oss<<"markers_" <<std::put_time(std::localtime(&now_c), "%d_%m_%Y_%H_%M_%S")<<".txt";
	filename = oss.str();

	//open log file
	log_file.open(filename.c_str());
	std::cout << "logfile is opened : " << filename << std::endl;

	size_t formatting_width = 30;
	//configure stream format and write Header
	log_file << std::setprecision(6);
	log_file << std::fixed;
	log_file <<std::setw(formatting_width) <<"x (in m)"
			 <<std::setw(formatting_width) <<"y (in m)"
			 <<std::setw(formatting_width) <<"theta"
			 <<std::setw(formatting_width) <<"pset cv_00"
			 <<std::setw(formatting_width) <<"pset cv_01"
			 <<std::setw(formatting_width) <<"pset cv_10"
			 <<std::setw(formatting_width) <<"pset cv_11"
			 <<std::setw(formatting_width) <<"num clusters"

			 <<std::setw(formatting_width) <<"maxH cv_00"
			 <<std::setw(formatting_width) <<"maxH cv_01"
			 <<std::setw(formatting_width) <<"maxH cv_10"
			 <<std::setw(formatting_width) <<"maxH cv_11"

			 <<std::setw(formatting_width) <<"eigv_1"
			 <<std::setw(formatting_width) <<"eigv_2"
			 <<"\n";
}

Logger::~Logger() {
	log_file << std::endl;
	log_file.close();
	std::cout << "logfile is closed : " << filename << std::endl;
}

void Logger::write_baseUpdate(const CommBasicObjects::CommBasePositionUpdate& bpu,
		int cluster_count,
		double max_hyp_covar[3][3],
		double egv_1,
		double egv_2,
		bool laser_resampled,
		bool tag_resampled,
		bool force_publication,
		bool is_kidnapped)
{
	CommBasicObjects::CommBasePose base_pose = bpu.getCorrectedPose();
	int formatting_width = 30;
	log_file <<std::setw(formatting_width) << base_pose.get_x(1.0) //1
						 <<std::setw(formatting_width) << base_pose.get_y(1.0)//2
						 <<std::setw(formatting_width) <<base_pose.get_base_azimuth()//3
						 <<std::setw(formatting_width) <<base_pose.get_cov(0, 0)//4
						 <<std::setw(formatting_width) <<base_pose.get_cov(0, 1)//5
						 <<std::setw(formatting_width) <<base_pose.get_cov(1, 0)//6
						 <<std::setw(formatting_width) <<base_pose.get_cov(1, 1)//7

						 <<std::setw(formatting_width) <<cluster_count//8

						 <<std::setw(formatting_width) <<max_hyp_covar[0][0]//9
						 <<std::setw(formatting_width) <<max_hyp_covar[0][1]//10
						 <<std::setw(formatting_width) <<max_hyp_covar[1][0]//11
						 <<std::setw(formatting_width) <<max_hyp_covar[1][1]//12

						 <<std::setw(formatting_width) <<egv_1//13
						 <<std::setw(formatting_width) <<egv_2//14


						 <<std::setw(formatting_width) <<laser_resampled//15
						 <<std::setw(formatting_width) <<tag_resampled//16
						 <<std::setw(formatting_width) <<force_publication//17
						 <<std::setw(formatting_width) <<is_kidnapped//18
						 <<std::endl;
}
