//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2020 Nayabrasul Shaik
//
//        christian.schlegel@thu.de
//        nayabrasul.shaik@thu.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2.1
//  of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this library; if not, write to the Free Software Foundation, Inc.,
//  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//  This work is based on previous work by the folks from PlayerStage.
//
//--------------------------------------------------------------------------
#include <JsonParser.hh>

#include <iostream>
JsonParser::JsonParser(std::string json_file_name) : input_stream(json_file_name){

	input_stream >> json_string;
	is_parsed = false;
}

JsonParser::~JsonParser() {
	// TODO Auto-generated destructor stub
}

std::vector<CommTrackingObjects::CommDetectedMarker> JsonParser::get_markers_info() {
	if(!is_parsed)
	{
		if (json_string.contains("tags")) {
			json tags_array = json_string.at("tags");
			std::cout << "Number of tags present in the json : " <<tags_array.size() <<std::endl;
			for (int i =0; i< tags_array.size(); ++i) {

				CommTrackingObjects::CommDetectedMarker current_marker;
				CommBasicObjects::CommPose3d pose;

				double x = tags_array[i].at("x");
				double y = tags_array[i].at("y");
				double z = tags_array[i].at("z");

				pose.set_x(x * 1000.0);
				pose.set_y(y * 1000.0);
				pose.set_z(z * 1000.0);

				pose.set_azimuth(tags_array[i].at("yaw"));
				pose.set_elevation(tags_array[i].at("elevation"));
				pose.set_roll(tags_array[i].at("roll"));

				current_marker.setPose(pose);
				marker_list.push_back(current_marker);
			}
		}

	}
	is_parsed = true;
	return marker_list;
}
