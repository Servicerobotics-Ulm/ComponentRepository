//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        lutz@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2.1
//  of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this library; if not, write to the Free Software Foundation, Inc.,
//  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//  This work is based on previous work by the folks from PlayerStage.
//
//--------------------------------------------------------------------------

//----------------------------------------------------------------------------
//
// CREDITS:
//
// The code for the amcl algorithm was taken from the
// Playerstage Project, which is distributed under GPL, and you can find at
// http://playerstage.sourceforge.net/
//
// Player - One Hell of a Robot Server
// Copyright (C) 2000
//    Brian Gerkey, Kasper Stoy, Richard Vaughan, & Andrew Howard
//
//----------------------------------------------------------------------------
#ifndef _AMCLTASK_HH
#define _AMCLTASK_HH

#include "AmclTaskCore.hh"
#include "AmclTypes.hh"
#include <libgen.h>
#include "JsonParser.hh"
#ifdef WITH_MRPT_2_0_VERSION
#elif WITH_MRPT_1_5_VERSION
#include <mrpt/utils.h>
#endif
#include <algorithm>
#include <mutex>
#include "Logger.hh"

class AmclTask  : public AmclTaskCore
{

private:

	pf_vector_t pf_odom_pose_;
	int resample_interval_;
	int resample_count_;
	std::vector<CommTrackingObjects::CommDetectedMarker> marker_list;
	bool ready_for_tag_update_; //flag to indicate if a visual tag is to be considered for sensor update
	bool isPlanar;
	bool isPlanarFliped;
	std::once_flag check_laser_mounting;
	bool tag_data_recieved_   = false; //flag to indicate if tag   data is received in the current cycle
	bool laser_data_recieved_ = false; //flag to indicate if laser data is received in the current cycle
	Logger logger;
	double max_hypo_clusters_eigens_sum = 0.0;

public:
	AmclTask(SmartACE::SmartComponent *comp);
	virtual ~AmclTask();

	virtual int on_entry();
	virtual int on_execute();
	virtual int on_exit();

	int init(const std::string& filename);

private:
	map_t* loadMapFromFile(amcl_map_info_t& map_info);
	static CommBasicObjects::CommPose3d estimateWeightedRobotPoseFromTags(const CommTrackingObjects::CommDetectedMarkerList& markers_detected,
			                                                      const std::vector<CommTrackingObjects::CommDetectedMarker>& markers_from_map);
	static CommBasicObjects::CommPose3d estimateMeanRobotPoseFromTags(const CommTrackingObjects::CommDetectedMarkerList& markers_detected,
						                                             const std::vector<CommTrackingObjects::CommDetectedMarker>& markers_from_map);

	static CommBasicObjects::CommPose3d get_tag_pose_by_id(const std::vector<CommTrackingObjects::CommDetectedMarker>& markers, size_t tag_id);
	void set_laser_data(AMCLLaserData& ldata, const CommBasicObjects::CommMobileLaserScan& scan, const AMCLLaser* laser);
	amcl_hyp_t find_hypothesis_with_max_weight(pf_t *pf_);
	CommLocalizationObjects::LocalizationEventType verify_localization_status(const pf_t *pf_, const amcl_hyp_t& best_hypothesis);
	void get_laser_mounting(const CommBasicObjects::CommMobileLaserScan& scan, bool& is_planar, bool& is_planar_flipped);
	CommBasicObjects::CommBasePositionUpdate hypothesis_to_position_update(const amcl_hyp_t& best_hypothesis, const CommBasicObjects::CommBasePose& previousPose);
	void receive_sensor_data(CommBasicObjects::CommMobileLaserScan& laser_scan, CommTrackingObjects::CommDetectedMarkerList& tag_list);
	void get_odometry_and_prevous_pose(const CommBasicObjects::CommMobileLaserScan& laser_scan, const CommTrackingObjects::CommDetectedMarkerList& tag_list,
			pf_vector_t& odom, pf_vector_t& pose, CommBasicObjects::CommBasePose& previous_base_pose);
	pf_vector_t change_in_robot_movement(const pf_vector_t& current_odom, const pf_vector_t& previous_odom);
	void get_eigen_values(double covariance_matrix[3][3], double& e1, double& e2);
	bool is_robot_kidnapped(const CommBasicObjects::CommMobileLaserScan& scan, const CommTrackingObjects::CommDetectedMarkerList& markers_detected);
};

#endif
