//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "CameraTask.hh"
#include "ComponentRGBToWSStream.hh"

#include <iostream>

#include "DomainVision/CommRGBDImage.hh"
#include <opencv2/opencv.hpp>
#include <simple-websocket-server/server_wss.hpp>
#include "utils/base64.hh"

CameraTask::CameraTask(SmartACE::SmartComponent *comp) 
:	CameraTaskCore(comp)
{
	std::cout << "constructor CameraTask\n";
}
CameraTask::~CameraTask() 
{
	std::cout << "destructor CameraTask\n";
}



int CameraTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int CameraTask::on_execute()
{

	DomainVision::CommRGBDImage rgbd_image;
	DomainVision::CommVideoImage rgb_image;

	// Wait for new image from Kinect
	//use RBGD
	//CHS::StatusCode status = COMP->rGBDImageClient->getUpdateWait(rgbd_image);
	//cv::Mat bgr_image = cv::Mat((int)rgbd_image.getColor_image().getParameter().height, (int)rgbd_image.getColor_image().getParameter().width, CV_8UC3, const_cast< unsigned char*>(rgbd_image.getColor_image().get_data()));

	//use color only
	Smart::StatusCode status = COMP->videoImageClient->getUpdateWait(rgb_image);

	if(status != Smart::SMART_OK)
	{
		std::cout << "[CameraTask] Error videoImageClient connection: " << Smart::StatusCodeConversion(status)<<std::endl;
		return 0;
	}else if (!rgb_image.is_data_valid()) {
		std::cout << "[CameraTask] Error: Image data is not valid!" <<std::endl;
		return 0;
	}

	cv::Mat bgr_image = cv::Mat((int)rgb_image.getParameter().height, (int)rgb_image.getParameter().width, CV_8UC3, const_cast< unsigned char*>(rgb_image.get_data()));

	////////////////////
	// test

	//cv::imshow("something", image);
	//cv::waitKey(1);

	//std::string path = "/home/rollenhagen/Pictures/ratiopharm_images/kinect_rgb_tmp.png";
	//imwrite(path, image);
    //image = cv::imread(path, CV_LOAD_IMAGE_COLOR);

	////////////////////


    ////////////////////
	//Prepare Image for browser / transmission

	cv::Mat small_bgr_image, smallest_bgr_image;
	cv::Mat image;
	cv::pyrDown(bgr_image,image,cv::Size(bgr_image.cols / 2, bgr_image.rows / 2));
	//cv::pyrDown(small_bgr_image,image,cv::Size(small_bgr_image.cols / 2, small_bgr_image.rows / 2));

	//cv::cvtColor(small_bgr_image, image,CV_BGR2RGB);

	std::vector<int> params;
	//params.push_back(CV_IMWRITE_JPEG_QUALITY);
	//params.push_back(200);
	std::vector<uchar> image_jpeg;
	cv::imencode(".jpeg", image, image_jpeg, params);
    std::string msg_64 = base64_encode(image_jpeg.data(), image_jpeg.size());

    ////////////////////

    //std::string msg_64 = base64_encode(image.data, image.cols * image.rows * image.channels()); // three bytes per pixel

    auto send_stream = std::make_shared<WsServer::OutMessage>();
    *send_stream <<  msg_64;

    //std::cout << "[Camera Task] Sending message: " << msg_64.substr(0, 100) << std::endl;
    std::cout << "[Camera Task] Sending message with (rows, cols, channels, str length): " << image.rows << ", " << image.cols << ", " << image.channels() << ", " <<  msg_64.length() << std::endl;


    // connection->send is an asynchronous function
    COMP->ws_connection->send(send_stream, [](const SimpleWeb::error_code &ec) {
      if(ec) {
    	  std::cout << "[Camera Task] Error sending message. " <<
            // See http://www.boost.org/doc/libs/1_55_0/doc/html/boost_asio/reference.html, Error Codes for error code meanings
            "Error: " << ec << ", error message: " << ec.message() << std::endl;
      }
    });

    //sleep(1);
	return 0;
}
int CameraTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
