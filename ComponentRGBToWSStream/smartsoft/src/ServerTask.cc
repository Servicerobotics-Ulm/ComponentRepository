//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "ServerTask.hh"
#include "ComponentRGBToWSStream.hh"

#include <opencv2/opencv.hpp>
#include <iostream>

ServerTask::ServerTask(SmartACE::SmartComponent *comp) 
:	ServerTaskCore(comp)
{
	std::cout << "constructor ServerTask\n";

	//TODO define port in ini file!
	_server.config.port = 9080;


	  auto &echo = _server.endpoint["^/videostream/?$"];

	  std::cout << "Define events " << std::endl;

	  echo.on_message = [](std::shared_ptr<WsServer::Connection> connection, std::shared_ptr<WsServer::InMessage> message) {
	    auto message_str = message->string();
	    std::cout << "[ServerTask] Message received: \"" << message_str << "\" from " << connection.get() << std::endl;

	    if(message_str == "STARTSTREAM"){
	    	COMP->ws_connection = connection;
	    	std::cout << "[ServerTask] Start streaming / CameraTask" << std::endl;
			COMP->cameraTask->start();

	    }else if(message_str == "STOPSTREAM"){
	    	std::cout << "[ServerTask] Stop streaming / CameraTask" << std::endl;
	    	COMP->cameraTask->stop();
	    }

	  };

	  echo.on_open = [](std::shared_ptr<WsServer::Connection> connection) {
		  std::cout << "[ServerTask] Opened connection " << connection.get() << std::endl;
	  };

	  // See RFC 6455 7.4.1. for status codes
	  echo.on_close = [](std::shared_ptr<WsServer::Connection> connection, int status, const std::string & /*reason*/) {
		  std::cout << "[ServerTask] Closed connection " << connection.get() << " with status code " << status << std::endl;
		  std::cout << "[ServerTask] Stop streaming / CameraTask" << std::endl;
		  COMP->cameraTask->stop();
	  };

	  // See http://www.boost.org/doc/libs/1_55_0/doc/html/boost_asio/reference.html, Error Codes for error code meanings
	  echo.on_error = [](std::shared_ptr<WsServer::Connection> connection, const SimpleWeb::error_code &ec) {
		  std::cout << "[ServerTask] Error in connection " << connection.get() << ". "
	         << "Error: " << ec << ", error message: " << ec.message() << std::endl;
	  };

	  std::cout << "Finished definition" << std::endl;



}
ServerTask::~ServerTask() 
{
	std::cout << "destructor ServerTask\n";
}



int ServerTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int ServerTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	std::cout << "Hello from ServerTask\n";

	std::cout << "Start Listening" << std::endl;
	_server.start();
	std::cout << "Stop Listening" << std::endl;


	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int ServerTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
