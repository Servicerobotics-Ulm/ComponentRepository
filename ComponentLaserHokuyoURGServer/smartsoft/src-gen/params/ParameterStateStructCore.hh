//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <list>
#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter Scanner
		 */
		class ScannerType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double azimuth;
			std::string device;
			double elevation;
			unsigned int max_range;
			unsigned int min_range;
			unsigned int opening_angle;
			double roll;
			bool verbose;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			ScannerType() {
				azimuth = 0.0;
				device = "/dev/ttyACM0";
				elevation = 0.0;
				max_range = 5600;
				min_range = 20;
				opening_angle = 240;
				roll = 0.0;
				verbose = false;
				x = 0;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAzimuth() const { return azimuth; }
			inline std::string getDevice() const { return device; }
			inline double getElevation() const { return elevation; }
			inline unsigned int getMax_range() const { return max_range; }
			inline unsigned int getMin_range() const { return min_range; }
			inline unsigned int getOpening_angle() const { return opening_angle; }
			inline double getRoll() const { return roll; }
			inline bool getVerbose() const { return verbose; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Scanner(";
				os << "azimuth = " << azimuth; os << ", ";
				os << "device = " << device; os << ", ";
				os << "elevation = " << elevation; os << ", ";
				os << "max_range = " << max_range; os << ", ";
				os << "min_range = " << min_range; os << ", ";
				os << "opening_angle = " << opening_angle; os << ", ";
				os << "roll = " << roll; os << ", ";
				os << "verbose = " << verbose; os << ", ";
				os << "x = " << x; os << ", ";
				os << "y = " << y; os << ", ";
				os << "z = " << z;
				os << ")\n";
			}
			
		}; // end class ScannerType
		
		/**
		 * Definition of Parameter Base_manipulator
		 */
		class Base_manipulatorType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double base_azimuth;
			double base_elevation;
			double base_roll;
			bool on_base;
			bool on_manipulator;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			Base_manipulatorType() {
				base_azimuth = 0.0;
				base_elevation = 0.0;
				base_roll = 0.0;
				on_base = true;
				on_manipulator = false;
				x = 0;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getBase_azimuth() const { return base_azimuth; }
			inline double getBase_elevation() const { return base_elevation; }
			inline double getBase_roll() const { return base_roll; }
			inline bool getOn_base() const { return on_base; }
			inline bool getOn_manipulator() const { return on_manipulator; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Base_manipulator(";
				os << "base_azimuth = " << base_azimuth; os << ", ";
				os << "base_elevation = " << base_elevation; os << ", ";
				os << "base_roll = " << base_roll; os << ", ";
				os << "on_base = " << on_base; os << ", ";
				os << "on_manipulator = " << on_manipulator; os << ", ";
				os << "x = " << x; os << ", ";
				os << "y = " << y; os << ", ";
				os << "z = " << z;
				os << ")\n";
			}
			
		}; // end class Base_manipulatorType
		
		/**
		 * Definition of Parameter Services
		 */
		class ServicesType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool activate_push_newest;
			bool activate_push_timed;
		
		public:
			// default constructor
			ServicesType() {
				activate_push_newest = true;
				activate_push_timed = true;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getActivate_push_newest() const { return activate_push_newest; }
			inline bool getActivate_push_timed() const { return activate_push_timed; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Services(";
				os << "activate_push_newest = " << activate_push_newest; os << ", ";
				os << "activate_push_timed = " << activate_push_timed;
				os << ")\n";
			}
			
		}; // end class ServicesType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	Base_manipulatorType Base_manipulator;
	ScannerType Scanner;
	ServicesType Services;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	Base_manipulatorType getBase_manipulator() const {
		return Base_manipulator;
	}
	ScannerType getScanner() const {
		return Scanner;
	}
	ServicesType getServices() const {
		return Services;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		Base_manipulator.to_ostream(os);
		Scanner.to_ostream(os);
		Services.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["Base_manipulator"] = nlohmann::json {
			{"base_azimuth" , getBase_manipulator().getBase_azimuth()},
			{"base_elevation" , getBase_manipulator().getBase_elevation()},
			{"base_roll" , getBase_manipulator().getBase_roll()},
			{"on_base" , getBase_manipulator().getOn_base()},
			{"on_manipulator" , getBase_manipulator().getOn_manipulator()},
			{"x" , getBase_manipulator().getX()},
			{"y" , getBase_manipulator().getY()},
			{"z" , getBase_manipulator().getZ()}
		};
		param["Scanner"] = nlohmann::json {
			{"azimuth" , getScanner().getAzimuth()},
			{"device" , getScanner().getDevice()},
			{"elevation" , getScanner().getElevation()},
			{"max_range" , getScanner().getMax_range()},
			{"min_range" , getScanner().getMin_range()},
			{"opening_angle" , getScanner().getOpening_angle()},
			{"roll" , getScanner().getRoll()},
			{"verbose" , getScanner().getVerbose()},
			{"x" , getScanner().getX()},
			{"y" , getScanner().getY()},
			{"z" , getScanner().getZ()}
		};
		param["Services"] = nlohmann::json {
			{"activate_push_newest" , getServices().getActivate_push_newest()},
			{"activate_push_timed" , getServices().getActivate_push_timed()}
		};
	
		
		return param.dump();
	}
};

#endif
