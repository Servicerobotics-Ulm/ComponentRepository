//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2011 Matthias Lutz, Dennis Stampfer
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
// --------------------------------------------------------------------------
#include "ComponentUnicapImageClientCore.hh"

#ifdef WITH_MRPT_2_0_VERSION
ComponentUnicapImageClientCore::ComponentUnicapImageClientCore()
{
	std::cout << "constructor ComponentUnicapImageClientCore\n";
}
#else
ComponentUnicapImageClientCore::ComponentUnicapImageClientCore():
currentImage(NULL)
{
	std::cout << "constructor ComponentUnicapImageClientCore\n";
}

IplImage* ComponentUnicapImageClientCore::convertDataArrayToIplImage(DomainVision::CommVideoImage &query_image, CvSize size)
{


	IplImage* ipl_image = NULL;

	if (query_image.get_format() == DomainVision::FormatType::UYVY || query_image.get_format() == DomainVision::FormatType::RGB24)
	{
		unsigned char* arr_image = new unsigned char[query_image.get_size_as_rgb24()];
		query_image.get_as_rgb24(arr_image);

		ipl_image = OpenCVHelpers::copyRGBToIplImage(arr_image, query_image.get_height(), query_image.get_width());
		delete arr_image;

	} else if (query_image.get_format() == DomainVision::FormatType::GREY)
	{
		CvMat mat;
		cvInitMatHeader(&mat, size.height, size.width, CV_8UC1, const_cast<unsigned char *> (query_image.get_data()));
		ipl_image = cvCreateImage(size, IPL_DEPTH_8U, 1);

		// copy matrix data into image
		cvCopy(&mat, ipl_image);

	} else if (query_image.get_format() == DomainVision::FormatType::YUV422)
	{
		unsigned char* arr_image = new unsigned char[query_image.get_size_as_rgb24()];
		query_image.get_as_rgb24(arr_image);

		ipl_image = OpenCVHelpers::copyRGBToIplImage(arr_image, query_image.get_height(), query_image.get_width());
		delete arr_image;

	} else
	{
		std::cout << "Image Format: " << query_image.get_format() << " not supported!" << std::endl;
	}

	return ipl_image;

}
#endif
