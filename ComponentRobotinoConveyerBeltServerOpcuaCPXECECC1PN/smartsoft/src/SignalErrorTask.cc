//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "SignalErrorTask.hh"
#include "ComponentRobotinoConveyerBeltServerOpcuaCPXECECC1PN.hh"

#include <iostream>

SignalErrorTask::SignalErrorTask(SmartACE::SmartComponent *comp) 
:	SignalErrorTaskCore(comp)
{
	std::cout << "constructor SignalErrorTask\n";
	blink = false;
	digital_output_bit = COMP->getGlobalState().getRobot().getSignal_error_dout();
}
SignalErrorTask::~SignalErrorTask() 
{
	std::cout << "destructor SignalErrorTask\n";
}



int SignalErrorTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int SignalErrorTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status;
	CommRobotinoObjects::RobotinoConveyerBeltEventState eventState;
	status = COMP->stateSlave->acquire("signalerror");
	{
		SmartACE::SmartGuard guard(lock);
		queryDigitalOutput(digital_output_bit,blink);
		blink = !blink;
	}


	if(COMP->getAckTiggered() == true){
		std::cout<<"SignalErrorTask ACK present"<<std::endl;
		eventState.set(CommRobotinoObjects::RobotinoConveyerBeltEventType::CONVEYER_BELT_LOAD_DONE);
		COMP->loadEventServer->put(eventState);
	} else {
		eventState.set(CommRobotinoObjects::RobotinoConveyerBeltEventType::CONVEYER_BELT_LOAD_NOT_DONE);
		COMP->loadEventServer->put(eventState);
	}
	COMP->stateSlave->release("signalerror");

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}

void SignalErrorTask::disableErrorSignal(){
	SmartACE::SmartGuard guard(lock);
	blink = 0;
	queryDigitalOutput(digital_output_bit,blink);
}

int SignalErrorTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}

void SignalErrorTask::queryDigitalOutput(const unsigned int & bit, const bool & value){

	CommRobotinoObjects::CommRobotinoIOValues outputQuery;
	CommRobotinoObjects::CommRobotinoIOValues dummy;
	outputQuery.resizeDigitalOutputValues(1);

	Smart::StatusCode status;
	CommRobotinoObjects::CommDigitalOutputRequest digitalOutputRequest(bit,value);

	outputQuery.setDigitalOutputValuesElemAtPos(0,digitalOutputRequest);

	status = COMP->iOQueryClient->query(outputQuery,dummy);
	if(status != Smart::SMART_OK){
		std::cout<<__FUNCTION__<<" ERROR: query digital IO"<<std::endl;
		COMP->stateSlave->setWaitState("FatalError");
	}

}
