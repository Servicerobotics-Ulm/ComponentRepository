//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2014 Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "SmartStateChangeHandler.hh"
#include "ComponentRobotinoConveyerBeltServerOpcuaCPXECECC1PN.hh"

#include <iostream>

// Called when a substate is entered
void SmartStateChangeHandler::handleEnterState(const std::string & substate) throw()
{
	if(substate == "load")
	{
		//COMP->loadTask->resetDocking();
		CommRobotinoObjects::RobotinoConveyerBeltEventState goalEventState;
		goalEventState.set(CommRobotinoObjects::RobotinoConveyerBeltEventType::CONVEYER_BELT_LOAD_NOT_DONE);
		COMP->loadEventServer->put(goalEventState);
		std::cout<<"GOALD EVENT CONVEYER_BELT_LOAD_NOT_DONE FIRED!"<<std::endl;

		COMP->loadTask->resetAbortFlag();
		COMP->triggerLoad.release();

	}
	if(substate == "unload")
	{
		//COMP->unLoadTask->resetDocking();
		CommRobotinoObjects::RobotinoConveyerBeltEventState goalEventState;
		goalEventState.set(CommRobotinoObjects::RobotinoConveyerBeltEventType::CONVEYER_BELT_UNLOAD_NOT_DONE);
		COMP->loadEventServer->put(goalEventState);
		std::cout<<"GOALD EVENT CONVEYER_BELT_UNLOAD_NOT_DONE FIRED!"<<std::endl;

		COMP->unloadTask->resetAbortFlag();
		COMP->triggerUnLoad.release();

	}

	if(substate == "manualload")
	{
		COMP->manualLoadTask->reset();
	}

	if(substate == "manualunload")
	{
		COMP->manualUnloadTask->reset();
	}

	if(substate == "signalerror")
	{
		COMP->setAckTiggered(false);
		CommRobotinoObjects::CommDigitalInputEventParameter evtParam;
		evtParam.setDigitalInputValuesNumber(COMP->getGlobalState().getRobot().getAck_pressed_din());
		evtParam.setDigitalInputValue(true);
		COMP->digitalInputEventClient->activate(Smart::single, evtParam, error_Ack_evtId);
	}


}

// Called when a substate is left
void SmartStateChangeHandler::handleQuitState(const std::string & substate) throw()
{

	if(substate == "load")
	{
		std::cout<<"SmartStateChangeHandler::handleQuitState setAbortFlag!"<<std::endl;
		COMP->loadTask->setAbortFlag();
	}

	if(substate == "unload")
	{
		std::cout<<"SmartStateChangeHandler::handleQuitState setAbortFlag!"<<std::endl;
		COMP->unloadTask->setAbortFlag();
	}
	// change this code to your needs !!!
	if(substate == "signalerror")
	{
		COMP->signalErrorTask->disableErrorSignal();
		COMP->digitalInputEventClient->deactivate(error_Ack_evtId);
	}

	if(substate == "manualload")
	{
		COMP->manualLoadTask->disableLoadSignal();
	}

	if(substate == "manualunload")
	{
		COMP->manualUnloadTask->disableUnLoadSignal();
	}

}
