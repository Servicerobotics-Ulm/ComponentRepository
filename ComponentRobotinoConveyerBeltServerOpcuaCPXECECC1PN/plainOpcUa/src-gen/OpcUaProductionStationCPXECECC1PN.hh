//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _PRODUCTIONSTATIONCPXECECC1PN_HH
#define _PRODUCTIONSTATIONCPXECECC1PN_HH

// use the generic client implmentation from the Open62541 C++ Wrapper Library
#include <OpcUaGenericClient.hh>

// implement the abstract interface
#include "ProductionStationCPXECECC1PNInterface.hh"

namespace OPCUA {

/** This class wraps OPC UA related communication to an OPC UA Device.
 *
 * This class internally implements an OPC UA client and provides a C++ API
 * based on a provided XML file that contains the device's information model.
 * 
 * In case where no XML file is provided, this class can still be used generically
 * by using two generic connect methods and the generic template getter/setter/caller methods.
 * 
 */
class ProductionStationCPXECECC1PN : public GenericClient, public ProductionStationCPXECECC1PNInterface
{
protected:
	// method implementing the XML-specific client space
	virtual bool createClientSpace(const bool activateUpcalls=true) override;
	
	// generic upcall method called whenever one of the ntity's values is changed
	virtual void handleVariableValueUpdate(const std::string &variableName, const OPCUA::Variant &value) override;
	
	// specific method to handle value updates for BLINKER
	void handleBLINKER(const bool &value);
	
	// specific method to handle value updates for LED_GREEN
	void handleLED_GREEN(const bool &value);
	
	// specific method to handle value updates for LED_RED
	void handleLED_RED(const bool &value);
	
	// specific method to handle value updates for LED_YELLOW
	void handleLED_YELLOW(const bool &value);
	
	// specific method to handle value updates for isBoxPresent
	void handleIsBoxPresent(const bool &value);
	
	// specific method to handle value updates for cycles_in_seconds
	void handleCycles_in_seconds(const int &value);
	
	// specific method to handle value updates for motor_timeout
	void handleMotor_timeout(const int &value);
	
	// specific method to handle value updates for result_timeout
	void handleResult_timeout(const int &value);
	
	// specific method to handle value updates for loadbox
	void handleLoadbox(const bool &value);
	
	// specific method to handle value updates for start_unloading
	void handleStart_unloading(const bool &value);
	
	// specific method to handle value updates for stop_unloading
	void handleStop_unloading(const bool &value);
	
	// specific method to handle value updates for method_result
	void handleMethod_result(const std::string &value);
	

public:
	// Constructor
	ProductionStationCPXECECC1PN();
	
	// Destructor
	virtual ~ProductionStationCPXECECC1PN();
	
	/** XML Specific Getter function for variable BLINKER
	 *
	 *  This function gets BLINKER  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual bool getBLINKER() const;
	
	/** XML Specific Getter function for variable BLINKER
	 *
	 *  This function gets BLINKER  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getBLINKER(bool &bLINKER) const override;
	virtual OPCUA::StatusCode getBLINKERWait(bool &bLINKER);
	
	/** XML Specific Setter function for entity BLINKER
	 *
	 *  This function sets BLINKER  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setBLINKER(const bool &value) override;
	
	/** XML Specific Getter function for variable LED_GREEN
	 *
	 *  This function gets LED_GREEN  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual bool getLED_GREEN() const;
	
	/** XML Specific Getter function for variable LED_GREEN
	 *
	 *  This function gets LED_GREEN  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getLED_GREEN(bool &lED_GREEN) const override;
	virtual OPCUA::StatusCode getLED_GREENWait(bool &lED_GREEN);
	
	/** XML Specific Setter function for entity LED_GREEN
	 *
	 *  This function sets LED_GREEN  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setLED_GREEN(const bool &value) override;
	
	/** XML Specific Getter function for variable LED_RED
	 *
	 *  This function gets LED_RED  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual bool getLED_RED() const;
	
	/** XML Specific Getter function for variable LED_RED
	 *
	 *  This function gets LED_RED  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getLED_RED(bool &lED_RED) const override;
	virtual OPCUA::StatusCode getLED_REDWait(bool &lED_RED);
	
	/** XML Specific Setter function for entity LED_RED
	 *
	 *  This function sets LED_RED  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setLED_RED(const bool &value) override;
	
	/** XML Specific Getter function for variable LED_YELLOW
	 *
	 *  This function gets LED_YELLOW  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual bool getLED_YELLOW() const;
	
	/** XML Specific Getter function for variable LED_YELLOW
	 *
	 *  This function gets LED_YELLOW  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getLED_YELLOW(bool &lED_YELLOW) const override;
	virtual OPCUA::StatusCode getLED_YELLOWWait(bool &lED_YELLOW);
	
	/** XML Specific Setter function for entity LED_YELLOW
	 *
	 *  This function sets LED_YELLOW  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setLED_YELLOW(const bool &value) override;
	
	/** XML Specific Getter function for variable isBoxPresent
	 *
	 *  This function gets isBoxPresent  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual bool getIsBoxPresent() const;
	
	/** XML Specific Getter function for variable isBoxPresent
	 *
	 *  This function gets isBoxPresent  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getIsBoxPresent(bool &isBoxPresent) const override;
	virtual OPCUA::StatusCode getIsBoxPresentWait(bool &isBoxPresent);
	
	/** XML Specific Setter function for entity isBoxPresent
	 *
	 *  This function sets isBoxPresent  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setIsBoxPresent(const bool &value) override;
	
	/** XML Specific Getter function for variable cycles_in_seconds
	 *
	 *  This function gets cycles_in_seconds  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual int getCycles_in_seconds() const;
	
	/** XML Specific Getter function for variable cycles_in_seconds
	 *
	 *  This function gets cycles_in_seconds  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getCycles_in_seconds(int &cycles_in_seconds) const override;
	virtual OPCUA::StatusCode getCycles_in_secondsWait(int &cycles_in_seconds);
	
	/** XML Specific Setter function for entity cycles_in_seconds
	 *
	 *  This function sets cycles_in_seconds  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setCycles_in_seconds(const int &value) override;
	
	/** XML Specific Getter function for variable motor_timeout
	 *
	 *  This function gets motor_timeout  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual int getMotor_timeout() const;
	
	/** XML Specific Getter function for variable motor_timeout
	 *
	 *  This function gets motor_timeout  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getMotor_timeout(int &motor_timeout) const override;
	virtual OPCUA::StatusCode getMotor_timeoutWait(int &motor_timeout);
	
	/** XML Specific Setter function for entity motor_timeout
	 *
	 *  This function sets motor_timeout  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setMotor_timeout(const int &value) override;
	
	/** XML Specific Getter function for variable result_timeout
	 *
	 *  This function gets result_timeout  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual int getResult_timeout() const;
	
	/** XML Specific Getter function for variable result_timeout
	 *
	 *  This function gets result_timeout  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getResult_timeout(int &result_timeout) const override;
	virtual OPCUA::StatusCode getResult_timeoutWait(int &result_timeout);
	
	/** XML Specific Setter function for entity result_timeout
	 *
	 *  This function sets result_timeout  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setResult_timeout(const int &value) override;
	
	/** XML Specific Getter function for variable loadbox
	 *
	 *  This function gets loadbox  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual bool getLoadbox() const;
	
	/** XML Specific Getter function for variable loadbox
	 *
	 *  This function gets loadbox  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getLoadbox(bool &loadbox) const override;
	virtual OPCUA::StatusCode getLoadboxWait(bool &loadbox);
	
	/** XML Specific Setter function for entity loadbox
	 *
	 *  This function sets loadbox  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setLoadbox(const bool &value) override;
	
	/** XML Specific Getter function for variable start_unloading
	 *
	 *  This function gets start_unloading  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual bool getStart_unloading() const;
	
	/** XML Specific Getter function for variable start_unloading
	 *
	 *  This function gets start_unloading  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getStart_unloading(bool &start_unloading) const override;
	virtual OPCUA::StatusCode getStart_unloadingWait(bool &start_unloading);
	
	/** XML Specific Setter function for entity start_unloading
	 *
	 *  This function sets start_unloading  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setStart_unloading(const bool &value) override;
	
	/** XML Specific Getter function for variable stop_unloading
	 *
	 *  This function gets stop_unloading  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual bool getStop_unloading() const;
	
	/** XML Specific Getter function for variable stop_unloading
	 *
	 *  This function gets stop_unloading  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getStop_unloading(bool &stop_unloading) const override;
	virtual OPCUA::StatusCode getStop_unloadingWait(bool &stop_unloading);
	
	/** XML Specific Setter function for entity stop_unloading
	 *
	 *  This function sets stop_unloading  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setStop_unloading(const bool &value) override;
	
	/** XML Specific Getter function for variable method_result
	 *
	 *  This function gets method_result  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @return the new value (or a default value like 0 in case of errors)
	 */
	virtual std::string getMethod_result() const;
	
	/** XML Specific Getter function for variable method_result
	 *
	 *  This function gets method_result  from the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *	
	 *  @param value	:output parameter, returns the new value if StatusCode is ALL_OK
	 *
	 *  @return status code
	 *	- ALL_OK
	 *  - DISCONNECTED
	 *  - ERROR_COMMUNICATION
	 */
	virtual OPCUA::StatusCode getMethod_result(std::string &method_result) const override;
	virtual OPCUA::StatusCode getMethod_resultWait(std::string &method_result);
	
	/** XML Specific Setter function for entity method_result
	 *
	 *  This function sets method_result  at the Server
	 *  When class ProductionStationCPXECECC1PN is used with a Specific XML file to connect to
	 *  SeRoNet Servers which implements the device information model.
	 *
	 *  @param value			:Value to be set
	 * 
	 *  @return status code
	 *    - true    : Entity was found and the value was set correctly
	 *    - false   : Entity was not found or the value was not set correctly
	 */
	virtual OPCUA::StatusCode setMethod_result(const std::string &value) override;
	
	
};

} /* namespace OPCUA */

#endif // _PRODUCTIONSTATIONCPXECECC1PN_HH
