//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "OpcUaProductionStationCPXECECC1PN.hh"

using namespace OPCUA;

ProductionStationCPXECECC1PN::ProductionStationCPXECECC1PN()
{  }
ProductionStationCPXECECC1PN::~ProductionStationCPXECECC1PN()
{  }

bool ProductionStationCPXECECC1PN::createClientSpace(const bool activateUpcalls)
{
	bool result = true;
	if(this->addVariableNode("BLINKER", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("LED_GREEN", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("LED_RED", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("LED_YELLOW", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("isBoxPresent", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("cycles_in_seconds", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("motor_timeout", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("result_timeout", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("loadbox", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("start_unloading", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("stop_unloading", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("method_result", activateUpcalls) != true) {
		result = false;
	}
	return result;
}

void ProductionStationCPXECECC1PN::handleVariableValueUpdate(const std::string &variableName, const OPCUA::Variant &value)
{
	if(variableName == "BLINKER") 
	{
		this->handleBLINKER(value);
	}
	else if(variableName == "LED_GREEN") 
	{
		this->handleLED_GREEN(value);
	}
	else if(variableName == "LED_RED") 
	{
		this->handleLED_RED(value);
	}
	else if(variableName == "LED_YELLOW") 
	{
		this->handleLED_YELLOW(value);
	}
	else if(variableName == "isBoxPresent") 
	{
		this->handleIsBoxPresent(value);
	}
	else if(variableName == "cycles_in_seconds") 
	{
		this->handleCycles_in_seconds(value);
	}
	else if(variableName == "motor_timeout") 
	{
		this->handleMotor_timeout(value);
	}
	else if(variableName == "result_timeout") 
	{
		this->handleResult_timeout(value);
	}
	else if(variableName == "loadbox") 
	{
		this->handleLoadbox(value);
	}
	else if(variableName == "start_unloading") 
	{
		this->handleStart_unloading(value);
	}
	else if(variableName == "stop_unloading") 
	{
		this->handleStop_unloading(value);
	}
	else if(variableName == "method_result") 
	{
		this->handleMethod_result(value);
	}
}

// specific method to handle value updates for BLINKER
void ProductionStationCPXECECC1PN::handleBLINKER(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleBLINKER(): " << value << std::endl;
}

// specific method to handle value updates for LED_GREEN
void ProductionStationCPXECECC1PN::handleLED_GREEN(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleLED_GREEN(): " << value << std::endl;
}

// specific method to handle value updates for LED_RED
void ProductionStationCPXECECC1PN::handleLED_RED(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleLED_RED(): " << value << std::endl;
}

// specific method to handle value updates for LED_YELLOW
void ProductionStationCPXECECC1PN::handleLED_YELLOW(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleLED_YELLOW(): " << value << std::endl;
}

// specific method to handle value updates for isBoxPresent
void ProductionStationCPXECECC1PN::handleIsBoxPresent(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleIsBoxPresent(): " << value << std::endl;
}

// specific method to handle value updates for cycles_in_seconds
void ProductionStationCPXECECC1PN::handleCycles_in_seconds(const int &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleCycles_in_seconds(): " << value << std::endl;
}

// specific method to handle value updates for motor_timeout
void ProductionStationCPXECECC1PN::handleMotor_timeout(const int &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleMotor_timeout(): " << value << std::endl;
}

// specific method to handle value updates for result_timeout
void ProductionStationCPXECECC1PN::handleResult_timeout(const int &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleResult_timeout(): " << value << std::endl;
}

// specific method to handle value updates for loadbox
void ProductionStationCPXECECC1PN::handleLoadbox(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleLoadbox(): " << value << std::endl;
}

// specific method to handle value updates for start_unloading
void ProductionStationCPXECECC1PN::handleStart_unloading(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleStart_unloading(): " << value << std::endl;
}

// specific method to handle value updates for stop_unloading
void ProductionStationCPXECECC1PN::handleStop_unloading(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleStop_unloading(): " << value << std::endl;
}

// specific method to handle value updates for method_result
void ProductionStationCPXECECC1PN::handleMethod_result(const std::string &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleMethod_result(): " << value << std::endl;
}


// generate xml-specific getters and setters
bool ProductionStationCPXECECC1PN::getBLINKER() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("BLINKER", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getBLINKER(bool &bLINKER) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("BLINKER", genericValue);
	bLINKER = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getBLINKERWait(bool &bLINKER) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("BLINKER", genericValue);
	bLINKER = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setBLINKER(const bool &value) {
	return setVariableValue("BLINKER", value);
}

bool ProductionStationCPXECECC1PN::getLED_GREEN() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_GREEN", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getLED_GREEN(bool &lED_GREEN) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_GREEN", genericValue);
	lED_GREEN = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getLED_GREENWait(bool &lED_GREEN) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("LED_GREEN", genericValue);
	lED_GREEN = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setLED_GREEN(const bool &value) {
	return setVariableValue("LED_GREEN", value);
}

bool ProductionStationCPXECECC1PN::getLED_RED() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_RED", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getLED_RED(bool &lED_RED) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_RED", genericValue);
	lED_RED = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getLED_REDWait(bool &lED_RED) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("LED_RED", genericValue);
	lED_RED = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setLED_RED(const bool &value) {
	return setVariableValue("LED_RED", value);
}

bool ProductionStationCPXECECC1PN::getLED_YELLOW() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_YELLOW", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getLED_YELLOW(bool &lED_YELLOW) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_YELLOW", genericValue);
	lED_YELLOW = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getLED_YELLOWWait(bool &lED_YELLOW) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("LED_YELLOW", genericValue);
	lED_YELLOW = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setLED_YELLOW(const bool &value) {
	return setVariableValue("LED_YELLOW", value);
}

bool ProductionStationCPXECECC1PN::getIsBoxPresent() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("isBoxPresent", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getIsBoxPresent(bool &isBoxPresent) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("isBoxPresent", genericValue);
	isBoxPresent = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getIsBoxPresentWait(bool &isBoxPresent) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("isBoxPresent", genericValue);
	isBoxPresent = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setIsBoxPresent(const bool &value) {
	return setVariableValue("isBoxPresent", value);
}

int ProductionStationCPXECECC1PN::getCycles_in_seconds() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("cycles_in_seconds", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return 0;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getCycles_in_seconds(int &cycles_in_seconds) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("cycles_in_seconds", genericValue);
	cycles_in_seconds = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getCycles_in_secondsWait(int &cycles_in_seconds) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("cycles_in_seconds", genericValue);
	cycles_in_seconds = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setCycles_in_seconds(const int &value) {
	return setVariableValue("cycles_in_seconds", value);
}

int ProductionStationCPXECECC1PN::getMotor_timeout() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("motor_timeout", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return 0;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getMotor_timeout(int &motor_timeout) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("motor_timeout", genericValue);
	motor_timeout = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getMotor_timeoutWait(int &motor_timeout) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("motor_timeout", genericValue);
	motor_timeout = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setMotor_timeout(const int &value) {
	return setVariableValue("motor_timeout", value);
}

int ProductionStationCPXECECC1PN::getResult_timeout() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("result_timeout", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return 0;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getResult_timeout(int &result_timeout) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("result_timeout", genericValue);
	result_timeout = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getResult_timeoutWait(int &result_timeout) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("result_timeout", genericValue);
	result_timeout = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setResult_timeout(const int &value) {
	return setVariableValue("result_timeout", value);
}

bool ProductionStationCPXECECC1PN::getLoadbox() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("loadbox", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getLoadbox(bool &loadbox) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("loadbox", genericValue);
	loadbox = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getLoadboxWait(bool &loadbox) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("loadbox", genericValue);
	loadbox = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setLoadbox(const bool &value) {
	return setVariableValue("loadbox", value);
}

bool ProductionStationCPXECECC1PN::getStart_unloading() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("start_unloading", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getStart_unloading(bool &start_unloading) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("start_unloading", genericValue);
	start_unloading = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getStart_unloadingWait(bool &start_unloading) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("start_unloading", genericValue);
	start_unloading = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setStart_unloading(const bool &value) {
	return setVariableValue("start_unloading", value);
}

bool ProductionStationCPXECECC1PN::getStop_unloading() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("stop_unloading", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getStop_unloading(bool &stop_unloading) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("stop_unloading", genericValue);
	stop_unloading = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getStop_unloadingWait(bool &stop_unloading) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("stop_unloading", genericValue);
	stop_unloading = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setStop_unloading(const bool &value) {
	return setVariableValue("stop_unloading", value);
}

std::string ProductionStationCPXECECC1PN::getMethod_result() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("method_result", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return std::string("");
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getMethod_result(std::string &method_result) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("method_result", genericValue);
	method_result = genericValue.toString();
	return status;
}
OPCUA::StatusCode ProductionStationCPXECECC1PN::getMethod_resultWait(std::string &method_result) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("method_result", genericValue);
	method_result = genericValue.toString();
	return status;
}

OPCUA::StatusCode ProductionStationCPXECECC1PN::setMethod_result(const std::string &value) {
	return setVariableValue("method_result", value);
}


