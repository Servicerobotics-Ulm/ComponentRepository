//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension.hh"

// the ace port-factory is used as a default port-mapping

// statically create a global PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension instance
static PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension extension;

PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension::PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension()
:	ComponentWebotsConveyorBeltOpcuaExtension("PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension")
{
	productionStation = 0;
	productionStationAutoConnect = false;
	productionStationDeviceURI = "opc.tcp://localhost:4840";
	productionStationRootObjectPath = "Server";
	
}

PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension::~PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension()
{  }

void PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension::loadParameters(const SmartACE::SmartIniParameter &parameter)
{
	parameter.getBoolean("ProductionStation", "autoConnect", productionStationAutoConnect);
	parameter.getString("ProductionStation", "deviceURI", productionStationDeviceURI);
	parameter.getString("ProductionStation", "rootObjectPath", productionStationRootObjectPath);
}

void PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension::initialize(ComponentWebotsConveyorBeltOpcua *component, int argc, char* argv[])
{
	productionStation = new OPCUA::ProductionStation();
	component->productionStation = productionStation;
}

int PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension::onStartup()
{
	if(productionStationAutoConnect == true) {
		// connect OPC/UA DeviceClient ProductionStation
		productionStation->connect(productionStationDeviceURI, productionStationRootObjectPath, false);
	}
	
	
	return startExtensionThread();
}

int PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension::extensionExecution()
{
	while(cancelled == false) {
		productionStation->run_once();
	}
	return 0;
}

int PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	// disconnect OPC/UA DeviceClient ProductionStation
	productionStation->disconnect();
	
	
	return stopExtensionThread(timeoutTime);
}

void PlainOpcUaComponentWebotsConveyorBeltOpcuaExtension::destroy()
{
	delete productionStation;
}
