# baseURI: http://www.servicerobotik-ulm.de/ComponentsAndSystems#ComponentWebotsConveyorBeltOpcua
# imports: http://robmosys.eu/rdf/composition-structures
# imports: http://seronet-projekt.de/models/t2#Navigation

# imports: http://www.servicerobotik-ulm.de/DomainModels/CommBasicObjects
# imports: http://www.servicerobotik-ulm.de/DomainModels/CommRobotinoObjects

#######################################
# Technical Data Sheet
# for a SeRoNet Software Component as 
# exported by the SmartMDSD Toolchain
#
# erste Zeile des .ttl muss enthalten: "# ComponentID: <id uri>"
# This file will be placed in:
# <componentName>/datasheet-gen/<componentName>.ttl
#######################################

# all generated files use these prefixes
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix t1: <http://seronet-projekt.de/models/t1#> .
@prefix spdx: <http://spdx.org/rdf/terms#> .
@prefix spdx-lic: <http://spdx.org/licenses/> .

@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# TODO past “Durchstich”: exactly identify which elements belong to SeRoNet and which belong to RobMoSys
@prefix robmosys: <http://robmosys.eu/rdf/composition-structures#> .

# these namespaces can be different in generated files
@prefix t3: <http://www.servicerobotik-ulm.de/ComponentsAndSystems#> .

@prefix CommBasicObjects: <http://www.servicerobotik-ulm.de/DomainModels/CommBasicObjects#> .
@prefix CommRobotinoObjects: <http://www.servicerobotik-ulm.de/DomainModels/CommRobotinoObjects#> .

##### Software Component ComponentWebotsConveyorBeltOpcua
# see https://robmosys.eu/wiki/modeling:metamodels:component
t3:ComponentWebotsConveyorBeltOpcua a robmosys:ComponentDefinition;
	a owl:Ontology ;
	owl:imports <http://robmosys.eu/rdf/composition-structures> ;
	owl:imports <http://www.servicerobotik-ulm.de/DomainModels/CommBasicObjects> ;
	owl:imports <http://www.servicerobotik-ulm.de/DomainModels/CommRobotinoObjects> ;
	
	# Human readable name of this component
	# Equals with the project name
	rdfs:label "ComponentWebotsConveyorBeltOpcua";

	# Abstract. 1-sentence, very brief, description about this component.
	t1:shortDescription "
	
	ComponentWebotsConveyorBeltOpcua transfers a stacking container (box) between an mobile robot and an production station.
	
	This component needs [Open62541CppWrapper](https://github.com/Servicerobotics-Ulm/Open62541CppWrapper) to be installed first.
	
	There is a demo to see this component in action: start SystemWebotsNavMpsDockingOPCUA, go to the window with 'ComponentTCLSequencer' and enter a number.
	
	There are two kinds of production stations:
	- an active station with an conveyor belt and an OPC UA server for communication
	- an passive station with an roller conveyor
	
	The movement (docking) of the robot to the production station is done by [ComponentWebotsMpsDocking](../ComponentWebotsMpsDocking).
	
	Transfer commands are given by setting the ComponentMode:
	- **load** moves the container from an production station to the mobile robot automatically (loads the robot)  
	- **unload** moves the container from the mobile robot to the production station automatically
	- **manualload** is like **load**, but manually
	- **manualunload** is like **unload**, but manually
	- **signalerror** shows an error (see **red** light below)
	
	Automatic load/unload:
	- if an box should be loaded but there is already one on top of the mobile robot, send event CONVEYER_BELT_LOAD_ERROR_BOX_ADREADY_PRSESENT and stop with an error
	- if an box should be unloaded but there was no one, send event CONVEYER_BELT_UNLOAD_ERROR_NO_BOX and stop with an error
	- send event CONVEYER_BELT_LOAD_NOT_DONE/CONVEYER_BELT_UNLOAD_NOT_DONE
	- turn on conveyor belt motors
	- if the box is detected at the target position, send event CONVEYER_BELT_LOAD_DONE/CONVEYER_BELT_UNLOAD_DONE and stop with success
	- after too many seconds without success or the production station reported an error, send event CONVEYER_BELT_LOAD_ERROR_NO_BOX_LOADED/CONVEYER_BELT_UNLOAD_ERROR_NO_BOX and stop with an error
	
	Meaning of the signal lights (on the mobile robot or production station):
	- **red**: an error occured, stop all until an human fixed the problem and pressed the enter key in the webots graphics window or the state changed (flashing red light=SignalError, constant red light=ManualLoad/ManualUnload)
	- **yellow**: warning, conveyor belts are turned on to transfer the stacking container
	- **green**: the stacking container is detected
	
	";

	
	# DatasheetProperty MarketName
	t1:marketNameDescription "ComponentWebotsConveyorBeltOpcua";
	# DatasheetProperty Supplier
	t1:supplierDescription "Servicerobotics Ulm";
	# The webpage with additional information about this component
	t1:homepage "https://wiki.servicerobotik-ulm.de/directory:collection"^^xsd:anyURI;
	# DatasheetProperty Purpose
	t1:purposeDescription "transfers a stacking container between an mobile robot and an production station by conveyor belts";

	# Services this component provides or requires
	# ComponentPort TrafficLightsServiceIn
	t1:requiredService t3:ComponentWebotsConveyorBeltOpcua_TrafficLightsServiceIn;
	# ComponentPort RobotinoConveyerBeltEventOut
	t1:providedService t3:ComponentWebotsConveyorBeltOpcua_RobotinoConveyerBeltEventOut;
.

# a service definition usage. Here: provided service
# see https://robmosys.eu/wiki/modeling:metamodels:component
t3:ComponentWebotsConveyorBeltOpcua_TrafficLightsServiceIn 
	rdf:type CommBasicObjects:TrafficLightsService ;
	# name of this service definition as from the model
	rdfs:label "TrafficLightsServiceIn";


.

# a service definition usage. Here: provided service
# see https://robmosys.eu/wiki/modeling:metamodels:component
t3:ComponentWebotsConveyorBeltOpcua_RobotinoConveyerBeltEventOut 
	rdf:type CommRobotinoObjects:RobotinoConveyerBeltEvent ;
	# name of this service definition as from the model
	rdfs:label "RobotinoConveyerBeltEventOut";


.

