//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter webots
		 */
		class webotsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string robotName;
		
		public:
			// default constructor
			webotsType() {
				robotName = "RobotinoConveyorBelt";
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getRobotName() const { return robotName; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "webots(";
				os << "robotName = " << robotName << ", ";
				os << ")\n";
			}
			
		}; // end class webotsType
		
		/**
		 * Definition of Parameter ProductionStations
		 */
		class ProductionStationsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::list<std::string> stationName;
			std::list<std::string> stationUrl;
		
		public:
			// default constructor
			ProductionStationsType() {
				stationName.push_back("MPS0");
				stationName.push_back("MPS1");
				stationName.push_back("MPS2");
				stationName.push_back("MPS3");
				stationUrl.push_back("opc.tcp://localhost:4840");
				stationUrl.push_back("opc.tcp://localhost:4841");
				stationUrl.push_back("opc.tcp://localhost:4842");
				stationUrl.push_back("PASSIVE_STATION");
			}
		
			/**
			 * here are the public getters
			 */
			inline std::list<std::string> getStationName() const { return stationName; }
			inline std::list<std::string> getStationUrl() const { return stationUrl; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "ProductionStations(";
				std::list<std::string>::const_iterator stationNameIt;
				for(stationNameIt=stationName.begin(); stationNameIt!=stationName.end(); stationNameIt++)
				{
				os << "stationName = " << *stationNameIt << ", ";
				os << "stationName = " << *stationNameIt << ", ";
				os << "stationName = " << *stationNameIt << ", ";
				os << "stationName = " << *stationNameIt << ", ";
				}
				std::list<std::string>::const_iterator stationUrlIt;
				for(stationUrlIt=stationUrl.begin(); stationUrlIt!=stationUrl.end(); stationUrlIt++)
				{
				os << "stationUrl = " << *stationUrlIt << ", ";
				os << "stationUrl = " << *stationUrlIt << ", ";
				os << "stationUrl = " << *stationUrlIt << ", ";
				os << "stationUrl = " << *stationUrlIt << ", ";
				}
				os << ")\n";
			}
			
		}; // end class ProductionStationsType
		
		/**
		 * Definition of Parameter Robot
		 */
		class RobotType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			unsigned int belt_time_out_sec;
			int ignore_station_communication_unload_time_sec;
		
		public:
			// default constructor
			RobotType() {
				belt_time_out_sec = 10;
				ignore_station_communication_unload_time_sec = 4;
			}
		
			/**
			 * here are the public getters
			 */
			inline unsigned int getBelt_time_out_sec() const { return belt_time_out_sec; }
			inline int getIgnore_station_communication_unload_time_sec() const { return ignore_station_communication_unload_time_sec; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Robot(";
				os << "belt_time_out_sec = " << belt_time_out_sec << ", ";
				os << "ignore_station_communication_unload_time_sec = " << ignore_station_communication_unload_time_sec << ", ";
				os << ")\n";
			}
			
		}; // end class RobotType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommRobotinoObjects
		 */
		class CommRobotinoObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet RobotinoConveyerParameter
			 */
			class RobotinoConveyerParameterType {
				friend class ParamUpdateHandler;
				public:
				/**
				 * Definition of Parameter SetStationID
				 */
				class SetStationIDType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					short id;
					
				public:
					// default constructor
					SetStationIDType() {
						id = 0;
					}
					
					/**
					 * here are the getter methods
					 */
					inline short getId() const { return id; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSetStationID(";
						os << "id = " << id << ", ";
						os << ")\n";
					}
					
				}; // end of parameter class SetStationIDType
				
				protected:
					/**
					 * internal members
					 */
					SetStationIDType SetStationID;
					
				public:
					/**
					 * public getter methods
					 */
					inline SetStationIDType getSetStationID() const { return SetStationID; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "RobotinoConveyerParameter(\n";
						SetStationID.to_ostream(os);
						os << ")";
					}
			}; // end of parameter-set class RobotinoConveyerParameterType
			
			protected:
				/**
				 * internal members
				 */
				RobotinoConveyerParameterType RobotinoConveyerParameter;
			
			public:
				/**
				 * public getter methods
				 */
				inline RobotinoConveyerParameterType getRobotinoConveyerParameter() const { return RobotinoConveyerParameter; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommRobotinoObjects(\n";
					RobotinoConveyerParameter.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommRobotinoObjectsType
	
protected:

	// Internal params
	ProductionStationsType ProductionStations;
	RobotType Robot;
	webotsType webots;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommRobotinoObjectsType CommRobotinoObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommRobotinoObjects = commit.getCommRobotinoObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	ProductionStationsType getProductionStations() const {
		return ProductionStations;
	}
	RobotType getRobot() const {
		return Robot;
	}
	webotsType getWebots() const {
		return webots;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommRobotinoObjectsType getCommRobotinoObjects() const {
		return CommRobotinoObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		ProductionStations.to_ostream(os);
		Robot.to_ostream(os);
		webots.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommRobotinoObjects.to_ostream(os);
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["ProductionStations"] = nlohmann::json {
			{"stationName" , getProductionStations().getStationName()},
			{"stationUrl" , getProductionStations().getStationUrl()}
		};
		param["Robot"] = nlohmann::json {
			{"belt_time_out_sec" , getRobot().getBelt_time_out_sec()},
			{"ignore_station_communication_unload_time_sec" , getRobot().getIgnore_station_communication_unload_time_sec()}
		};
		param["webots"] = nlohmann::json {
			{"robotName" , getWebots().getRobotName()}
		};
	
		param["RobotinoConveyerParameter"] = nlohmann::json {
			{ "SetStationID", {
				{"id" , getCommRobotinoObjects().getRobotinoConveyerParameter().getSetStationID().getId()}
			}}
		};
		
		return param.dump();
	}
};

#endif
