//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2021 Thomas Feldmeier
//
//        schlegel@hs-ulm.de
//
//        Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------

#ifndef _WEBOTSTASK_HH
#define _WEBOTSTASK_HH

#include "WebotsTaskCore.hh"
#include "OpcUaProductionStation.hh"

#include <webots/Supervisor.hpp>
#include <webots/Motor.hpp>
#include <webots/LED.hpp>
#include <webots/Motor.hpp>
#include <webots/DistanceSensor.hpp>
#include <webots/Keyboard.hpp>

class WebotsTask  : public WebotsTaskCore
{
private:
	enum Program { prNeutral=1, prLoad=2, prManualLoad=3, prUnload=4, prManualUnload=5, prSignalError=6};
	std::vector<std::string> programSubstate = {"neutral", "load", "manualload", "unload", "manualunload", "signalerror"};
	std::atomic<Program> newProgram {prNeutral}; // indirectly set by another thread (SmartStateChangeHandler)

	int getStationId();
	void sendEvent(CommRobotinoObjects::RobotinoConveyerBeltEventType t);
public:
	WebotsTask(SmartACE::SmartComponent *comp);
	virtual ~WebotsTask();
	
	virtual int on_entry();
	virtual int on_execute();
	virtual int on_exit();

	void handleEnterState(std::string substate);
};

#endif
