//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "SmartAmcl.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;

	std::string tag = request.getTag();
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMLOCALIZATIONOBJECTS.LOCALIZATIONPARAMETER.GLOBALLOCALIZATION")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommLocalizationObjects_LocalizationParameter_GLOBALLOCALIZATIONCore(
			);
		}
	}
	else if (tag == "COMMLOCALIZATIONOBJECTS.LOCALIZATIONPARAMETER.INITIALPOSE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_x = 0;
		if(request.getInteger("1", temp_x) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_y = 0;
		if(request.getInteger("2", temp_y) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		double temp_a = 0.0;
		if(request.getDouble("3", temp_a) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommLocalizationObjects_LocalizationParameter_INITIALPOSECore(
			temp_x, 
			temp_y, 
			temp_a
			);
		}
	}
	else if (tag == "COMMLOCALIZATIONOBJECTS.LOCALIZATIONPARAMETER.LOADMAP")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommLocalizationObjects_LocalizationParameter_LOADMAPCore(
			temp_filename
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter Filter
		if(parameter.getDouble("Filter", "kld_err", commitState.Filter.kld_err))
		{
			globalState.Filter.kld_err = commitState.Filter.kld_err;
		}
		if(parameter.getDouble("Filter", "kld_z", commitState.Filter.kld_z))
		{
			globalState.Filter.kld_z = commitState.Filter.kld_z;
		}
		if(parameter.getInteger("Filter", "max_particles", commitState.Filter.max_particles))
		{
			globalState.Filter.max_particles = commitState.Filter.max_particles;
		}
		if(parameter.getInteger("Filter", "min_particles", commitState.Filter.min_particles))
		{
			globalState.Filter.min_particles = commitState.Filter.min_particles;
		}
		if(parameter.getDouble("Filter", "recovery_alpha_fast", commitState.Filter.recovery_alpha_fast))
		{
			globalState.Filter.recovery_alpha_fast = commitState.Filter.recovery_alpha_fast;
		}
		if(parameter.getDouble("Filter", "recovery_alpha_slow", commitState.Filter.recovery_alpha_slow))
		{
			globalState.Filter.recovery_alpha_slow = commitState.Filter.recovery_alpha_slow;
		}
		if(parameter.getDouble("Filter", "resample_interval", commitState.Filter.resample_interval))
		{
			globalState.Filter.resample_interval = commitState.Filter.resample_interval;
		}
		if(parameter.getDouble("Filter", "update_min_alpha", commitState.Filter.update_min_alpha))
		{
			globalState.Filter.update_min_alpha = commitState.Filter.update_min_alpha;
		}
		if(parameter.getDouble("Filter", "update_min_d", commitState.Filter.update_min_d))
		{
			globalState.Filter.update_min_d = commitState.Filter.update_min_d;
		}
		// parameter General
		if(parameter.getBoolean("General", "connect_services", commitState.General.connect_services))
		{
			globalState.General.connect_services = commitState.General.connect_services;
		}
		if(parameter.getBoolean("General", "enable_visualization", commitState.General.enable_visualization))
		{
			globalState.General.enable_visualization = commitState.General.enable_visualization;
		}
		if(parameter.getString("General", "initPoseFileName", commitState.General.initPoseFileName))
		{
			globalState.General.initPoseFileName = commitState.General.initPoseFileName;
		}
		std::string temp_General_initalizationType = "";
		if(parameter.getString("General", "initalizationType", temp_General_initalizationType))
		{
			commitState.General.initalizationType = temp_General_initalizationType;
			globalState.General.initalizationType = commitState.General.initalizationType;
		}
		if(parameter.getDouble("General", "initial_a", commitState.General.initial_a))
		{
			globalState.General.initial_a = commitState.General.initial_a;
		}
		if(parameter.getDouble("General", "initial_cov_aa", commitState.General.initial_cov_aa))
		{
			globalState.General.initial_cov_aa = commitState.General.initial_cov_aa;
		}
		if(parameter.getDouble("General", "initial_cov_xx", commitState.General.initial_cov_xx))
		{
			globalState.General.initial_cov_xx = commitState.General.initial_cov_xx;
		}
		if(parameter.getDouble("General", "initial_cov_yy", commitState.General.initial_cov_yy))
		{
			globalState.General.initial_cov_yy = commitState.General.initial_cov_yy;
		}
		if(parameter.getDouble("General", "initial_x", commitState.General.initial_x))
		{
			globalState.General.initial_x = commitState.General.initial_x;
		}
		if(parameter.getDouble("General", "initial_y", commitState.General.initial_y))
		{
			globalState.General.initial_y = commitState.General.initial_y;
		}
		if(parameter.getDouble("General", "lostEventMaxEigValueSum", commitState.General.lostEventMaxEigValueSum))
		{
			globalState.General.lostEventMaxEigValueSum = commitState.General.lostEventMaxEigValueSum;
		}
		if(parameter.getInteger("General", "lostEventMaxHypothese", commitState.General.lostEventMaxHypothese))
		{
			globalState.General.lostEventMaxHypothese = commitState.General.lostEventMaxHypothese;
		}
		if(parameter.getBoolean("General", "verbose", commitState.General.verbose))
		{
			globalState.General.verbose = commitState.General.verbose;
		}
		if(parameter.getString("General", "yaml_file", commitState.General.yaml_file))
		{
			globalState.General.yaml_file = commitState.General.yaml_file;
		}
		// parameter Laser
		if(parameter.getDouble("Laser", "lambda_short", commitState.Laser.lambda_short))
		{
			globalState.Laser.lambda_short = commitState.Laser.lambda_short;
		}
		if(parameter.getDouble("Laser", "laser_likelihood_max_dist", commitState.Laser.laser_likelihood_max_dist))
		{
			globalState.Laser.laser_likelihood_max_dist = commitState.Laser.laser_likelihood_max_dist;
		}
		if(parameter.getString("Laser", "laser_model_type", commitState.Laser.laser_model_type))
		{
			globalState.Laser.laser_model_type = commitState.Laser.laser_model_type;
		}
		if(parameter.getInteger("Laser", "max_beams", commitState.Laser.max_beams))
		{
			globalState.Laser.max_beams = commitState.Laser.max_beams;
		}
		if(parameter.getDouble("Laser", "sigma_hit", commitState.Laser.sigma_hit))
		{
			globalState.Laser.sigma_hit = commitState.Laser.sigma_hit;
		}
		if(parameter.getDouble("Laser", "z_hit", commitState.Laser.z_hit))
		{
			globalState.Laser.z_hit = commitState.Laser.z_hit;
		}
		if(parameter.getDouble("Laser", "z_max", commitState.Laser.z_max))
		{
			globalState.Laser.z_max = commitState.Laser.z_max;
		}
		if(parameter.getDouble("Laser", "z_rand", commitState.Laser.z_rand))
		{
			globalState.Laser.z_rand = commitState.Laser.z_rand;
		}
		if(parameter.getDouble("Laser", "z_short", commitState.Laser.z_short))
		{
			globalState.Laser.z_short = commitState.Laser.z_short;
		}
		// parameter Odometry
		if(parameter.getDouble("Odometry", "alpha1", commitState.Odometry.alpha1))
		{
			globalState.Odometry.alpha1 = commitState.Odometry.alpha1;
		}
		if(parameter.getDouble("Odometry", "alpha2", commitState.Odometry.alpha2))
		{
			globalState.Odometry.alpha2 = commitState.Odometry.alpha2;
		}
		if(parameter.getDouble("Odometry", "alpha3", commitState.Odometry.alpha3))
		{
			globalState.Odometry.alpha3 = commitState.Odometry.alpha3;
		}
		if(parameter.getDouble("Odometry", "alpha4", commitState.Odometry.alpha4))
		{
			globalState.Odometry.alpha4 = commitState.Odometry.alpha4;
		}
		if(parameter.getDouble("Odometry", "alpha5", commitState.Odometry.alpha5))
		{
			globalState.Odometry.alpha5 = commitState.Odometry.alpha5;
		}
		if(parameter.getString("Odometry", "odom_model_type", commitState.Odometry.odom_model_type))
		{
			globalState.Odometry.odom_model_type = commitState.Odometry.odom_model_type;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
