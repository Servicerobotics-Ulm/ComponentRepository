//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef _COMPHANDLER_HH
#define _COMPHANDLER_HH

#include <string>
#include <deque>
	
class CompHandler
{
public:
	void onStartup();
	void onShutdown();
};

//DO NOT USE CamelCase function names for extern "C" functions, as they are called from lisp!

#if defined (__GNUC__) && defined(__unix__)
extern "C" char* command(char* ciType, char* ciInstance, char* compType, char* compInstance, char* service, char* param);
extern "C" void delay(int x);
extern "C" int initialize(char* paramFile);

extern "C" void waitoncomptasktocomplete();
extern "C" void waitoncompshutdown();
extern "C" void shutdowncomp();

extern "C" char* loadcoordinationinterface(char* ciName, char* ciPath);
extern "C" char* instantiateci(char* ciName, char* ciInstanceName, char* componentInstanceName, char* serviceNameMap);
extern "C" char* destroyci(char* ciName, char* ciInstanceName);

#elif defined (WIN32) || defined (WIN64)

extern "C" __declspec(dllexport) char* command(char* ciType, char* ciInstance, char* compType, char* compInstance, char* service, char* param);
extern "C" __declspec(dllexport) void delay(int x);
extern "C" __declspec(dllexport) int initialize(char* param);

extern "C" __declspec(dllexport) void waitoncomptasktocomplete();
extern "C" __declspec(dllexport) void waitoncompshutdown();
extern "C" __declspec(dllexport) void shutdowncomp();

extern "C" __declspec(dllexport) char* loadcoordinationinterface(char* ciName, char* ciPath);
extern "C" __declspec(dllexport) char* instantiateci(char* ciName, char* ciInstanceName, char* componentInstanceName, char* serviceNameMap);
extern "C" __declspec(dllexport) char* destroyci(char* ciName, char* ciInstanceName);

#endif

std::string splitIntoLines(std::deque <std::string> &result, std::stringstream &ss);
char* convertAndAllocateStdStringToCString (const std::string& inString);
	
#endif
