/**
 * The SmartPlannerBreadthFirstSearch provides path planning services based on grid maps. 
 * It uses a grid map from a map building component (e.g. SmartMapperGridMap) and sends an intermediate waypoint 
 * as well as the goalpoint to the motion execution (e.g. SmartCdlServer).
 *
 * A wave propagation algorithm starting from goal cells backward to the current position of the robot is used to calculate a path. 
 * The path planning is further enhanced by a path shortening heuristic: the path is followed starting at the current robot position 
 * until a straight line from the robot position to the cell in question on the path interferes with an obstacle. 
 * The prior cell is then sent as an intermediate waypoint. The geometric path planning is applied continuously every one second.
 *
 * Several goal circles and/or goal lines can be specified as goals in the planner. 
 * The planner will generate a path to the goal with the shortest distance.
 *
 * The SmartPlannerBreadthFirstSearch for example can be used with SmartCdlServer which cannot handle local minimas. 
 * Goals are then specified in the SmartPlannerBreadthFirstSearch. 
 * A CDL_GOAL_REACHED event is fired by the CDL component as soon as the final goal is reached.
 *
 * See also:
 * Christian Schlegel. Navigation and Execution for Mobile Robots in Dynamic Environments: An Integrated Approach. p. 27-29. Dissertation, 
 * Fakultät für Informatik, Universität Ulm, 2004.
 */
ComponentDefinition SmartPlannerBreadthFirstSearch {
	CoordinationSlavePort CoordinationPort implements CommNavigationObjects.PlannerCoordinationService {
		PrivateOperationMode pathplanning;
		PublicOperationMode CommNavigationObjects.PathPlannerStates.PathPlanning {
			activates ( pathplanning )
		}
		with plannerEvent realizedBy PlannerEventServer
	}
	
	InputPort CurMapClient implements CommNavigationObjects.CurrGridMapPushService { }
	InputPort BaseStateClient implements CommBasicObjects.BaseStateService { }
	
	Activity PlannerTask {
		InputPortLink CurMapClient {
			oversamplingOk undersamplingOk
		}
		InputPortLink BaseStateClient {
			oversamplingOk undersamplingOk
		}
		ActivationConstraints {
			configurable=true minActFreq = 2.0 Hz maxActFreq = 10.0 Hz
		}
		
		DefaultTrigger PeriodicTimer 4.0 Hz;
		
		OperationModeBinding CoordinationPort.pathplanning;
	}
	
	OutputPort PlannerGoalServer implements CommNavigationObjects.PlannerGoalService realizedBy PlannerTask { }
	OutputPort PlannerEventServer implements CommNavigationObjects.PlannerEventService realizedBy PlannerTask { }
	
	ComponentParameters SmartPlannerParams slave CoordinationPort;
}
