//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "ComponentLaserLMS1xx.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;

	std::string tag = request.getTag();
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter base_manipulator
		if(parameter.getDouble("base_manipulator", "base_a", commitState.base_manipulator.base_a))
		{
			globalState.base_manipulator.base_a = commitState.base_manipulator.base_a;
		}
		if(parameter.getBoolean("base_manipulator", "on_base", commitState.base_manipulator.on_base))
		{
			globalState.base_manipulator.on_base = commitState.base_manipulator.on_base;
		}
		if(parameter.getDouble("base_manipulator", "steer_a", commitState.base_manipulator.steer_a))
		{
			globalState.base_manipulator.steer_a = commitState.base_manipulator.steer_a;
		}
		if(parameter.getDouble("base_manipulator", "turret_a", commitState.base_manipulator.turret_a))
		{
			globalState.base_manipulator.turret_a = commitState.base_manipulator.turret_a;
		}
		if(parameter.getInteger("base_manipulator", "x", commitState.base_manipulator.x))
		{
			globalState.base_manipulator.x = commitState.base_manipulator.x;
		}
		if(parameter.getInteger("base_manipulator", "y", commitState.base_manipulator.y))
		{
			globalState.base_manipulator.y = commitState.base_manipulator.y;
		}
		if(parameter.getInteger("base_manipulator", "z", commitState.base_manipulator.z))
		{
			globalState.base_manipulator.z = commitState.base_manipulator.z;
		}
		// parameter scanner
		if(parameter.getDouble("scanner", "azimuth", commitState.scanner.azimuth))
		{
			globalState.scanner.azimuth = commitState.scanner.azimuth;
		}
		if(parameter.getDouble("scanner", "elevation", commitState.scanner.elevation))
		{
			globalState.scanner.elevation = commitState.scanner.elevation;
		}
		if(parameter.getInteger("scanner", "frequency", commitState.scanner.frequency))
		{
			globalState.scanner.frequency = commitState.scanner.frequency;
		}
		if(parameter.getString("scanner", "ip_address", commitState.scanner.ip_address))
		{
			globalState.scanner.ip_address = commitState.scanner.ip_address;
		}
		if(parameter.getInteger("scanner", "length_unit", commitState.scanner.length_unit))
		{
			globalState.scanner.length_unit = commitState.scanner.length_unit;
		}
		if(parameter.getInteger("scanner", "max_range", commitState.scanner.max_range))
		{
			globalState.scanner.max_range = commitState.scanner.max_range;
		}
		if(parameter.getInteger("scanner", "min_range", commitState.scanner.min_range))
		{
			globalState.scanner.min_range = commitState.scanner.min_range;
		}
		if(parameter.getBoolean("scanner", "on_turret", commitState.scanner.on_turret))
		{
			globalState.scanner.on_turret = commitState.scanner.on_turret;
		}
		if(parameter.getInteger("scanner", "opening_angle", commitState.scanner.opening_angle))
		{
			globalState.scanner.opening_angle = commitState.scanner.opening_angle;
		}
		if(parameter.getInteger("scanner", "port", commitState.scanner.port))
		{
			globalState.scanner.port = commitState.scanner.port;
		}
		if(parameter.getDouble("scanner", "resolution", commitState.scanner.resolution))
		{
			globalState.scanner.resolution = commitState.scanner.resolution;
		}
		if(parameter.getDouble("scanner", "roll", commitState.scanner.roll))
		{
			globalState.scanner.roll = commitState.scanner.roll;
		}
		if(parameter.getBoolean("scanner", "verbose", commitState.scanner.verbose))
		{
			globalState.scanner.verbose = commitState.scanner.verbose;
		}
		if(parameter.getInteger("scanner", "x", commitState.scanner.x))
		{
			globalState.scanner.x = commitState.scanner.x;
		}
		if(parameter.getInteger("scanner", "y", commitState.scanner.y))
		{
			globalState.scanner.y = commitState.scanner.y;
		}
		if(parameter.getInteger("scanner", "z", commitState.scanner.z))
		{
			globalState.scanner.z = commitState.scanner.z;
		}
		// parameter services
		if(parameter.getBoolean("services", "activate_push_newest", commitState.services.activate_push_newest))
		{
			globalState.services.activate_push_newest = commitState.services.activate_push_newest;
		}
		if(parameter.getBoolean("services", "active_push_timed", commitState.services.active_push_timed))
		{
			globalState.services.active_push_timed = commitState.services.active_push_timed;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
