//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartLaserLMS100Server component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#include "LaserQueryServiceAnswHandler.hh"
#include "ComponentLaserLMS1xx.hh"

LaserQueryServiceAnswHandler::LaserQueryServiceAnswHandler(Smart::IQueryServerPattern<CommBasicObjects::CommVoid, CommBasicObjects::CommMobileLaserScan>* server)
:	LaserQueryServiceAnswHandlerCore(server)
{
	
}

LaserQueryServiceAnswHandler::~LaserQueryServiceAnswHandler()
{
	
}

void LaserQueryServiceAnswHandler::on_update_from(const LaserTask* laserTask)
{
	// update triggered from LaserTask
	// (use a local mutex here, because this method is called from within the thread of LaserTask)
}

void LaserQueryServiceAnswHandler::handleQuery(const Smart::QueryIdPtr &id, const CommBasicObjects::CommVoid& request)
{
	CommBasicObjects::CommMobileLaserScan answer;
	
	// implement your query handling logic here and fill in the answer object
	if (COMP->getGlobalState().getScanner().getVerbose())
			std::cout << "read new laser data\n";

		// return scan
		SmartACE::SmartGuard guard(COMP->ScanLock);
		this->server->answer(id, COMP->global_scan);
		guard.release();
}
