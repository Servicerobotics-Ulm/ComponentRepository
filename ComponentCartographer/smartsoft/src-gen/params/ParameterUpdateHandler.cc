//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "ComponentCartographer.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	if(request.getParameterDataMode() == SmartACE::ParameterDataMode::NAME){
		answer = handleParametersNamed(request);
	} else {
		answer = handleParametersSequence(request);
	}
	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersNamed(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMLOCALIZATIONOBJECTS.SLAMPARAMETER.INITNEWMAP")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_x = 0;
		if(request.getInteger("x", temp_x) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: x request: "<<request<<std::endl;
		}
		int temp_y = 0;
		if(request.getInteger("y", temp_y) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: y request: "<<request<<std::endl;
		}
		int temp_a = 0;
		if(request.getInteger("a", temp_a) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: a request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommLocalizationObjects_SlamParameter_INITNEWMAPCore(
			temp_x, 
			temp_y, 
			temp_a
			);
		}
	}
	else if (tag == "COMMLOCALIZATIONOBJECTS.SLAMPARAMETER.SAVEMAP")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_dirname = "";
		if(request.getString("dirname", temp_dirname) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: dirname request: "<<request<<std::endl;
		}
		std::string temp_filename = "";
		if(request.getString("filename", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: filename request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommLocalizationObjects_SlamParameter_SAVEMAPCore(
			temp_dirname, 
			temp_filename
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersSequence(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMLOCALIZATIONOBJECTS.SLAMPARAMETER.INITNEWMAP")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_x = 0;
		if(request.getInteger("1", temp_x) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: x request: "<<request<<std::endl;
		}
		int temp_y = 0;
		if(request.getInteger("2", temp_y) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: y request: "<<request<<std::endl;
		}
		int temp_a = 0;
		if(request.getInteger("3", temp_a) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: a request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommLocalizationObjects_SlamParameter_INITNEWMAPCore(
			temp_x, 
			temp_y, 
			temp_a
			);
		}
	}
	else if (tag == "COMMLOCALIZATIONOBJECTS.SLAMPARAMETER.SAVEMAP")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_dirname = "";
		if(request.getString("1", temp_dirname) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: dirname request: "<<request<<std::endl;
		}
		std::string temp_filename = "";
		if(request.getString("2", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: filename request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommLocalizationObjects_SlamParameter_SAVEMAPCore(
			temp_dirname, 
			temp_filename
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter config
		if(parameter.getString("config", "config_dir_path", commitState.config.config_dir_path))
		{
			globalState.config.config_dir_path = commitState.config.config_dir_path;
		}
		// parameter general
		if(parameter.getBoolean("general", "enable_visualization", commitState.general.enable_visualization))
		{
			globalState.general.enable_visualization = commitState.general.enable_visualization;
		}
		// parameter sensors
		if(parameter.getInteger("sensors", "laser_frequency", commitState.sensors.laser_frequency))
		{
			globalState.sensors.laser_frequency = commitState.sensors.laser_frequency;
		}
		if(parameter.getInteger("sensors", "laser_subdivisions", commitState.sensors.laser_subdivisions))
		{
			globalState.sensors.laser_subdivisions = commitState.sensors.laser_subdivisions;
		}
		if(parameter.getBoolean("sensors", "use_laser", commitState.sensors.use_laser))
		{
			globalState.sensors.use_laser = commitState.sensors.use_laser;
		}
		if(parameter.getBoolean("sensors", "use_odometry", commitState.sensors.use_odometry))
		{
			globalState.sensors.use_odometry = commitState.sensors.use_odometry;
		}
		// parameter state
		if(parameter.getBoolean("state", "load_previous_state", commitState.state.load_previous_state))
		{
			globalState.state.load_previous_state = commitState.state.load_previous_state;
		}
		if(parameter.getString("state", "pb_stream", commitState.state.pb_stream))
		{
			globalState.state.pb_stream = commitState.state.pb_stream;
		}
		if(parameter.getBoolean("state", "pure_localization", commitState.state.pure_localization))
		{
			globalState.state.pure_localization = commitState.state.pure_localization;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
