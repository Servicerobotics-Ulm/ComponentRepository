//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter general
		 */
		class generalType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool enable_visualization;
		
		public:
			// default constructor
			generalType() {
				enable_visualization = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getEnable_visualization() const { return enable_visualization; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "general(";
				os << "enable_visualization = " << enable_visualization << ", ";
				os << ")\n";
			}
			
		}; // end class generalType
		
		/**
		 * Definition of Parameter sensors
		 */
		class sensorsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			unsigned char laser_frequency;
			unsigned char laser_subdivisions;
			bool use_laser;
			bool use_odometry;
		
		public:
			// default constructor
			sensorsType() {
				laser_frequency = 25;
				laser_subdivisions = 1;
				use_laser = true;
				use_odometry = true;
			}
		
			/**
			 * here are the public getters
			 */
			inline unsigned char getLaser_frequency() const { return laser_frequency; }
			inline unsigned char getLaser_subdivisions() const { return laser_subdivisions; }
			inline bool getUse_laser() const { return use_laser; }
			inline bool getUse_odometry() const { return use_odometry; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "sensors(";
				os << "laser_frequency = " << laser_frequency << ", ";
				os << "laser_subdivisions = " << laser_subdivisions << ", ";
				os << "use_laser = " << use_laser << ", ";
				os << "use_odometry = " << use_odometry << ", ";
				os << ")\n";
			}
			
		}; // end class sensorsType
		
		/**
		 * Definition of Parameter state
		 */
		class stateType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool load_previous_state;
			std::string pb_stream;
			bool pure_localization;
		
		public:
			// default constructor
			stateType() {
				load_previous_state = false;
				pb_stream = "test.pbstream";
				pure_localization = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getLoad_previous_state() const { return load_previous_state; }
			inline std::string getPb_stream() const { return pb_stream; }
			inline bool getPure_localization() const { return pure_localization; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "state(";
				os << "load_previous_state = " << load_previous_state << ", ";
				os << "pb_stream = " << pb_stream << ", ";
				os << "pure_localization = " << pure_localization << ", ";
				os << ")\n";
			}
			
		}; // end class stateType
		
		/**
		 * Definition of Parameter config
		 */
		class configType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string config_dir_path;
		
		public:
			// default constructor
			configType() {
				config_dir_path = "configuration_files";
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getConfig_dir_path() const { return config_dir_path; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "config(";
				os << "config_dir_path = " << config_dir_path << ", ";
				os << ")\n";
			}
			
		}; // end class configType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommLocalizationObjects
		 */
		class CommLocalizationObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet SlamParameter
			 */
			class SlamParameterType {
				friend class ParamUpdateHandler;
				public:
				protected:
					/**
					 * internal members
					 */
					
				public:
					/**
					 * public getter methods
					 */
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "SlamParameter(\n";
						os << ")";
					}
			}; // end of parameter-set class SlamParameterType
			
			protected:
				/**
				 * internal members
				 */
				SlamParameterType SlamParameter;
			
			public:
				/**
				 * public getter methods
				 */
				inline SlamParameterType getSlamParameter() const { return SlamParameter; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommLocalizationObjects(\n";
					SlamParameter.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommLocalizationObjectsType
	
protected:

	// Internal params
	configType config;
	generalType general;
	sensorsType sensors;
	stateType state;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommLocalizationObjectsType CommLocalizationObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommLocalizationObjects = commit.getCommLocalizationObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	configType getConfig() const {
		return config;
	}
	generalType getGeneral() const {
		return general;
	}
	sensorsType getSensors() const {
		return sensors;
	}
	stateType getState() const {
		return state;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommLocalizationObjectsType getCommLocalizationObjects() const {
		return CommLocalizationObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		config.to_ostream(os);
		general.to_ostream(os);
		sensors.to_ostream(os);
		state.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommLocalizationObjects.to_ostream(os);
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["config"] = nlohmann::json {
			{"config_dir_path" , getConfig().getConfig_dir_path()}
		};
		param["general"] = nlohmann::json {
			{"enable_visualization" , getGeneral().getEnable_visualization()}
		};
		param["sensors"] = nlohmann::json {
			{"laser_frequency" , getSensors().getLaser_frequency()},
			{"laser_subdivisions" , getSensors().getLaser_subdivisions()},
			{"use_laser" , getSensors().getUse_laser()},
			{"use_odometry" , getSensors().getUse_odometry()}
		};
		param["state"] = nlohmann::json {
			{"load_previous_state" , getState().getLoad_previous_state()},
			{"pb_stream" , getState().getPb_stream()},
			{"pure_localization" , getState().getPure_localization()}
		};
	
		param["SlamParameter"] = nlohmann::json {
		};
		
		return param.dump();
	}
};

#endif
