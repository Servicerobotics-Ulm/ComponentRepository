//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.3
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//BSD 3-Clause License
//
//  Copyright (C) Servicerobotics Ulm
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm
//  Germany
//  All rights reserved.
//
//  Author: Nayabrasul Shaik
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions are met:
//
//* Redistributions of source code must retain the above copyright notice, this
//  list of conditions and the following disclaimer.
//
//* Redistributions in binary form must reproduce the above copyright notice,
//  this list of conditions and the following disclaimer in the documentation
//  and/or other materials provided with the distribution.
//
//* Neither the name of the copyright holder nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef VISUALIZATIONHELPER_H_
#define VISUALIZATIONHELPER_H_

#include <mrpt/gui.h>
#include <mrpt/opengl.h>
#ifdef WITH_MRPT_2_0_VERSION
#elif WITH_MRPT_1_5_VERSION
#include <mrpt/utils.h>
#endif
#ifdef WITH_OLD_MRPT_VERSION
	#include <mrpt/maps.h>
#else
	#include <mrpt/maps/COccupancyGridMap2D.h>
#endif
#include <cartographer/transform/rigid_transform.h>

using namespace mrpt;
using namespace mrpt::math;
#ifdef WITH_OLD_MRPT_VERSION
using namespace mrpt::slam;
#endif
using namespace mrpt::gui;
using namespace mrpt::opengl;

//#include "AmclTypes.hh"
#include "CommBasicObjects/CommBasePose.hh"
#include "CommBasicObjects/CommMobileLaserScan.hh"

#include <vector>

class VisualizationHelper {

private:
#ifdef WITH_OLD_MRPT_VERSION
	COccupancyGridMap2D gridMap;
#else
	maps::COccupancyGridMap2D gridMap;
#endif

	CDisplayWindow3D *grid3D;

public:
	VisualizationHelper();
	virtual ~VisualizationHelper();
	void initializeVisualization();
	void initObjects();
	void clear();
	void displayLaserScan(const CommBasicObjects::CommMobileLaserScan& scan);
	void displayBase(const CommBasicObjects::CommBasePose& pos);
	void displayParticles(const std::vector<cartographer::transform::Rigid3d>& poses);
	void displayCoordinateSystem(poses::CPose3D& pose, double size = 0.1);

private:
	static double pi_to_pi(double angle) {
		angle += M_PI;
		double ret_angle = fmod(angle, 2* M_PI );

		if (angle < 0)
			ret_angle += 2* M_PI ;

		ret_angle -= M_PI;

		return ret_angle;
	}
};

#endif /* VISUALIZATIONHELPER_H_ */
