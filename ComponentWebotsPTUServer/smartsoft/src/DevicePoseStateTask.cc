//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#include "DevicePoseStateTask.hh"
#include "ComponentWebotsPTUServer.hh"

#include <EulerTransformationMatrices.hh>

#include <iostream>

DevicePoseStateTask::DevicePoseStateTask(SmartACE::SmartComponent *comp) 
:	DevicePoseStateTaskCore(comp)
{
	std::cout << "constructor DevicePoseStateTask\n";
}
DevicePoseStateTask::~DevicePoseStateTask() 
{
	std::cout << "destructor DevicePoseStateTask\n";
}



int DevicePoseStateTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	ptuRobotOffset = COMP->sensorOffset.getHomogeneousMatrix(1.0);
	EulerTransformationMatrices::create_zyx_matrix(COMP->getGlobalState().getPTU().getX(), COMP->getGlobalState().getPTU().getY(), COMP->getGlobalState().getPTU().getZ(),
			COMP->getGlobalState().getPTU().getAzimuth(), COMP->getGlobalState().getPTU().getElevation(), COMP->getGlobalState().getPTU().getRoll(), ptuRobotOffset);

	default_base_position.set_x(COMP->getGlobalState().getBase().getX());
	default_base_position.set_y(COMP->getGlobalState().getBase().getY());
	default_base_position.set_z(COMP->getGlobalState().getBase().getZ());
	default_base_position.set_base_azimuth(COMP->getGlobalState().getBase().getBase_a());
	default_base_position.set_base_elevation(COMP->getGlobalState().getBase().getSteer_a());
	default_base_position.set_base_roll(COMP->getGlobalState().getBase().getTurret_a());

	zero_velocity.set_vX(0);
	zero_velocity.set_vY(0);
	zero_velocity.set_vZ(0);
	zero_velocity.setWX(0);
	zero_velocity.setWY(0);
	zero_velocity.setWZ(0);

	return 0;
}
int DevicePoseStateTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel

	// wait here when the component is not active
	COMP->stateSlave->acquire("move");
	COMP->stateSlave->release("move");

	COMP->newPtuPos.acquire();

	if (COMP->getGlobalState().getBase().getOn_base())
	{
		base_state = COMP->baseStateTask->getBaseState();
	} else
	{
		// wait until the ptu moves. (because it is a push newest)
		base_state.set_base_position(default_base_position);
		base_state.set_base_raw_position(default_base_position);
		base_state.set_base_velocity(zero_velocity);
		base_state.set_time_stamp(CommBasicObjects::CommTimeStamp::now());
	}

	COMP->ptuTask->getPos(pan, tilt);

	// calculate device pose on robot
	arma::mat pose(4, 4);
	pose.zeros();
	pose(3, 3) = 1;

	EulerTransformationMatrices::create_zyx_matrix(pan, -tilt, 0, pose);
	pose = ptuRobotOffset * pose;
	CommBasicObjects::CommPose3d sensor_pose(pose);

	device_state.set_device_pose3d_robot(sensor_pose);
	device_state.set_base_state(base_state);

	COMP->devicePoseStateServer->put(device_state);

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int DevicePoseStateTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
