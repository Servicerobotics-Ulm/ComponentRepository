//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2021 Thomas Feldmeier
//
//        schlegel@hs-ulm.de
//
//        Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------

#ifndef _WEBOTSTASK_HH
#define _WEBOTSTASK_HH

#include "WebotsTaskCore.hh"
#include <DomainPTU/CommPTUMoveResponse.hh>
#include <atomic>
#include <condition_variable>

class WebotsTask  : public WebotsTaskCore
{
private:
    typedef DomainPTU::PTUMoveStatus PTUStatus;

    enum Program { prNeutral=1, prMove=2, prServo=3 };
    std::atomic<Program> newProgram {prNeutral}; // indirectly set by another thread (SmartStateChangeHandler)
    std::atomic<double> panPosition {0.0};
    std::atomic<double> tiltPosition {0.0};

    double panMinStop, panMaxStop, tiltMinStop, tiltMaxStop;

    // how thread synchronization is done:
    // see https://www.modernescpp.com/index.php/c-core-guidelines-be-aware-of-the-traps-of-condition-variables
    // this mutex guards panTargetPosition and tiltTargetPosition too
    std::mutex posReachedMutex;
    std::condition_variable waitTillPosReached;
    bool posReached = false;
    double panTargetPosition, tiltTargetPosition;

    std::mutex newestImageMutex;
    std::condition_variable waitForNewestImage;

public:
	WebotsTask(SmartACE::SmartComponent *comp);
	virtual ~WebotsTask();
	virtual int on_entry();
	virtual int on_execute();
	virtual int on_exit();

    void handleEnterState(const std::string &substate);
    void getPos(double &pan, double &tilt);
    PTUStatus movePanAbs(double pan);
    PTUStatus moveTiltAbs(double tilt);
    PTUStatus movePanOff(double pan);
    PTUStatus moveTiltOff(double tilt);
    PTUStatus movePanTilt(double pan, double tilt);
};

#endif

