//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <list>
#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter webots
		 */
		class webotsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string robotName;
		
		public:
			// default constructor
			webotsType() {
				robotName = "PTU";
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getRobotName() const { return robotName; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "webots(";
				os << "robotName = " << robotName;
				os << ")\n";
			}
			
		}; // end class webotsType
		
		/**
		 * Definition of Parameter PTU
		 */
		class PTUType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double azimuth;
			std::string device;
			double elevation;
			double roll;
			bool verbose;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			PTUType() {
				azimuth = 0;
				device = "/dev/ptu";
				elevation = 0;
				roll = 0;
				verbose = false;
				x = 0;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAzimuth() const { return azimuth; }
			inline std::string getDevice() const { return device; }
			inline double getElevation() const { return elevation; }
			inline double getRoll() const { return roll; }
			inline bool getVerbose() const { return verbose; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "PTU(";
				os << "azimuth = " << azimuth; os << ", ";
				os << "device = " << device; os << ", ";
				os << "elevation = " << elevation; os << ", ";
				os << "roll = " << roll; os << ", ";
				os << "verbose = " << verbose; os << ", ";
				os << "x = " << x; os << ", ";
				os << "y = " << y; os << ", ";
				os << "z = " << z;
				os << ")\n";
			}
			
		}; // end class PTUType
		
		/**
		 * Definition of Parameter Base
		 */
		class BaseType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double base_a;
			bool on_base;
			double steer_a;
			double turret_a;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			BaseType() {
				base_a = 0;
				on_base = true;
				steer_a = 0;
				turret_a = 0;
				x = 0;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getBase_a() const { return base_a; }
			inline bool getOn_base() const { return on_base; }
			inline double getSteer_a() const { return steer_a; }
			inline double getTurret_a() const { return turret_a; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Base(";
				os << "base_a = " << base_a; os << ", ";
				os << "on_base = " << on_base; os << ", ";
				os << "steer_a = " << steer_a; os << ", ";
				os << "turret_a = " << turret_a; os << ", ";
				os << "x = " << x; os << ", ";
				os << "y = " << y; os << ", ";
				os << "z = " << z;
				os << ")\n";
			}
			
		}; // end class BaseType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository DomainPTU
		 */
		class DomainPTUType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet PTUParameter
			 */
			class PTUParameterType {
				friend class ParamUpdateHandler;
				public:
				/**
				 * Definition of Parameter ACCELERATION_PAN
				 */
				class ACCELERATION_PANType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double acc;
					
				public:
					// default constructor
					ACCELERATION_PANType() {
						acc = 1.795;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getAcc() const { return acc; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tACCELERATION_PAN(";
						os << "acc = " << acc;
						os << ")\n";
					}
					
				}; // end of parameter class ACCELERATION_PANType
				
				/**
				 * Definition of Parameter ACCELERATION_TILT
				 */
				class ACCELERATION_TILTType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double acc;
					
				public:
					// default constructor
					ACCELERATION_TILTType() {
						acc = 1.795;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getAcc() const { return acc; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tACCELERATION_TILT(";
						os << "acc = " << acc;
						os << ")\n";
					}
					
				}; // end of parameter class ACCELERATION_TILTType
				
				/**
				 * Definition of Parameter RESET
				 */
				class RESETType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					bool reset;
					
				public:
					// default constructor
					RESETType() {
						reset = false;
					}
					
					/**
					 * here are the getter methods
					 */
					inline bool getReset() const { return reset; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tRESET(";
						os << "reset = " << reset;
						os << ")\n";
					}
					
				}; // end of parameter class RESETType
				
				/**
				 * Definition of Parameter SENSOR_OFFSET
				 */
				class SENSOR_OFFSETType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double azimuth;
					double elevation;
					double roll;
					double x;
					double y;
					double z;
					
				public:
					// default constructor
					SENSOR_OFFSETType() {
						azimuth = 0.0;
						elevation = 0.0;
						roll = 0.0;
						x = -140;
						y = -13;
						z = 1097;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getAzimuth() const { return azimuth; }
					inline double getElevation() const { return elevation; }
					inline double getRoll() const { return roll; }
					inline double getX() const { return x; }
					inline double getY() const { return y; }
					inline double getZ() const { return z; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSENSOR_OFFSET(";
						os << "azimuth = " << azimuth; os << ", ";
						os << "elevation = " << elevation; os << ", ";
						os << "roll = " << roll; os << ", ";
						os << "x = " << x; os << ", ";
						os << "y = " << y; os << ", ";
						os << "z = " << z;
						os << ")\n";
					}
					
				}; // end of parameter class SENSOR_OFFSETType
				
				/**
				 * Definition of Parameter SPEED_LIMIT_PAN
				 */
				class SPEED_LIMIT_PANType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double max;
					double min;
					
				public:
					// default constructor
					SPEED_LIMIT_PANType() {
						max = 2.604;
						min = 0.028;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getMax() const { return max; }
					inline double getMin() const { return min; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSPEED_LIMIT_PAN(";
						os << "max = " << max; os << ", ";
						os << "min = " << min;
						os << ")\n";
					}
					
				}; // end of parameter class SPEED_LIMIT_PANType
				
				/**
				 * Definition of Parameter SPEED_LIMIT_TILT
				 */
				class SPEED_LIMIT_TILTType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double max;
					double min;
					
				public:
					// default constructor
					SPEED_LIMIT_TILTType() {
						max = 2.604;
						min = 0.028;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getMax() const { return max; }
					inline double getMin() const { return min; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSPEED_LIMIT_TILT(";
						os << "max = " << max; os << ", ";
						os << "min = " << min;
						os << ")\n";
					}
					
				}; // end of parameter class SPEED_LIMIT_TILTType
				
				/**
				 * Definition of Parameter SPEED_PAN
				 */
				class SPEED_PANType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double speed;
					
				public:
					// default constructor
					SPEED_PANType() {
						speed = 1.0;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getSpeed() const { return speed; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSPEED_PAN(";
						os << "speed = " << speed;
						os << ")\n";
					}
					
				}; // end of parameter class SPEED_PANType
				
				/**
				 * Definition of Parameter SPEED_TILT
				 */
				class SPEED_TILTType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double speed;
					
				public:
					// default constructor
					SPEED_TILTType() {
						speed = 1.0;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getSpeed() const { return speed; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSPEED_TILT(";
						os << "speed = " << speed;
						os << ")\n";
					}
					
				}; // end of parameter class SPEED_TILTType
				
				/**
				 * Definition of Parameter START_UP_SPEED_PAN
				 */
				class START_UP_SPEED_PANType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double speed;
					
				public:
					// default constructor
					START_UP_SPEED_PANType() {
						speed = 0.2;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getSpeed() const { return speed; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSTART_UP_SPEED_PAN(";
						os << "speed = " << speed;
						os << ")\n";
					}
					
				}; // end of parameter class START_UP_SPEED_PANType
				
				/**
				 * Definition of Parameter START_UP_SPEED_TILT
				 */
				class START_UP_SPEED_TILTType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double speed;
					
				public:
					// default constructor
					START_UP_SPEED_TILTType() {
						speed = 0.2;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getSpeed() const { return speed; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSTART_UP_SPEED_TILT(";
						os << "speed = " << speed;
						os << ")\n";
					}
					
				}; // end of parameter class START_UP_SPEED_TILTType
				
				protected:
					/**
					 * internal members
					 */
					ACCELERATION_PANType ACCELERATION_PAN;
					ACCELERATION_TILTType ACCELERATION_TILT;
					RESETType RESET;
					SENSOR_OFFSETType SENSOR_OFFSET;
					SPEED_LIMIT_PANType SPEED_LIMIT_PAN;
					SPEED_LIMIT_TILTType SPEED_LIMIT_TILT;
					SPEED_PANType SPEED_PAN;
					SPEED_TILTType SPEED_TILT;
					START_UP_SPEED_PANType START_UP_SPEED_PAN;
					START_UP_SPEED_TILTType START_UP_SPEED_TILT;
					
				public:
					/**
					 * public getter methods
					 */
					inline ACCELERATION_PANType getACCELERATION_PAN() const { return ACCELERATION_PAN; }
					inline ACCELERATION_TILTType getACCELERATION_TILT() const { return ACCELERATION_TILT; }
					inline RESETType getRESET() const { return RESET; }
					inline SENSOR_OFFSETType getSENSOR_OFFSET() const { return SENSOR_OFFSET; }
					inline SPEED_LIMIT_PANType getSPEED_LIMIT_PAN() const { return SPEED_LIMIT_PAN; }
					inline SPEED_LIMIT_TILTType getSPEED_LIMIT_TILT() const { return SPEED_LIMIT_TILT; }
					inline SPEED_PANType getSPEED_PAN() const { return SPEED_PAN; }
					inline SPEED_TILTType getSPEED_TILT() const { return SPEED_TILT; }
					inline START_UP_SPEED_PANType getSTART_UP_SPEED_PAN() const { return START_UP_SPEED_PAN; }
					inline START_UP_SPEED_TILTType getSTART_UP_SPEED_TILT() const { return START_UP_SPEED_TILT; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "PTUParameter(\n";
						ACCELERATION_PAN.to_ostream(os);
						ACCELERATION_TILT.to_ostream(os);
						RESET.to_ostream(os);
						SENSOR_OFFSET.to_ostream(os);
						SPEED_LIMIT_PAN.to_ostream(os);
						SPEED_LIMIT_TILT.to_ostream(os);
						SPEED_PAN.to_ostream(os);
						SPEED_TILT.to_ostream(os);
						START_UP_SPEED_PAN.to_ostream(os);
						START_UP_SPEED_TILT.to_ostream(os);
						os << ")";
					}
			}; // end of parameter-set class PTUParameterType
			
			protected:
				/**
				 * internal members
				 */
				PTUParameterType PTUParameter;
			
			public:
				/**
				 * public getter methods
				 */
				inline PTUParameterType getPTUParameter() const { return PTUParameter; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "DomainPTU(\n";
					PTUParameter.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class DomainPTUType
	
protected:

	// Internal params
	BaseType Base;
	PTUType PTU;
	webotsType webots;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	DomainPTUType DomainPTU;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->DomainPTU = commit.getDomainPTU();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	BaseType getBase() const {
		return Base;
	}
	PTUType getPTU() const {
		return PTU;
	}
	webotsType getWebots() const {
		return webots;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	DomainPTUType getDomainPTU() const {
		return DomainPTU;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		Base.to_ostream(os);
		PTU.to_ostream(os);
		webots.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		DomainPTU.to_ostream(os);
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["Base"] = nlohmann::json {
			{"base_a" , getBase().getBase_a()},
			{"on_base" , getBase().getOn_base()},
			{"steer_a" , getBase().getSteer_a()},
			{"turret_a" , getBase().getTurret_a()},
			{"x" , getBase().getX()},
			{"y" , getBase().getY()},
			{"z" , getBase().getZ()}
		};
		param["PTU"] = nlohmann::json {
			{"azimuth" , getPTU().getAzimuth()},
			{"device" , getPTU().getDevice()},
			{"elevation" , getPTU().getElevation()},
			{"roll" , getPTU().getRoll()},
			{"verbose" , getPTU().getVerbose()},
			{"x" , getPTU().getX()},
			{"y" , getPTU().getY()},
			{"z" , getPTU().getZ()}
		};
		param["webots"] = nlohmann::json {
			{"robotName" , getWebots().getRobotName()}
		};
	
		param["PTUParameter"] = nlohmann::json {
			{ "ACCELERATION_PAN", {
				{"acc" , getDomainPTU().getPTUParameter().getACCELERATION_PAN().getAcc()}
			}},
			{ "ACCELERATION_TILT", {
				{"acc" , getDomainPTU().getPTUParameter().getACCELERATION_TILT().getAcc()}
			}},
			{ "RESET", {
				{"reset" , getDomainPTU().getPTUParameter().getRESET().getReset()}
			}},
			{ "SENSOR_OFFSET", {
				{"azimuth" , getDomainPTU().getPTUParameter().getSENSOR_OFFSET().getAzimuth()},
				{"elevation" , getDomainPTU().getPTUParameter().getSENSOR_OFFSET().getElevation()},
				{"roll" , getDomainPTU().getPTUParameter().getSENSOR_OFFSET().getRoll()},
				{"x" , getDomainPTU().getPTUParameter().getSENSOR_OFFSET().getX()},
				{"y" , getDomainPTU().getPTUParameter().getSENSOR_OFFSET().getY()},
				{"z" , getDomainPTU().getPTUParameter().getSENSOR_OFFSET().getZ()}
			}},
			{ "SPEED_LIMIT_PAN", {
				{"max" , getDomainPTU().getPTUParameter().getSPEED_LIMIT_PAN().getMax()},
				{"min" , getDomainPTU().getPTUParameter().getSPEED_LIMIT_PAN().getMin()}
			}},
			{ "SPEED_LIMIT_TILT", {
				{"max" , getDomainPTU().getPTUParameter().getSPEED_LIMIT_TILT().getMax()},
				{"min" , getDomainPTU().getPTUParameter().getSPEED_LIMIT_TILT().getMin()}
			}},
			{ "SPEED_PAN", {
				{"speed" , getDomainPTU().getPTUParameter().getSPEED_PAN().getSpeed()}
			}},
			{ "SPEED_TILT", {
				{"speed" , getDomainPTU().getPTUParameter().getSPEED_TILT().getSpeed()}
			}},
			{ "START_UP_SPEED_PAN", {
				{"speed" , getDomainPTU().getPTUParameter().getSTART_UP_SPEED_PAN().getSpeed()}
			}},
			{ "START_UP_SPEED_TILT", {
				{"speed" , getDomainPTU().getPTUParameter().getSTART_UP_SPEED_TILT().getSpeed()}
			}}
		};
		
		return param.dump();
	}
};

#endif
