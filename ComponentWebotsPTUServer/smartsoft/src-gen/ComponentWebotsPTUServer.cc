//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ComponentWebotsPTUServer.hh"
#include "smartTimedTaskTrigger.h"
//FIXME: implement logging
//#include "smartGlobalLogger.hh"

// the ace port-factory is used as a default port-mapping
#include "ComponentWebotsPTUServerAcePortFactory.hh"

#include "GoalEventServerEventTestHandler.hh"

// initialize static singleton pointer to zero
ComponentWebotsPTUServer* ComponentWebotsPTUServer::_componentWebotsPTUServer = 0;

// constructor
ComponentWebotsPTUServer::ComponentWebotsPTUServer()
{
	std::cout << "constructor of ComponentWebotsPTUServer\n";
	
	// set all pointer members to NULL
	baseStateTask = NULL;
	baseStateTaskTrigger = NULL;
	//coordinationPort = NULL;
	//coordinationPort = NULL;
	devicePoseStateTask = NULL;
	devicePoseStateTaskTrigger = NULL;
	movePTUQueryServiceAnswHandler = NULL;
	moveSendHandler = NULL;
	pTUStateQueryServiceAnswHandler = NULL;
	ptuTask = NULL;
	ptuTaskTrigger = NULL;
	webotsTask = NULL;
	webotsTaskTrigger = NULL;
	baseStateClient = NULL;
	baseStateClientInputTaskTrigger = NULL;
	baseStateClientUpcallManager = NULL;
	baseStateClientInputCollector = NULL;
	baseStateQueryClient = NULL;
	devicePoseStateServer = NULL;
	devicePoseStateServerWrapper = NULL;
	goalEventServer = NULL;
	goalEventServerWrapper = NULL;
	goalEventServerEventTestHandler = nullptr; 
	moveQueryServer = NULL;
	moveQueryServerInputTaskTrigger = NULL;
	moveSendServer = NULL;
	moveSendServerInputTaskTrigger = NULL;
	moveSendServerUpcallManager = NULL;
	moveSendServerInputCollector = NULL;
	stateQueryServer = NULL;
	stateQueryServerInputTaskTrigger = NULL;
	stateChangeHandler = NULL;
	stateSlave = NULL;
	wiringSlave = NULL;
	param = NULL;
	
	// set default ini parameter values
	connections.component.name = "ComponentWebotsPTUServer";
	connections.component.initialComponentMode = "Neutral";
	connections.component.defaultScheduler = "DEFAULT";
	connections.component.useLogger = false;
	
	connections.devicePoseStateServer.serviceName = "devicePoseStateServer";
	connections.devicePoseStateServer.roboticMiddleware = "ACE_SmartSoft";
	connections.goalEventServer.serviceName = "goalEventServer";
	connections.goalEventServer.roboticMiddleware = "ACE_SmartSoft";
	connections.moveQueryServer.serviceName = "moveQueryServer";
	connections.moveQueryServer.roboticMiddleware = "ACE_SmartSoft";
	connections.moveSendServer.serviceName = "moveSendServer";
	connections.moveSendServer.roboticMiddleware = "ACE_SmartSoft";
	connections.stateQueryServer.serviceName = "stateQueryServer";
	connections.stateQueryServer.roboticMiddleware = "ACE_SmartSoft";
	connections.baseStateClient.initialConnect = false;
	connections.baseStateClient.wiringName = "baseStateClient";
	connections.baseStateClient.serverName = "unknown";
	connections.baseStateClient.serviceName = "unknown";
	connections.baseStateClient.interval = 1;
	connections.baseStateClient.roboticMiddleware = "ACE_SmartSoft";
	connections.baseStateQueryClient.initialConnect = false;
	connections.baseStateQueryClient.wiringName = "baseStateQueryClient";
	connections.baseStateQueryClient.serverName = "unknown";
	connections.baseStateQueryClient.serviceName = "unknown";
	connections.baseStateQueryClient.interval = 1;
	connections.baseStateQueryClient.roboticMiddleware = "ACE_SmartSoft";
	connections.baseStateTask.minActFreq = 0.0;
	connections.baseStateTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.baseStateTask.scheduler = "DEFAULT";
	connections.baseStateTask.priority = -1;
	connections.baseStateTask.cpuAffinity = -1;
	connections.devicePoseStateTask.minActFreq = 0.0;
	connections.devicePoseStateTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.devicePoseStateTask.scheduler = "DEFAULT";
	connections.devicePoseStateTask.priority = -1;
	connections.devicePoseStateTask.cpuAffinity = -1;
	connections.ptuTask.minActFreq = 0.0;
	connections.ptuTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.ptuTask.scheduler = "DEFAULT";
	connections.ptuTask.priority = -1;
	connections.ptuTask.cpuAffinity = -1;
	connections.webotsTask.minActFreq = 0.0;
	connections.webotsTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.webotsTask.scheduler = "DEFAULT";
	connections.webotsTask.priority = -1;
	connections.webotsTask.cpuAffinity = -1;
	connections.moveSendHandler.prescale = 1;
	
}

void ComponentWebotsPTUServer::addPortFactory(const std::string &name, ComponentWebotsPTUServerPortFactoryInterface *portFactory)
{
	portFactoryRegistry[name] = portFactory;
}

void ComponentWebotsPTUServer::addExtension(ComponentWebotsPTUServerExtension *extension)
{
	componentExtensionRegistry[extension->getName()] = extension;
}

SmartACE::SmartComponent* ComponentWebotsPTUServer::getComponentImpl()
{
	return dynamic_cast<ComponentWebotsPTUServerAcePortFactory*>(portFactoryRegistry["ACE_SmartSoft"])->getComponentImpl();
}

/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void ComponentWebotsPTUServer::setStartupFinished() {
	stateSlave->setWaitState("Alive");
	std::cout << "ComponentDefinition initialization/startup finished." << std::endl;
}


Smart::StatusCode ComponentWebotsPTUServer::connectBaseStateClient(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.baseStateClient.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = baseStateClient->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->baseStateClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	baseStateClient->subscribe(connections.baseStateClient.interval);
	return status;
}
Smart::StatusCode ComponentWebotsPTUServer::connectBaseStateQueryClient(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.baseStateQueryClient.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = baseStateQueryClient->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->baseStateQueryClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}


/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
Smart::StatusCode ComponentWebotsPTUServer::connectAndStartAllServices() {
	Smart::StatusCode status = Smart::SMART_OK;
	
	status = connectBaseStateClient(connections.baseStateClient.serverName, connections.baseStateClient.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectBaseStateQueryClient(connections.baseStateQueryClient.serverName, connections.baseStateQueryClient.serviceName);
	if(status != Smart::SMART_OK) return status;
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void ComponentWebotsPTUServer::startAllTasks() {
	// start task BaseStateTask
	if(connections.baseStateTask.scheduler != "DEFAULT") {
		ACE_Sched_Params baseStateTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.baseStateTask.scheduler == "FIFO") {
			baseStateTask_SchedParams.policy(ACE_SCHED_FIFO);
			baseStateTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.baseStateTask.scheduler == "RR") {
			baseStateTask_SchedParams.policy(ACE_SCHED_RR);
			baseStateTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		baseStateTask->start(baseStateTask_SchedParams, connections.baseStateTask.cpuAffinity);
	} else {
		baseStateTask->start();
	}
	// start task DevicePoseStateTask
	if(connections.devicePoseStateTask.scheduler != "DEFAULT") {
		ACE_Sched_Params devicePoseStateTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.devicePoseStateTask.scheduler == "FIFO") {
			devicePoseStateTask_SchedParams.policy(ACE_SCHED_FIFO);
			devicePoseStateTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.devicePoseStateTask.scheduler == "RR") {
			devicePoseStateTask_SchedParams.policy(ACE_SCHED_RR);
			devicePoseStateTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		devicePoseStateTask->start(devicePoseStateTask_SchedParams, connections.devicePoseStateTask.cpuAffinity);
	} else {
		devicePoseStateTask->start();
	}
	// start task PtuTask
	if(connections.ptuTask.scheduler != "DEFAULT") {
		ACE_Sched_Params ptuTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.ptuTask.scheduler == "FIFO") {
			ptuTask_SchedParams.policy(ACE_SCHED_FIFO);
			ptuTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.ptuTask.scheduler == "RR") {
			ptuTask_SchedParams.policy(ACE_SCHED_RR);
			ptuTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		ptuTask->start(ptuTask_SchedParams, connections.ptuTask.cpuAffinity);
	} else {
		ptuTask->start();
	}
	// start task WebotsTask
	if(connections.webotsTask.scheduler != "DEFAULT") {
		ACE_Sched_Params webotsTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.webotsTask.scheduler == "FIFO") {
			webotsTask_SchedParams.policy(ACE_SCHED_FIFO);
			webotsTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.webotsTask.scheduler == "RR") {
			webotsTask_SchedParams.policy(ACE_SCHED_RR);
			webotsTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		webotsTask->start(webotsTask_SchedParams, connections.webotsTask.cpuAffinity);
	} else {
		webotsTask->start();
	}
}

/**
 * Start all timers contained in this component
 */
void ComponentWebotsPTUServer::startAllTimers() {
}


Smart::TaskTriggerSubject* ComponentWebotsPTUServer::getInputTaskTriggerFromString(const std::string &client)
{
	if(client == "baseStateClient") return baseStateClientInputTaskTrigger;
	if(client == "moveSendServer") return moveSendServerInputTaskTrigger;
	
	return NULL;
}


void ComponentWebotsPTUServer::init(int argc, char *argv[])
{
	try {
		Smart::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		// print out the actual parameters which are used to initialize the component
		std::cout << " \nComponentDefinition Initial-Parameters:\n" << COMP->getParameters() << std::endl;
		
		
		// initialize all registered port-factories
		for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
		{
			portFactory->second->initialize(this, argc, argv);
		}
		
		// initialize all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->initialize(this, argc, argv);
		}
		
		ComponentWebotsPTUServerPortFactoryInterface *acePortFactory = portFactoryRegistry["ACE_SmartSoft"];
		if(acePortFactory == 0) {
			std::cerr << "ERROR: acePortFactory NOT instantiated -> exit(-1)" << std::endl;
			exit(-1);
		}
		
		// this pointer is used for backwards compatibility (deprecated: should be removed as soon as all patterns, including coordination, are moved to port-factory)
		SmartACE::SmartComponent *component = dynamic_cast<ComponentWebotsPTUServerAcePortFactory*>(acePortFactory)->getComponentImpl();
		
		std::cout << "ComponentDefinition ComponentWebotsPTUServer is named " << connections.component.name << std::endl;
		
		if(connections.component.useLogger == true) {
			//FIXME: use logging
			//Smart::LOGGER->openLogFileInFolder("data/"+connections.component.name);
			//Smart::LOGGER->startLogging();
		}

		// create event-test handlers (if needed)
		goalEventServerEventTestHandler = std::make_shared<GoalEventServerEventTestHandler>();
		
		// create server ports
		// TODO: set minCycleTime from Ini-file
		devicePoseStateServer = portFactoryRegistry[connections.devicePoseStateServer.roboticMiddleware]->createDevicePoseStateServer(connections.devicePoseStateServer.serviceName);
		devicePoseStateServerWrapper = new DevicePoseStateServerWrapper(devicePoseStateServer);
		goalEventServerEventTestHandler = std::make_shared<GoalEventServerEventTestHandler>();
		goalEventServer = portFactoryRegistry[connections.goalEventServer.roboticMiddleware]->createGoalEventServer(connections.goalEventServer.serviceName, goalEventServerEventTestHandler);
		goalEventServerWrapper = new GoalEventServerWrapper(goalEventServer);
		moveQueryServer = portFactoryRegistry[connections.moveQueryServer.roboticMiddleware]->createMoveQueryServer(connections.moveQueryServer.serviceName);
		moveQueryServerInputTaskTrigger = new Smart::QueryServerTaskTrigger<DomainPTU::CommPTUMoveRequest, DomainPTU::CommPTUMoveResponse>(moveQueryServer);
		moveSendServer = portFactoryRegistry[connections.moveSendServer.roboticMiddleware]->createMoveSendServer(connections.moveSendServer.serviceName);
		stateQueryServer = portFactoryRegistry[connections.stateQueryServer.roboticMiddleware]->createStateQueryServer(connections.stateQueryServer.serviceName);
		stateQueryServerInputTaskTrigger = new Smart::QueryServerTaskTrigger<CommBasicObjects::CommVoid, DomainPTU::CommMobilePTUState>(stateQueryServer);
		
		// create client ports
		baseStateClient = portFactoryRegistry[connections.baseStateClient.roboticMiddleware]->createBaseStateClient();
		baseStateQueryClient = portFactoryRegistry[connections.baseStateQueryClient.roboticMiddleware]->createBaseStateQueryClient();
		
		// create InputTaskTriggers and UpcallManagers
		baseStateClientInputCollector = new BaseStateClientInputCollector(baseStateClient);
		baseStateClientInputTaskTrigger = new Smart::InputTaskTrigger<CommBasicObjects::CommBaseState>(baseStateClientInputCollector);
		baseStateClientUpcallManager = new BaseStateClientUpcallManager(baseStateClientInputCollector);
		moveSendServerInputCollector = new MoveSendServerInputCollector(moveSendServer);
		moveSendServerInputTaskTrigger = new Smart::InputTaskTrigger<DomainPTU::CommPTUMoveRequest>(moveSendServerInputCollector);
		moveSendServerUpcallManager = new MoveSendServerUpcallManager(moveSendServerInputCollector);
		
		// create input-handler
		moveSendHandler = new MoveSendHandler(moveSendServer, connections.moveSendHandler.prescale);
		
		// create request-handlers
		movePTUQueryServiceAnswHandler = new MovePTUQueryServiceAnswHandler(moveQueryServer);
		pTUStateQueryServiceAnswHandler = new PTUStateQueryServiceAnswHandler(stateQueryServer);
		
		// create state pattern
		stateChangeHandler = new SmartStateChangeHandler();
		stateSlave = new SmartACE::StateSlave(component, stateChangeHandler);
		if (stateSlave->defineStates("Move" ,"move") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion Move.move" << std::endl;
		if (stateSlave->defineStates("Servo" ,"servo") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion Servo.servo" << std::endl;
		status = stateSlave->setUpInitialState(connections.component.initialComponentMode);
		if (status != Smart::SMART_OK) std::cerr << status << "; failed setting initial ComponentMode: " << connections.component.initialComponentMode << std::endl;
		// activate state slave
		status = stateSlave->activate();
		if(status != Smart::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		wiringSlave = new SmartACE::WiringSlave(component);
		// add client port to wiring slave
		if(connections.baseStateClient.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<CommBasicObjects::CommBaseState>*>(baseStateClient)->add(wiringSlave, connections.baseStateClient.wiringName);
		}
		if(connections.baseStateQueryClient.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommBasicObjects::CommVoid, CommBasicObjects::CommBaseState>*>(baseStateQueryClient)->add(wiringSlave, connections.baseStateQueryClient.wiringName);
		}
		
		// create parameter slave
		param = new SmartACE::ParameterSlave(component, &paramHandler);
		
		
		// create Task BaseStateTask
		baseStateTask = new BaseStateTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.baseStateTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.baseStateTask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(baseStateTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				baseStateTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task BaseStateTask" << std::endl;
			}
		} else if(connections.baseStateTask.trigger == "DataTriggered") {
			baseStateTaskTrigger = getInputTaskTriggerFromString(connections.baseStateTask.inPortRef);
			if(baseStateTaskTrigger != NULL) {
				baseStateTaskTrigger->attach(baseStateTask, connections.baseStateTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.baseStateTask.inPortRef << " as activation source for Task BaseStateTask" << std::endl;
			}
		} 
		
		// create Task DevicePoseStateTask
		devicePoseStateTask = new DevicePoseStateTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.devicePoseStateTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.devicePoseStateTask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(devicePoseStateTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				devicePoseStateTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task DevicePoseStateTask" << std::endl;
			}
		} else if(connections.devicePoseStateTask.trigger == "DataTriggered") {
			devicePoseStateTaskTrigger = getInputTaskTriggerFromString(connections.devicePoseStateTask.inPortRef);
			if(devicePoseStateTaskTrigger != NULL) {
				devicePoseStateTaskTrigger->attach(devicePoseStateTask, connections.devicePoseStateTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.devicePoseStateTask.inPortRef << " as activation source for Task DevicePoseStateTask" << std::endl;
			}
		} 
		
		// create Task PtuTask
		ptuTask = new PtuTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.ptuTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.ptuTask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(ptuTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				ptuTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task PtuTask" << std::endl;
			}
		} else if(connections.ptuTask.trigger == "DataTriggered") {
			ptuTaskTrigger = getInputTaskTriggerFromString(connections.ptuTask.inPortRef);
			if(ptuTaskTrigger != NULL) {
				ptuTaskTrigger->attach(ptuTask, connections.ptuTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.ptuTask.inPortRef << " as activation source for Task PtuTask" << std::endl;
			}
		} 
		
		// create Task WebotsTask
		webotsTask = new WebotsTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.webotsTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.webotsTask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(webotsTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				webotsTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task WebotsTask" << std::endl;
			}
		} else if(connections.webotsTask.trigger == "DataTriggered") {
			webotsTaskTrigger = getInputTaskTriggerFromString(connections.webotsTask.inPortRef);
			if(webotsTaskTrigger != NULL) {
				webotsTaskTrigger->attach(webotsTask, connections.webotsTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.webotsTask.inPortRef << " as activation source for Task WebotsTask" << std::endl;
			}
		} 
		
		
		// link observers with subjects
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void ComponentWebotsPTUServer::run()
{
	stateSlave->acquire("init");
	// startup all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onStartup();
	}
	
	// startup all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onStartup();
	}
	stateSlave->release("init");
	
	// do not call this handler within the init state (see above) as this handler internally calls setStartupFinished() (this should be fixed in future)
	compHandler.onStartup();
	
	// this call blocks until the component is commanded to shutdown
	stateSlave->acquire("shutdown");
	
	// shutdown all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onShutdown();
	}
	
	// shutdown all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onShutdown();
	}
	
	if(connections.component.useLogger == true) {
		//FIXME: use logging
		//Smart::LOGGER->stopLogging();
	}
	
	compHandler.onShutdown();
	
	stateSlave->release("shutdown");
}

// clean-up component's resources
void ComponentWebotsPTUServer::fini()
{
	// unlink all observers
	
	// destroy all task instances
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(baseStateTaskTrigger != NULL){
		baseStateTaskTrigger->detach(baseStateTask);
		delete baseStateTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(devicePoseStateTaskTrigger != NULL){
		devicePoseStateTaskTrigger->detach(devicePoseStateTask);
		delete devicePoseStateTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(ptuTaskTrigger != NULL){
		ptuTaskTrigger->detach(ptuTask);
		delete ptuTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(webotsTaskTrigger != NULL){
		webotsTaskTrigger->detach(webotsTask);
		delete webotsTask;
	}

	// destroy all input-handler
	delete moveSendHandler;

	// destroy InputTaskTriggers and UpcallManagers
	delete baseStateClientInputTaskTrigger;
	delete baseStateClientUpcallManager;
	delete baseStateClientInputCollector;
	delete moveSendServerInputTaskTrigger;
	delete moveSendServerUpcallManager;
	delete moveSendServerInputCollector;

	// destroy client ports
	delete baseStateClient;
	delete baseStateQueryClient;

	// destroy server ports
	delete devicePoseStateServerWrapper;
	delete devicePoseStateServer;
	delete goalEventServerWrapper;
	delete goalEventServer;
	delete moveQueryServer;
	delete moveQueryServerInputTaskTrigger;
	delete moveSendServer;
	delete stateQueryServer;
	delete stateQueryServerInputTaskTrigger;
	// destroy event-test handlers (if needed)
	goalEventServerEventTestHandler;
	
	// destroy request-handlers
	delete movePTUQueryServiceAnswHandler;
	delete pTUStateQueryServiceAnswHandler;
	
	delete stateSlave;
	// destroy state-change-handler
	delete stateChangeHandler;
	
	// destroy all master/slave ports
	delete wiringSlave;
	delete param;
	

	// destroy all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->destroy();
	}

	// destroy all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->destroy();
	}
	
}

void ComponentWebotsPTUServer::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	SmartACE::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("ComponentWebotsPTUServer.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load ComponentWebotsPTUServer.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: ComponentWebotsPTUServer.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		SmartACE::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(SmartACE::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(SmartACE::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		parameter.getString("component", "initialComponentMode", connections.component.initialComponentMode);
		if(parameter.checkIfParameterExists("component", "defaultScheduler")) {
			parameter.getString("component", "defaultScheduler", connections.component.defaultScheduler);
		}
		if(parameter.checkIfParameterExists("component", "useLogger")) {
			parameter.getBoolean("component", "useLogger", connections.component.useLogger);
		}
		
		// load parameters for client baseStateClient
		parameter.getBoolean("baseStateClient", "initialConnect", connections.baseStateClient.initialConnect);
		parameter.getString("baseStateClient", "serviceName", connections.baseStateClient.serviceName);
		parameter.getString("baseStateClient", "serverName", connections.baseStateClient.serverName);
		parameter.getString("baseStateClient", "wiringName", connections.baseStateClient.wiringName);
		parameter.getInteger("baseStateClient", "interval", connections.baseStateClient.interval);
		if(parameter.checkIfParameterExists("baseStateClient", "roboticMiddleware")) {
			parameter.getString("baseStateClient", "roboticMiddleware", connections.baseStateClient.roboticMiddleware);
		}
		// load parameters for client baseStateQueryClient
		parameter.getBoolean("baseStateQueryClient", "initialConnect", connections.baseStateQueryClient.initialConnect);
		parameter.getString("baseStateQueryClient", "serviceName", connections.baseStateQueryClient.serviceName);
		parameter.getString("baseStateQueryClient", "serverName", connections.baseStateQueryClient.serverName);
		parameter.getString("baseStateQueryClient", "wiringName", connections.baseStateQueryClient.wiringName);
		if(parameter.checkIfParameterExists("baseStateQueryClient", "roboticMiddleware")) {
			parameter.getString("baseStateQueryClient", "roboticMiddleware", connections.baseStateQueryClient.roboticMiddleware);
		}
		
		// load parameters for server devicePoseStateServer
		parameter.getString("devicePoseStateServer", "serviceName", connections.devicePoseStateServer.serviceName);
		if(parameter.checkIfParameterExists("devicePoseStateServer", "roboticMiddleware")) {
			parameter.getString("devicePoseStateServer", "roboticMiddleware", connections.devicePoseStateServer.roboticMiddleware);
		}
		// load parameters for server goalEventServer
		parameter.getString("goalEventServer", "serviceName", connections.goalEventServer.serviceName);
		if(parameter.checkIfParameterExists("goalEventServer", "roboticMiddleware")) {
			parameter.getString("goalEventServer", "roboticMiddleware", connections.goalEventServer.roboticMiddleware);
		}
		// load parameters for server moveQueryServer
		parameter.getString("moveQueryServer", "serviceName", connections.moveQueryServer.serviceName);
		if(parameter.checkIfParameterExists("moveQueryServer", "roboticMiddleware")) {
			parameter.getString("moveQueryServer", "roboticMiddleware", connections.moveQueryServer.roboticMiddleware);
		}
		// load parameters for server moveSendServer
		parameter.getString("moveSendServer", "serviceName", connections.moveSendServer.serviceName);
		if(parameter.checkIfParameterExists("moveSendServer", "roboticMiddleware")) {
			parameter.getString("moveSendServer", "roboticMiddleware", connections.moveSendServer.roboticMiddleware);
		}
		// load parameters for server stateQueryServer
		parameter.getString("stateQueryServer", "serviceName", connections.stateQueryServer.serviceName);
		if(parameter.checkIfParameterExists("stateQueryServer", "roboticMiddleware")) {
			parameter.getString("stateQueryServer", "roboticMiddleware", connections.stateQueryServer.roboticMiddleware);
		}
		
		// load parameters for task BaseStateTask
		parameter.getDouble("BaseStateTask", "minActFreqHz", connections.baseStateTask.minActFreq);
		parameter.getDouble("BaseStateTask", "maxActFreqHz", connections.baseStateTask.maxActFreq);
		parameter.getString("BaseStateTask", "triggerType", connections.baseStateTask.trigger);
		if(connections.baseStateTask.trigger == "PeriodicTimer") {
			parameter.getDouble("BaseStateTask", "periodicActFreqHz", connections.baseStateTask.periodicActFreq);
		} else if(connections.baseStateTask.trigger == "DataTriggered") {
			parameter.getString("BaseStateTask", "inPortRef", connections.baseStateTask.inPortRef);
			parameter.getInteger("BaseStateTask", "prescale", connections.baseStateTask.prescale);
		}
		if(parameter.checkIfParameterExists("BaseStateTask", "scheduler")) {
			parameter.getString("BaseStateTask", "scheduler", connections.baseStateTask.scheduler);
		}
		if(parameter.checkIfParameterExists("BaseStateTask", "priority")) {
			parameter.getInteger("BaseStateTask", "priority", connections.baseStateTask.priority);
		}
		if(parameter.checkIfParameterExists("BaseStateTask", "cpuAffinity")) {
			parameter.getInteger("BaseStateTask", "cpuAffinity", connections.baseStateTask.cpuAffinity);
		}
		// load parameters for task DevicePoseStateTask
		parameter.getDouble("DevicePoseStateTask", "minActFreqHz", connections.devicePoseStateTask.minActFreq);
		parameter.getDouble("DevicePoseStateTask", "maxActFreqHz", connections.devicePoseStateTask.maxActFreq);
		parameter.getString("DevicePoseStateTask", "triggerType", connections.devicePoseStateTask.trigger);
		if(connections.devicePoseStateTask.trigger == "PeriodicTimer") {
			parameter.getDouble("DevicePoseStateTask", "periodicActFreqHz", connections.devicePoseStateTask.periodicActFreq);
		} else if(connections.devicePoseStateTask.trigger == "DataTriggered") {
			parameter.getString("DevicePoseStateTask", "inPortRef", connections.devicePoseStateTask.inPortRef);
			parameter.getInteger("DevicePoseStateTask", "prescale", connections.devicePoseStateTask.prescale);
		}
		if(parameter.checkIfParameterExists("DevicePoseStateTask", "scheduler")) {
			parameter.getString("DevicePoseStateTask", "scheduler", connections.devicePoseStateTask.scheduler);
		}
		if(parameter.checkIfParameterExists("DevicePoseStateTask", "priority")) {
			parameter.getInteger("DevicePoseStateTask", "priority", connections.devicePoseStateTask.priority);
		}
		if(parameter.checkIfParameterExists("DevicePoseStateTask", "cpuAffinity")) {
			parameter.getInteger("DevicePoseStateTask", "cpuAffinity", connections.devicePoseStateTask.cpuAffinity);
		}
		// load parameters for task PtuTask
		parameter.getDouble("PtuTask", "minActFreqHz", connections.ptuTask.minActFreq);
		parameter.getDouble("PtuTask", "maxActFreqHz", connections.ptuTask.maxActFreq);
		parameter.getString("PtuTask", "triggerType", connections.ptuTask.trigger);
		if(connections.ptuTask.trigger == "PeriodicTimer") {
			parameter.getDouble("PtuTask", "periodicActFreqHz", connections.ptuTask.periodicActFreq);
		} else if(connections.ptuTask.trigger == "DataTriggered") {
			parameter.getString("PtuTask", "inPortRef", connections.ptuTask.inPortRef);
			parameter.getInteger("PtuTask", "prescale", connections.ptuTask.prescale);
		}
		if(parameter.checkIfParameterExists("PtuTask", "scheduler")) {
			parameter.getString("PtuTask", "scheduler", connections.ptuTask.scheduler);
		}
		if(parameter.checkIfParameterExists("PtuTask", "priority")) {
			parameter.getInteger("PtuTask", "priority", connections.ptuTask.priority);
		}
		if(parameter.checkIfParameterExists("PtuTask", "cpuAffinity")) {
			parameter.getInteger("PtuTask", "cpuAffinity", connections.ptuTask.cpuAffinity);
		}
		// load parameters for task WebotsTask
		parameter.getDouble("WebotsTask", "minActFreqHz", connections.webotsTask.minActFreq);
		parameter.getDouble("WebotsTask", "maxActFreqHz", connections.webotsTask.maxActFreq);
		parameter.getString("WebotsTask", "triggerType", connections.webotsTask.trigger);
		if(connections.webotsTask.trigger == "PeriodicTimer") {
			parameter.getDouble("WebotsTask", "periodicActFreqHz", connections.webotsTask.periodicActFreq);
		} else if(connections.webotsTask.trigger == "DataTriggered") {
			parameter.getString("WebotsTask", "inPortRef", connections.webotsTask.inPortRef);
			parameter.getInteger("WebotsTask", "prescale", connections.webotsTask.prescale);
		}
		if(parameter.checkIfParameterExists("WebotsTask", "scheduler")) {
			parameter.getString("WebotsTask", "scheduler", connections.webotsTask.scheduler);
		}
		if(parameter.checkIfParameterExists("WebotsTask", "priority")) {
			parameter.getInteger("WebotsTask", "priority", connections.webotsTask.priority);
		}
		if(parameter.checkIfParameterExists("WebotsTask", "cpuAffinity")) {
			parameter.getInteger("WebotsTask", "cpuAffinity", connections.webotsTask.cpuAffinity);
		}
		if(parameter.checkIfParameterExists("MoveSendHandler", "prescale")) {
			parameter.getInteger("MoveSendHandler", "prescale", connections.moveSendHandler.prescale);
		}
		
		
		// load parameters for all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->loadParameters(parameter);
		}
		
		paramHandler.loadParameter(parameter);
	
	} catch (const SmartACE::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
