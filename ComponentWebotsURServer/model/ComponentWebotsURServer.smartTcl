(define-tcb (moveLinear ?goal ?speed ?acc)
  (module "manipulatorModule")
   (action (
     (format t "=========================>>> moveLinear~%")

     (tcl-activate-event :name 'evt-urgoal 
                         :handler 'handler-ur 
                         :server 'ur 
                         :service 'manipulatorevent
                         :mode 'continuous)

     (tcl-param :server 'ur :slot 'COMMMANIPULATOROBJECTS.MANIPULATORPARAMETER.MOVE_LINEAR
                            :value (append '?goal (list ?acc) (list ?speed)))
     (tcl-param :server 'ur :slot 'COMMIT)
     '(SUCCESS ()))))


(define-tcb (moveCirular ?via ?goal ?speed ?acc)
  (module "manipulatorModule")
   (action (
     (format t "=========================>>> moveLinear~%")

     (tcl-activate-event :name 'evt-urgoal 
                         :handler 'handler-ur 
                         :server 'ur 
                         :service 'manipulatorevent
                         :mode 'continuous)

;     (tcl-param :server 'ur :slot 'COMMMANIPULATOROBJECTS.MANIPULATORPARAMETER.MOVE_LINEAR
;                            :value (append '?goal (list ?acc) (list ?speed)))
     (tcl-param :server 'ur :slot 'COMMIT)
     '(SUCCESS ()))))

 

(define-tcb (movePath ?pathID ?overwriteSpeed ?speed ?acc)
  (module "manipulatorModule")
   (action (
     (format t "=========================>>> movePath~%")
     (tcl-activate-event :name 'evt-urgoal 
                         :handler 'handler-ur 
                         :server 'ur 
                         :service 'manipulatorevent
                         :mode 'continuous)

     (tcl-param :server 'ur :slot 'COMMMANIPULATOROBJECTS.MANIPULATORPARAMETER.MOVE_PATH
                            :value (append (list ?pathID) (list ?overwriteSpeed) (list ?acc) (list ?speed)))
     (tcl-param :server 'ur :slot 'COMMIT)
     '(SUCCESS ()))))



(define-tcb (executeProgram ?name)
  (module "manipulatorModule")
   (action (
     (format t "=========================>>> executeProgram ~s ~%" ?name)
     (tcl-activate-event :name 'evt-urgoal
                         :handler 'handler-ur 
                         :server 'ur 
                         :service 'manipulatorevent
                         :mode 'continuous)

     (tcl-param :server 'ur :slot 'COMMMANIPULATOROBJECTS.MANIPULATORPARAMETER.LOAD_PROGRAM :value ?name)
     (sleep 2)
     (tcl-param :server 'ur :slot 'COMMMANIPULATOROBJECTS.MANIPULATORPARAMETER.START_PROGRAM)
     (tcl-param :server 'ur :slot 'COMMIT)
     '(SUCCESS ()))))

; (execute '(manipulator.executeProgram "/programs/test.urp"))



(define-tcb (getExecProgramByNum ?num)
  (module "manipulatorModule")
   (action (
     (format t "=========================>>> getExecProgramByNum ~s ~%" ?num)
     (let ((progs nil)
           (prognum ?num))
       (setf progs (second (tcl-query :server 'ur :service 'manipulatorprograms)))
       (tcl-push-plan :plan `((executeProgram ,(nth prognum progs))))
     '(SUCCESS ())))))

(define-tcb (getAllPrograms)
  (module "manipulatorModule")
   (action (
     (format t "=========================>>> getAllPrograms ~%")
     (let ((progs nil))
       (setf progs (tcl-query :server 'ur :service 'manipulatorprograms))
       (format t "~%========================================================== ~%")
       (format t "UR Saved Programs: ~%")
       (loop for x in (second progs)
             for i from 0
        do (format t "Prog. [~s]   :~s~%" i x))
	(format t "========================================================== ~%")
       '(SUCCESS ())))))

; (execute '(manipulator.getAllPrograms))



;; handler-goal-reached
(define-event-handler (handler-ur)
  (action (
    (format t "=========================>>> UR HANDLER ~%")
    (cond 
      ((equal (tcl-event-message) "(GOAL REACHED)")
        (format t "====>>> GOAL REACHED !!! ~%")
        (tcl-abort)
        '(SUCCESS ()))
      (T
        (format t "====>>> Other Event: ~s~%" (tcl-event-message)))))))



(define-tcb (setPartCoordinateSystem ?pcs)
  (module "manipulatorModule")
  (action (
    (format t "=========================>>> setPartCoordinateSystem ~s ~%" '?pcs)
    (tcl-param :server 'ur :slot 'COMMMANIPULATOROBJECTS.MANIPULATORPARAMETER.SET_PCS :value '?pcs))))
    

(define-tcb (setToolCenterPoint ?tcp)
  (module "manipulatorModule")
  (action (
    (format t "=========================>>> setToolCenterPoint ~s ~%" '?tcp)
    (tcl-param :server 'ur :slot 'COMMMANIPULATOROBJECTS.MANIPULATORPARAMETER.SET_TCP :value '?tcp))))

;(define-tcb (tcb-moveLinear)
;  (module "manipulatorModule")
;   (action (
;     (format t "=========================>>> tcb-moveLinear~%")
;     (tcl-param :server 'ur :slot 'COMMMANIPULATOROBJECTS.MANIPULATORPARAMETER.MOVE_LINEAR :value '(0.2 0.0 0.0 0.0 0.0 0.0 0.25 0.025))
;     (tcl-param :server 'ur :slot 'COMMIT)
;     '(SUCCESS ()))))


; (execute '(MANIPULATOR.TCB-MOVELINEAR))


; (execute '(MANIPULATOR.TCB-MOVELINEAR '(1 2 3 4 5 6) 0.025 0.25))

;  (execute '(MANIPULATOR.tcb-moveLinear (0.1 0.2 -0.05 3.0 0 -0.9) 0.025 0.25))

;  (execute '(MANIPULATOR.tcb-moveLinear (0.1 0.2 -0.05 0.0 0 0.0) 0.025 0.25))

; (execute '(manipulator.setPartCoordinateSystem (0.6 0 0 3.142 0 0)))

;,
;    {
;      "id": 2,
;      "type": "line",
;      "speed": 0.025,
;      "acc": 0.25,
;      "start": {
;        "x": 0.1,
;        "y": 0,
;        "z": 0,
;        "rx": 0,
;        "ry": 0,
;        "rz": 0
;      },
;      "end": {
;        "x": 0.1,
;        "y": 0.2,
;        "z": 0,
;        "rx": 0,
;        "ry": 0,
;        "rz": 0
;      }
;    }
