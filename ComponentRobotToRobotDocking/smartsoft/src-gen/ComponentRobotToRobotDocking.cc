//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ComponentRobotToRobotDocking.hh"
#include "smartTimedTaskTrigger.h"
//FIXME: implement logging
//#include "smartGlobalLogger.hh"

// the ace port-factory is used as a default port-mapping
#include "ComponentRobotToRobotDockingAcePortFactory.hh"

#include "DockingEventServerEventTestHandler.hh"

// initialize static singleton pointer to zero
ComponentRobotToRobotDocking* ComponentRobotToRobotDocking::_componentRobotToRobotDocking = 0;

// constructor
ComponentRobotToRobotDocking::ComponentRobotToRobotDocking()
{
	std::cout << "constructor of ComponentRobotToRobotDocking\n";
	
	// set all pointer members to NULL
	//componentRobotToRobotDocking = NULL;
	//coordinationPort = NULL;
	laserDockingTask = NULL;
	laserDockingTaskTrigger = NULL;
	undockingTask = NULL;
	undockingTaskTrigger = NULL;
	visTask = NULL;
	visTaskTrigger = NULL;
	baseStatePushClient = NULL;
	baseStatePushClientInputTaskTrigger = NULL;
	baseStatePushClientUpcallManager = NULL;
	baseStatePushClientInputCollector = NULL;
	dockingEventServer = NULL;
	dockingEventServerWrapper = NULL;
	dockingEventServerEventTestHandler = nullptr; 
	laserClient = NULL;
	laserClientInputTaskTrigger = NULL;
	laserClientUpcallManager = NULL;
	laserClientInputCollector = NULL;
	navVelSendClient = NULL;
	navVelSendClientWrapper = NULL;
	stateChangeHandler = NULL;
	stateActivityManager = NULL;
	stateSlave = NULL;
	wiringSlave = NULL;
	param = NULL;
	
	// set default ini parameter values
	connections.component.name = "ComponentRobotToRobotDocking";
	connections.component.initialComponentMode = "Neutral";
	connections.component.defaultScheduler = "DEFAULT";
	connections.component.useLogger = false;
	
	connections.dockingEventServer.serviceName = "dockingEventServer";
	connections.dockingEventServer.roboticMiddleware = "ACE_SmartSoft";
	connections.baseStatePushClient.initialConnect = false;
	connections.baseStatePushClient.wiringName = "baseStatePushClient";
	connections.baseStatePushClient.serverName = "unknown";
	connections.baseStatePushClient.serviceName = "unknown";
	connections.baseStatePushClient.interval = 1;
	connections.baseStatePushClient.roboticMiddleware = "ACE_SmartSoft";
	connections.laserClient.initialConnect = false;
	connections.laserClient.wiringName = "laserClient";
	connections.laserClient.serverName = "unknown";
	connections.laserClient.serviceName = "unknown";
	connections.laserClient.interval = 1;
	connections.laserClient.roboticMiddleware = "ACE_SmartSoft";
	connections.navVelSendClient.initialConnect = false;
	connections.navVelSendClient.wiringName = "navVelSendClient";
	connections.navVelSendClient.serverName = "unknown";
	connections.navVelSendClient.serviceName = "unknown";
	connections.navVelSendClient.interval = 1;
	connections.navVelSendClient.roboticMiddleware = "ACE_SmartSoft";
	connections.laserDockingTask.minActFreq = 0.0;
	connections.laserDockingTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.laserDockingTask.scheduler = "DEFAULT";
	connections.laserDockingTask.priority = -1;
	connections.laserDockingTask.cpuAffinity = -1;
	connections.undockingTask.minActFreq = 0.0;
	connections.undockingTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.undockingTask.scheduler = "DEFAULT";
	connections.undockingTask.priority = -1;
	connections.undockingTask.cpuAffinity = -1;
	connections.visTask.minActFreq = 0.0;
	connections.visTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.visTask.scheduler = "DEFAULT";
	connections.visTask.priority = -1;
	connections.visTask.cpuAffinity = -1;
	
}

void ComponentRobotToRobotDocking::addPortFactory(const std::string &name, ComponentRobotToRobotDockingPortFactoryInterface *portFactory)
{
	portFactoryRegistry[name] = portFactory;
}

void ComponentRobotToRobotDocking::addExtension(ComponentRobotToRobotDockingExtension *extension)
{
	componentExtensionRegistry[extension->getName()] = extension;
}

SmartACE::SmartComponent* ComponentRobotToRobotDocking::getComponentImpl()
{
	return dynamic_cast<ComponentRobotToRobotDockingAcePortFactory*>(portFactoryRegistry["ACE_SmartSoft"])->getComponentImpl();
}

/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void ComponentRobotToRobotDocking::setStartupFinished() {
	stateSlave->setWaitState("Alive");
	std::cout << "ComponentDefinition initialization/startup finished." << std::endl;
}


Smart::StatusCode ComponentRobotToRobotDocking::connectBaseStatePushClient(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.baseStatePushClient.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = baseStatePushClient->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->baseStatePushClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	baseStatePushClient->subscribe(connections.baseStatePushClient.interval);
	return status;
}
Smart::StatusCode ComponentRobotToRobotDocking::connectLaserClient(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.laserClient.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = laserClient->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->laserClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	laserClient->subscribe(connections.laserClient.interval);
	return status;
}
Smart::StatusCode ComponentRobotToRobotDocking::connectNavVelSendClient(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.navVelSendClient.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = navVelSendClient->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->navVelSendClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}


/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
Smart::StatusCode ComponentRobotToRobotDocking::connectAndStartAllServices() {
	Smart::StatusCode status = Smart::SMART_OK;
	
	status = connectBaseStatePushClient(connections.baseStatePushClient.serverName, connections.baseStatePushClient.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectLaserClient(connections.laserClient.serverName, connections.laserClient.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectNavVelSendClient(connections.navVelSendClient.serverName, connections.navVelSendClient.serviceName);
	if(status != Smart::SMART_OK) return status;
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void ComponentRobotToRobotDocking::startAllTasks() {
	// start task LaserDockingTask
	if(connections.laserDockingTask.scheduler != "DEFAULT") {
		ACE_Sched_Params laserDockingTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.laserDockingTask.scheduler == "FIFO") {
			laserDockingTask_SchedParams.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				laserDockingTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				laserDockingTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(connections.laserDockingTask.scheduler == "RR") {
			laserDockingTask_SchedParams.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				laserDockingTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				laserDockingTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		laserDockingTask->start(laserDockingTask_SchedParams, connections.laserDockingTask.cpuAffinity);
	} else {
		laserDockingTask->start();
	}
	// start task UndockingTask
	if(connections.undockingTask.scheduler != "DEFAULT") {
		ACE_Sched_Params undockingTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.undockingTask.scheduler == "FIFO") {
			undockingTask_SchedParams.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				undockingTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				undockingTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(connections.undockingTask.scheduler == "RR") {
			undockingTask_SchedParams.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				undockingTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				undockingTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		undockingTask->start(undockingTask_SchedParams, connections.undockingTask.cpuAffinity);
	} else {
		undockingTask->start();
	}
	// start task VisTask
	if(connections.visTask.scheduler != "DEFAULT") {
		ACE_Sched_Params visTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.visTask.scheduler == "FIFO") {
			visTask_SchedParams.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				visTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				visTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(connections.visTask.scheduler == "RR") {
			visTask_SchedParams.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				visTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				visTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		visTask->start(visTask_SchedParams, connections.visTask.cpuAffinity);
	} else {
		visTask->start();
	}
}

/**
 * Start all timers contained in this component
 */
void ComponentRobotToRobotDocking::startAllTimers() {
}


Smart::TaskTriggerSubject* ComponentRobotToRobotDocking::getInputTaskTriggerFromString(const std::string &client)
{
	if(client == "baseStatePushClient") return baseStatePushClientInputTaskTrigger;
	if(client == "laserClient") return laserClientInputTaskTrigger;
	
	return NULL;
}


void ComponentRobotToRobotDocking::init(int argc, char *argv[])
{
	try {
		Smart::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		// print out the actual parameters which are used to initialize the component
		std::cout << " \nComponentDefinition Initial-Parameters:\n" << COMP->getParameters() << std::endl;
		
		
		// initialize all registered port-factories
		for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
		{
			portFactory->second->initialize(this, argc, argv);
		}
		
		// initialize all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->initialize(this, argc, argv);
		}
		
		ComponentRobotToRobotDockingPortFactoryInterface *acePortFactory = portFactoryRegistry["ACE_SmartSoft"];
		if(acePortFactory == 0) {
			std::cerr << "ERROR: acePortFactory NOT instantiated -> exit(-1)" << std::endl;
			exit(-1);
		}
		
		// this pointer is used for backwards compatibility (deprecated: should be removed as soon as all patterns, including coordination, are moved to port-factory)
		SmartACE::SmartComponent *component = dynamic_cast<ComponentRobotToRobotDockingAcePortFactory*>(acePortFactory)->getComponentImpl();
		
		std::cout << "ComponentDefinition ComponentRobotToRobotDocking is named " << connections.component.name << std::endl;
		
		if(connections.component.useLogger == true) {
			//FIXME: use logging
			//Smart::LOGGER->openLogFileInFolder("data/"+connections.component.name);
			//Smart::LOGGER->startLogging();
		}

		// create event-test handlers (if needed)
		dockingEventServerEventTestHandler = std::make_shared<DockingEventServerEventTestHandler>();
		
		// create server ports
		// TODO: set minCycleTime from Ini-file
		dockingEventServerEventTestHandler = std::make_shared<DockingEventServerEventTestHandler>();
		dockingEventServer = portFactoryRegistry[connections.dockingEventServer.roboticMiddleware]->createDockingEventServer(connections.dockingEventServer.serviceName, dockingEventServerEventTestHandler);
		dockingEventServerWrapper = new DockingEventServerWrapper(dockingEventServer);
		
		// create client ports
		baseStatePushClient = portFactoryRegistry[connections.baseStatePushClient.roboticMiddleware]->createBaseStatePushClient();
		laserClient = portFactoryRegistry[connections.laserClient.roboticMiddleware]->createLaserClient();
		navVelSendClient = portFactoryRegistry[connections.navVelSendClient.roboticMiddleware]->createNavVelSendClient();
		navVelSendClientWrapper = new NavVelSendClientWrapper(navVelSendClient);
		
		// create InputTaskTriggers and UpcallManagers
		baseStatePushClientInputCollector = new BaseStatePushClientInputCollector(baseStatePushClient);
		baseStatePushClientInputTaskTrigger = new Smart::InputTaskTrigger<CommBasicObjects::CommBaseState>(baseStatePushClientInputCollector);
		baseStatePushClientUpcallManager = new BaseStatePushClientUpcallManager(baseStatePushClientInputCollector);
		laserClientInputCollector = new LaserClientInputCollector(laserClient);
		laserClientInputTaskTrigger = new Smart::InputTaskTrigger<CommBasicObjects::CommMobileLaserScan>(laserClientInputCollector);
		laserClientUpcallManager = new LaserClientUpcallManager(laserClientInputCollector);
		
		// create input-handler
		
		// create request-handlers
		
		// create state pattern
		stateChangeHandler = new SmartStateChangeHandler();
		stateActivityManager = new StateActivityManager(stateChangeHandler);
		stateSlave = new SmartACE::StateSlave(component, stateActivityManager);
		if (stateSlave->defineStates("LaserDocking" ,"LaserDocking") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion LaserDocking.LaserDocking" << std::endl;
		if (stateSlave->defineStates("UnDocking" ,"UnDocking") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion UnDocking.UnDocking" << std::endl;
		status = stateSlave->setUpInitialState(connections.component.initialComponentMode);
		if (status != Smart::SMART_OK) std::cerr << status << "; failed setting initial ComponentMode: " << connections.component.initialComponentMode << std::endl;
		// activate state slave
		status = stateSlave->activate();
		if(status != Smart::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		wiringSlave = new SmartACE::WiringSlave(component);
		// add client port to wiring slave
		if(connections.baseStatePushClient.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<CommBasicObjects::CommBaseState>*>(baseStatePushClient)->add(wiringSlave, connections.baseStatePushClient.wiringName);
		}
		if(connections.laserClient.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<CommBasicObjects::CommMobileLaserScan>*>(laserClient)->add(wiringSlave, connections.laserClient.wiringName);
		}
		if(connections.navVelSendClient.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::SendClient<CommBasicObjects::CommNavigationVelocity>*>(navVelSendClient)->add(wiringSlave, connections.navVelSendClient.wiringName);
		}
		
		// create parameter slave
		param = new SmartACE::ParameterSlave(component, &paramHandler);
		
		
		// create Task LaserDockingTask
		laserDockingTask = new LaserDockingTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.laserDockingTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = (int)(1000.0*1000.0 / connections.laserDockingTask.periodicActFreq);
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(laserDockingTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				laserDockingTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task LaserDockingTask" << std::endl;
			}
		} else if(connections.laserDockingTask.trigger == "DataTriggered") {
			laserDockingTaskTrigger = getInputTaskTriggerFromString(connections.laserDockingTask.inPortRef);
			if(laserDockingTaskTrigger != NULL) {
				laserDockingTaskTrigger->attach(laserDockingTask, connections.laserDockingTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.laserDockingTask.inPortRef << " as activation source for Task LaserDockingTask" << std::endl;
			}
		} 
		
		// create Task UndockingTask
		undockingTask = new UndockingTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.undockingTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = (int)(1000.0*1000.0 / connections.undockingTask.periodicActFreq);
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(undockingTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				undockingTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task UndockingTask" << std::endl;
			}
		} else if(connections.undockingTask.trigger == "DataTriggered") {
			undockingTaskTrigger = getInputTaskTriggerFromString(connections.undockingTask.inPortRef);
			if(undockingTaskTrigger != NULL) {
				undockingTaskTrigger->attach(undockingTask, connections.undockingTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.undockingTask.inPortRef << " as activation source for Task UndockingTask" << std::endl;
			}
		} 
		
		// create Task VisTask
		visTask = new VisTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.visTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = (int)(1000.0*1000.0 / connections.visTask.periodicActFreq);
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(visTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				visTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task VisTask" << std::endl;
			}
		} else if(connections.visTask.trigger == "DataTriggered") {
			visTaskTrigger = getInputTaskTriggerFromString(connections.visTask.inPortRef);
			if(visTaskTrigger != NULL) {
				visTaskTrigger->attach(visTask, connections.visTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.visTask.inPortRef << " as activation source for Task VisTask" << std::endl;
			}
		} 
		
		
		// link observers with subjects
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void ComponentRobotToRobotDocking::run()
{
	stateSlave->acquire("init");
	// startup all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onStartup();
	}
	
	// startup all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onStartup();
	}
	stateSlave->release("init");
	
	// do not call this handler within the init state (see above) as this handler internally calls setStartupFinished() (this should be fixed in future)
	compHandler.onStartup();
	
	// this call blocks until the component is commanded to shutdown
	stateSlave->acquire("shutdown");
	
	// shutdown all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onShutdown();
	}
	
	// shutdown all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onShutdown();
	}
	
	if(connections.component.useLogger == true) {
		//FIXME: use logging
		//Smart::LOGGER->stopLogging();
	}
	
	compHandler.onShutdown();
	
	stateSlave->release("shutdown");
}

// clean-up component's resources
void ComponentRobotToRobotDocking::fini()
{
	// unlink all observers
	
	// destroy all task instances
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(laserDockingTaskTrigger != NULL){
		laserDockingTaskTrigger->detach(laserDockingTask);
		delete laserDockingTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(undockingTaskTrigger != NULL){
		undockingTaskTrigger->detach(undockingTask);
		delete undockingTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(visTaskTrigger != NULL){
		visTaskTrigger->detach(visTask);
		delete visTask;
	}

	// destroy all input-handler

	// destroy InputTaskTriggers and UpcallManagers
	delete baseStatePushClientInputTaskTrigger;
	delete baseStatePushClientUpcallManager;
	delete baseStatePushClientInputCollector;
	delete laserClientInputTaskTrigger;
	delete laserClientUpcallManager;
	delete laserClientInputCollector;

	// destroy client ports
	delete baseStatePushClient;
	delete laserClient;
	delete navVelSendClientWrapper;
	delete navVelSendClient;

	// destroy request-handlers

	// destroy server ports
	delete dockingEventServerWrapper;
	delete dockingEventServer;
	
	// destroy event-test handlers (if needed)
	dockingEventServerEventTestHandler;
	
	delete stateSlave;
	delete stateActivityManager;
	// destroy state-change-handler
	delete stateChangeHandler;
	
	// destroy all master/slave ports
	delete wiringSlave;
	delete param;
	

	// destroy all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->destroy();
	}

	// destroy all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->destroy();
	}
	
}

void ComponentRobotToRobotDocking::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	SmartACE::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("ComponentRobotToRobotDocking.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load ComponentRobotToRobotDocking.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: ComponentRobotToRobotDocking.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		SmartACE::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(SmartACE::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(SmartACE::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		parameter.getString("component", "initialComponentMode", connections.component.initialComponentMode);
		if(parameter.checkIfParameterExists("component", "defaultScheduler")) {
			parameter.getString("component", "defaultScheduler", connections.component.defaultScheduler);
		}
		if(parameter.checkIfParameterExists("component", "useLogger")) {
			parameter.getBoolean("component", "useLogger", connections.component.useLogger);
		}
		
		// load parameters for client baseStatePushClient
		parameter.getBoolean("baseStatePushClient", "initialConnect", connections.baseStatePushClient.initialConnect);
		parameter.getString("baseStatePushClient", "serviceName", connections.baseStatePushClient.serviceName);
		parameter.getString("baseStatePushClient", "serverName", connections.baseStatePushClient.serverName);
		parameter.getString("baseStatePushClient", "wiringName", connections.baseStatePushClient.wiringName);
		parameter.getInteger("baseStatePushClient", "interval", connections.baseStatePushClient.interval);
		if(parameter.checkIfParameterExists("baseStatePushClient", "roboticMiddleware")) {
			parameter.getString("baseStatePushClient", "roboticMiddleware", connections.baseStatePushClient.roboticMiddleware);
		}
		// load parameters for client laserClient
		parameter.getBoolean("laserClient", "initialConnect", connections.laserClient.initialConnect);
		parameter.getString("laserClient", "serviceName", connections.laserClient.serviceName);
		parameter.getString("laserClient", "serverName", connections.laserClient.serverName);
		parameter.getString("laserClient", "wiringName", connections.laserClient.wiringName);
		parameter.getInteger("laserClient", "interval", connections.laserClient.interval);
		if(parameter.checkIfParameterExists("laserClient", "roboticMiddleware")) {
			parameter.getString("laserClient", "roboticMiddleware", connections.laserClient.roboticMiddleware);
		}
		// load parameters for client navVelSendClient
		parameter.getBoolean("navVelSendClient", "initialConnect", connections.navVelSendClient.initialConnect);
		parameter.getString("navVelSendClient", "serviceName", connections.navVelSendClient.serviceName);
		parameter.getString("navVelSendClient", "serverName", connections.navVelSendClient.serverName);
		parameter.getString("navVelSendClient", "wiringName", connections.navVelSendClient.wiringName);
		if(parameter.checkIfParameterExists("navVelSendClient", "roboticMiddleware")) {
			parameter.getString("navVelSendClient", "roboticMiddleware", connections.navVelSendClient.roboticMiddleware);
		}
		
		// load parameters for server dockingEventServer
		parameter.getString("dockingEventServer", "serviceName", connections.dockingEventServer.serviceName);
		if(parameter.checkIfParameterExists("dockingEventServer", "roboticMiddleware")) {
			parameter.getString("dockingEventServer", "roboticMiddleware", connections.dockingEventServer.roboticMiddleware);
		}
		
		// load parameters for task LaserDockingTask
		parameter.getDouble("LaserDockingTask", "minActFreqHz", connections.laserDockingTask.minActFreq);
		parameter.getDouble("LaserDockingTask", "maxActFreqHz", connections.laserDockingTask.maxActFreq);
		parameter.getString("LaserDockingTask", "triggerType", connections.laserDockingTask.trigger);
		if(connections.laserDockingTask.trigger == "PeriodicTimer") {
			parameter.getDouble("LaserDockingTask", "periodicActFreqHz", connections.laserDockingTask.periodicActFreq);
		} else if(connections.laserDockingTask.trigger == "DataTriggered") {
			parameter.getString("LaserDockingTask", "inPortRef", connections.laserDockingTask.inPortRef);
			parameter.getInteger("LaserDockingTask", "prescale", connections.laserDockingTask.prescale);
		}
		if(parameter.checkIfParameterExists("LaserDockingTask", "scheduler")) {
			parameter.getString("LaserDockingTask", "scheduler", connections.laserDockingTask.scheduler);
		}
		if(parameter.checkIfParameterExists("LaserDockingTask", "priority")) {
			parameter.getInteger("LaserDockingTask", "priority", connections.laserDockingTask.priority);
		}
		if(parameter.checkIfParameterExists("LaserDockingTask", "cpuAffinity")) {
			parameter.getInteger("LaserDockingTask", "cpuAffinity", connections.laserDockingTask.cpuAffinity);
		}
		// load parameters for task UndockingTask
		parameter.getDouble("UndockingTask", "minActFreqHz", connections.undockingTask.minActFreq);
		parameter.getDouble("UndockingTask", "maxActFreqHz", connections.undockingTask.maxActFreq);
		parameter.getString("UndockingTask", "triggerType", connections.undockingTask.trigger);
		if(connections.undockingTask.trigger == "PeriodicTimer") {
			parameter.getDouble("UndockingTask", "periodicActFreqHz", connections.undockingTask.periodicActFreq);
		} else if(connections.undockingTask.trigger == "DataTriggered") {
			parameter.getString("UndockingTask", "inPortRef", connections.undockingTask.inPortRef);
			parameter.getInteger("UndockingTask", "prescale", connections.undockingTask.prescale);
		}
		if(parameter.checkIfParameterExists("UndockingTask", "scheduler")) {
			parameter.getString("UndockingTask", "scheduler", connections.undockingTask.scheduler);
		}
		if(parameter.checkIfParameterExists("UndockingTask", "priority")) {
			parameter.getInteger("UndockingTask", "priority", connections.undockingTask.priority);
		}
		if(parameter.checkIfParameterExists("UndockingTask", "cpuAffinity")) {
			parameter.getInteger("UndockingTask", "cpuAffinity", connections.undockingTask.cpuAffinity);
		}
		// load parameters for task VisTask
		parameter.getDouble("VisTask", "minActFreqHz", connections.visTask.minActFreq);
		parameter.getDouble("VisTask", "maxActFreqHz", connections.visTask.maxActFreq);
		parameter.getString("VisTask", "triggerType", connections.visTask.trigger);
		if(connections.visTask.trigger == "PeriodicTimer") {
			parameter.getDouble("VisTask", "periodicActFreqHz", connections.visTask.periodicActFreq);
		} else if(connections.visTask.trigger == "DataTriggered") {
			parameter.getString("VisTask", "inPortRef", connections.visTask.inPortRef);
			parameter.getInteger("VisTask", "prescale", connections.visTask.prescale);
		}
		if(parameter.checkIfParameterExists("VisTask", "scheduler")) {
			parameter.getString("VisTask", "scheduler", connections.visTask.scheduler);
		}
		if(parameter.checkIfParameterExists("VisTask", "priority")) {
			parameter.getInteger("VisTask", "priority", connections.visTask.priority);
		}
		if(parameter.checkIfParameterExists("VisTask", "cpuAffinity")) {
			parameter.getInteger("VisTask", "cpuAffinity", connections.visTask.cpuAffinity);
		}
		
		
		// load parameters for all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->loadParameters(parameter);
		}
		
		paramHandler.loadParameter(parameter);
	
	} catch (const SmartACE::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
