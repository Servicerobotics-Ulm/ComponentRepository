//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "ComponentRobotToRobotDocking.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	if(request.getParameterDataMode() == SmartACE::ParameterDataMode::NAME){
		answer = handleParametersNamed(request);
	} else {
		answer = handleParametersSequence(request);
	}
	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersNamed(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.BELT_ID")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		int temp_beltId = 0;
		if(request.getInteger("beltId", temp_beltId) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.BELT_ID.beltId = temp_beltId;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: beltId request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.NUM_BELTS")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		int temp_numBelts = 0;
		if(request.getInteger("numBelts", temp_numBelts) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.NUM_BELTS.numBelts = temp_numBelts;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: numBelts request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.SAVE_BEFORE_DOCKING_POSE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommRobotinoObjects_RobotinoDockingParameter_SAVE_BEFORE_DOCKING_POSECore(
			);
		}
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.STATION_ID")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		int temp_stationID = 0;
		if(request.getInteger("stationID", temp_stationID) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.STATION_ID.stationID = temp_stationID;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: stationID request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.IR_DOCK_CENTER_SENSOR_ZERO")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_ir_dock_center_sensor_zero = 0.0;
		if(request.getDouble("ir_dock_center_sensor_zero", temp_ir_dock_center_sensor_zero) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_center_sensor_zero.ir_dock_center_sensor_zero = temp_ir_dock_center_sensor_zero;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: ir_dock_center_sensor_zero request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.IR_DOCK_STOP_DIST_L1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_ir_dock_stop_dist_l1 = 0.0;
		if(request.getDouble("ir_dock_stop_dist_l1", temp_ir_dock_stop_dist_l1) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l1.ir_dock_stop_dist_l1 = temp_ir_dock_stop_dist_l1;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: ir_dock_stop_dist_l1 request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.IR_DOCK_STOP_DIST_L2_MAX")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_ir_dock_stop_dist_l2_max = 0.0;
		if(request.getDouble("ir_dock_stop_dist_l2_max", temp_ir_dock_stop_dist_l2_max) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_max.ir_dock_stop_dist_l2_max = temp_ir_dock_stop_dist_l2_max;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: ir_dock_stop_dist_l2_max request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.IR_DOCK_STOP_DIST_L2_MIN")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_ir_dock_stop_dist_l2_min = 0.0;
		if(request.getDouble("ir_dock_stop_dist_l2_min", temp_ir_dock_stop_dist_l2_min) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_min.ir_dock_stop_dist_l2_min = temp_ir_dock_stop_dist_l2_min;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: ir_dock_stop_dist_l2_min request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.LASER_DOCKSTOP_DIST")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_laser_dock_stop_dist = 0.0;
		if(request.getDouble("laser_dock_stop_dist", temp_laser_dock_stop_dist) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.laser_dockstop_dist.laser_dock_stop_dist = temp_laser_dock_stop_dist;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: laser_dock_stop_dist request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.MAX_REFLECTOR_DIST")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_max_reflector_dist = 0.0;
		if(request.getDouble("max_reflector_dist", temp_max_reflector_dist) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.max_reflector_dist.max_reflector_dist = temp_max_reflector_dist;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: max_reflector_dist request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.MAX_STATION_WIDTH")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_max_station_width = 0.0;
		if(request.getDouble("max_station_width", temp_max_station_width) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.max_station_width.max_station_width = temp_max_station_width;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: max_station_width request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.MIN_STATION_WIDTH")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_min_station_width = 0.0;
		if(request.getDouble("min_station_width", temp_min_station_width) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.min_station_width.min_station_width = temp_min_station_width;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: min_station_width request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.OFFS_BET_CENTER_O_BELTS")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_offs_bet_center_o_belts = 0.0;
		if(request.getDouble("offs_bet_center_o_belts", temp_offs_bet_center_o_belts) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.offs_bet_center_o_belts.offs_bet_center_o_belts = temp_offs_bet_center_o_belts;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: offs_bet_center_o_belts request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.OFFS_LEFT_REF_TO_1BELT_CENT")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_offs_left_ref_to_1Belt_cent = 0.0;
		if(request.getDouble("offs_left_ref_to_1Belt_cent", temp_offs_left_ref_to_1Belt_cent) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.offs_left_ref_to_1Belt_cent.offs_left_ref_to_1Belt_cent = temp_offs_left_ref_to_1Belt_cent;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: offs_left_ref_to_1Belt_cent request: "<<request<<std::endl;
		}
		
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersSequence(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.BELT_ID")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		int temp_beltId = 0;
		if(request.getInteger("1", temp_beltId) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.BELT_ID.beltId = temp_beltId;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: beltId request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.NUM_BELTS")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		int temp_numBelts = 0;
		if(request.getInteger("1", temp_numBelts) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.NUM_BELTS.numBelts = temp_numBelts;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: numBelts request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.SAVE_BEFORE_DOCKING_POSE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommRobotinoObjects_RobotinoDockingParameter_SAVE_BEFORE_DOCKING_POSECore(
			);
		}
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.STATION_ID")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		int temp_stationID = 0;
		if(request.getInteger("1", temp_stationID) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.STATION_ID.stationID = temp_stationID;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: stationID request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.IR_DOCK_CENTER_SENSOR_ZERO")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_ir_dock_center_sensor_zero = 0.0;
		if(request.getDouble("1", temp_ir_dock_center_sensor_zero) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_center_sensor_zero.ir_dock_center_sensor_zero = temp_ir_dock_center_sensor_zero;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: ir_dock_center_sensor_zero request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.IR_DOCK_STOP_DIST_L1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_ir_dock_stop_dist_l1 = 0.0;
		if(request.getDouble("1", temp_ir_dock_stop_dist_l1) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l1.ir_dock_stop_dist_l1 = temp_ir_dock_stop_dist_l1;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: ir_dock_stop_dist_l1 request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.IR_DOCK_STOP_DIST_L2_MAX")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_ir_dock_stop_dist_l2_max = 0.0;
		if(request.getDouble("1", temp_ir_dock_stop_dist_l2_max) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_max.ir_dock_stop_dist_l2_max = temp_ir_dock_stop_dist_l2_max;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: ir_dock_stop_dist_l2_max request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.IR_DOCK_STOP_DIST_L2_MIN")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_ir_dock_stop_dist_l2_min = 0.0;
		if(request.getDouble("1", temp_ir_dock_stop_dist_l2_min) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_min.ir_dock_stop_dist_l2_min = temp_ir_dock_stop_dist_l2_min;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: ir_dock_stop_dist_l2_min request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.LASER_DOCKSTOP_DIST")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_laser_dock_stop_dist = 0.0;
		if(request.getDouble("1", temp_laser_dock_stop_dist) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.laser_dockstop_dist.laser_dock_stop_dist = temp_laser_dock_stop_dist;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: laser_dock_stop_dist request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.MAX_REFLECTOR_DIST")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_max_reflector_dist = 0.0;
		if(request.getDouble("1", temp_max_reflector_dist) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.max_reflector_dist.max_reflector_dist = temp_max_reflector_dist;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: max_reflector_dist request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.MAX_STATION_WIDTH")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_max_station_width = 0.0;
		if(request.getDouble("1", temp_max_station_width) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.max_station_width.max_station_width = temp_max_station_width;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: max_station_width request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.MIN_STATION_WIDTH")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_min_station_width = 0.0;
		if(request.getDouble("1", temp_min_station_width) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.min_station_width.min_station_width = temp_min_station_width;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: min_station_width request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.OFFS_BET_CENTER_O_BELTS")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_offs_bet_center_o_belts = 0.0;
		if(request.getDouble("1", temp_offs_bet_center_o_belts) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.offs_bet_center_o_belts.offs_bet_center_o_belts = temp_offs_bet_center_o_belts;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: offs_bet_center_o_belts request: "<<request<<std::endl;
		}
		
	}
	else if (tag == "COMMROBOTINOOBJECTS.ROBOTINODOCKINGPARAMETER.OFFS_LEFT_REF_TO_1BELT_CENT")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_offs_left_ref_to_1Belt_cent = 0.0;
		if(request.getDouble("1", temp_offs_left_ref_to_1Belt_cent) == 0) {
			commitState.CommRobotinoObjects.RobotinoDockingParameter.offs_left_ref_to_1Belt_cent.offs_left_ref_to_1Belt_cent = temp_offs_left_ref_to_1Belt_cent;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: offs_left_ref_to_1Belt_cent request: "<<request<<std::endl;
		}
		
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter docking
		if(parameter.getBoolean("docking", "connectToServices", commitState.docking.connectToServices))
		{
			globalState.docking.connectToServices = commitState.docking.connectToServices;
		}
		if(parameter.getBoolean("docking", "enable_visualization", commitState.docking.enable_visualization))
		{
			globalState.docking.enable_visualization = commitState.docking.enable_visualization;
		}
		if(parameter.getDouble("docking", "laserDocking_rotVel", commitState.docking.laserDocking_rotVel))
		{
			globalState.docking.laserDocking_rotVel = commitState.docking.laserDocking_rotVel;
		}
		if(parameter.getDouble("docking", "laserDocking_stopDistance", commitState.docking.laserDocking_stopDistance))
		{
			globalState.docking.laserDocking_stopDistance = commitState.docking.laserDocking_stopDistance;
		}
		if(parameter.getDouble("docking", "laserDocking_transVelX", commitState.docking.laserDocking_transVelX))
		{
			globalState.docking.laserDocking_transVelX = commitState.docking.laserDocking_transVelX;
		}
		if(parameter.getDouble("docking", "laserDocking_transVelY", commitState.docking.laserDocking_transVelY))
		{
			globalState.docking.laserDocking_transVelY = commitState.docking.laserDocking_transVelY;
		}
		if(parameter.getBoolean("docking", "useLaser", commitState.docking.useLaser))
		{
			globalState.docking.useLaser = commitState.docking.useLaser;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//
		// parameter CommRobotinoObjects.RobotinoDockingParameter.BELT_ID
		if(parameter.getInteger("CommRobotinoObjects.RobotinoDockingParameter.BELT_ID", "beltId", commitState.CommRobotinoObjects.RobotinoDockingParameter.BELT_ID.beltId))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.BELT_ID.beltId = commitState.CommRobotinoObjects.RobotinoDockingParameter.BELT_ID.beltId;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.NUM_BELTS
		if(parameter.getInteger("CommRobotinoObjects.RobotinoDockingParameter.NUM_BELTS", "numBelts", commitState.CommRobotinoObjects.RobotinoDockingParameter.NUM_BELTS.numBelts))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.NUM_BELTS.numBelts = commitState.CommRobotinoObjects.RobotinoDockingParameter.NUM_BELTS.numBelts;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.STATION_ID
		if(parameter.getInteger("CommRobotinoObjects.RobotinoDockingParameter.STATION_ID", "stationID", commitState.CommRobotinoObjects.RobotinoDockingParameter.STATION_ID.stationID))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.STATION_ID.stationID = commitState.CommRobotinoObjects.RobotinoDockingParameter.STATION_ID.stationID;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.ir_dock_center_sensor_zero
		if(parameter.getDouble("CommRobotinoObjects.RobotinoDockingParameter.ir_dock_center_sensor_zero", "ir_dock_center_sensor_zero", commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_center_sensor_zero.ir_dock_center_sensor_zero))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_center_sensor_zero.ir_dock_center_sensor_zero = commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_center_sensor_zero.ir_dock_center_sensor_zero;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l1
		if(parameter.getDouble("CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l1", "ir_dock_stop_dist_l1", commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l1.ir_dock_stop_dist_l1))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l1.ir_dock_stop_dist_l1 = commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l1.ir_dock_stop_dist_l1;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_max
		if(parameter.getDouble("CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_max", "ir_dock_stop_dist_l2_max", commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_max.ir_dock_stop_dist_l2_max))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_max.ir_dock_stop_dist_l2_max = commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_max.ir_dock_stop_dist_l2_max;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_min
		if(parameter.getDouble("CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_min", "ir_dock_stop_dist_l2_min", commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_min.ir_dock_stop_dist_l2_min))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_min.ir_dock_stop_dist_l2_min = commitState.CommRobotinoObjects.RobotinoDockingParameter.ir_dock_stop_dist_l2_min.ir_dock_stop_dist_l2_min;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.laser_dockstop_dist
		if(parameter.getDouble("CommRobotinoObjects.RobotinoDockingParameter.laser_dockstop_dist", "laser_dock_stop_dist", commitState.CommRobotinoObjects.RobotinoDockingParameter.laser_dockstop_dist.laser_dock_stop_dist))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.laser_dockstop_dist.laser_dock_stop_dist = commitState.CommRobotinoObjects.RobotinoDockingParameter.laser_dockstop_dist.laser_dock_stop_dist;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.max_reflector_dist
		if(parameter.getDouble("CommRobotinoObjects.RobotinoDockingParameter.max_reflector_dist", "max_reflector_dist", commitState.CommRobotinoObjects.RobotinoDockingParameter.max_reflector_dist.max_reflector_dist))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.max_reflector_dist.max_reflector_dist = commitState.CommRobotinoObjects.RobotinoDockingParameter.max_reflector_dist.max_reflector_dist;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.max_station_width
		if(parameter.getDouble("CommRobotinoObjects.RobotinoDockingParameter.max_station_width", "max_station_width", commitState.CommRobotinoObjects.RobotinoDockingParameter.max_station_width.max_station_width))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.max_station_width.max_station_width = commitState.CommRobotinoObjects.RobotinoDockingParameter.max_station_width.max_station_width;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.min_station_width
		if(parameter.getDouble("CommRobotinoObjects.RobotinoDockingParameter.min_station_width", "min_station_width", commitState.CommRobotinoObjects.RobotinoDockingParameter.min_station_width.min_station_width))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.min_station_width.min_station_width = commitState.CommRobotinoObjects.RobotinoDockingParameter.min_station_width.min_station_width;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.offs_bet_center_o_belts
		if(parameter.getDouble("CommRobotinoObjects.RobotinoDockingParameter.offs_bet_center_o_belts", "offs_bet_center_o_belts", commitState.CommRobotinoObjects.RobotinoDockingParameter.offs_bet_center_o_belts.offs_bet_center_o_belts))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.offs_bet_center_o_belts.offs_bet_center_o_belts = commitState.CommRobotinoObjects.RobotinoDockingParameter.offs_bet_center_o_belts.offs_bet_center_o_belts;
		}
		// parameter CommRobotinoObjects.RobotinoDockingParameter.offs_left_ref_to_1Belt_cent
		if(parameter.getDouble("CommRobotinoObjects.RobotinoDockingParameter.offs_left_ref_to_1Belt_cent", "offs_left_ref_to_1Belt_cent", commitState.CommRobotinoObjects.RobotinoDockingParameter.offs_left_ref_to_1Belt_cent.offs_left_ref_to_1Belt_cent))
		{
			globalState.CommRobotinoObjects.RobotinoDockingParameter.offs_left_ref_to_1Belt_cent.offs_left_ref_to_1Belt_cent = commitState.CommRobotinoObjects.RobotinoDockingParameter.offs_left_ref_to_1Belt_cent.offs_left_ref_to_1Belt_cent;
		}

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
