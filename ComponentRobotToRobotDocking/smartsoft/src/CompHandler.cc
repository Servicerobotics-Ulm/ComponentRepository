//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C)  2018 Matthias Lutz
//
//              lutz@hs-ulm.de
//              schlegel@hs-ulm.de
//
//      ZAFH Servicerobotic Ulm
//      Christian Schlegel
//      University of Applied Sciences
//      Prittwitzstr. 10
//      89075 Ulm
//      Germany
//
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//-------------------------------------------------------------------------

#include "CompHandler.hh"
#include "ComponentRobotToRobotDocking.hh"

#include <iostream>

// include communication objects
#include <CommBasicObjects/CommBaseState.hh>
#include <CommBasicObjects/CommMobileLaserScan.hh>
#include <CommBasicObjects/CommNavigationVelocity.hh>
#include <CommRobotinoObjects/CommRobotinoDockingEventParameter.hh>
#include <CommRobotinoObjects/CommRobotinoDockingEventResult.hh>
#include <CommRobotinoObjects/RobotinoDockingEventState.hh>


void CompHandler::onStartup() 
{
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	Smart::StatusCode status;

	// Start all services. If you need manual control, use the content of this function to
	// connect and start each service individually, e.g:
	// COMP->connectMyPortName("SmartExampleComponent", "examplePort");
	//status = COMP->connectAndStartAllServices();

	if(COMP->getGlobalState().getDocking().getConnectToServices() == true){


			if(COMP->getGlobalState().getDocking().getUseLaser())
			{
				// connect to all services
				std::cout << "connecting to: " << COMP->connections.laserClient.serverName << "; "
						<< COMP->connections.laserClient.serviceName << std::endl;
				status = COMP->laserClient->connect(COMP->connections.laserClient.serverName,
						COMP->connections.laserClient.serviceName);
				while (status != Smart::SMART_OK)
				{
					usleep(500000);
					status = COMP->laserClient->connect(COMP->connections.laserClient.serverName,
							COMP->connections.laserClient.serviceName);
				}
				std::cout << "connected.\n";
				COMP->laserClient->subscribe();
			}

			std::cout << "connecting to: " << COMP->connections.navVelSendClient.serverName
					<< "; " << COMP->connections.navVelSendClient.serviceName << std::endl;
			status = COMP->navVelSendClient->connect(
					COMP->connections.navVelSendClient.serverName,
					COMP->connections.navVelSendClient.serviceName);
			while (status != Smart::SMART_OK)
			{
				usleep(500000);
				status = COMP->navVelSendClient->connect(
						COMP->connections.navVelSendClient.serverName,
						COMP->connections.navVelSendClient.serviceName);
			}
			std::cout << "connected.\n";

			std::cout << "connecting to: " << COMP->connections.baseStatePushClient.serverName
					<< "; " << COMP->connections.baseStatePushClient.serviceName << std::endl;
			status = COMP->baseStatePushClient->connect(
					COMP->connections.baseStatePushClient.serverName,
					COMP->connections.baseStatePushClient.serviceName);
			while (status != Smart::SMART_OK)
			{
				usleep(500000);
				status = COMP->baseStatePushClient->connect(
						COMP->connections.baseStatePushClient.serverName,
						COMP->connections.baseStatePushClient.serviceName);
			}
			std::cout << "connected.\n";

			COMP->baseStatePushClient->subscribe(COMP->connections.baseStatePushClient.interval);

		}



		// activate state server
		if (COMP->stateSlave->activate() != Smart::SMART_OK)
			std::cerr << "ERROR: activate state" << std::endl;


	
	// Start all tasks. If you need manual control, use the content of this function to
	// start each task individually.
	//COMP->startAllTasks();
		COMP->laserDockingTask->start();
		COMP->undockingTask->start();
		if(COMP->getGlobalState().getDocking().getEnable_visualization() == true){
			COMP->visTask->start();
		}
	
	// Start all timers. If you need manual control, use the content of this function to
	// start each timer individually.
	COMP->startAllTimers();
	
	// Notify the component that setup/initialization is finished.
	// You may move this function to any other place.
	COMP->setStartupFinished(); 
}

void CompHandler::onShutdown() 
{
	std::cout << "shutdown - put your cleanup code in CompHandler::onShutdown()!!!\n";
	
}
