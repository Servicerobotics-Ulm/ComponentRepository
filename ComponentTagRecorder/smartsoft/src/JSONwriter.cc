//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2020 Nayabrasul Shaik
//
//        nayabrasul.shaik@thu.de
//
//        Christian Schlegel (christian.schlegel@thu.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

#include <JSONwriter.hh>
#include <iostream>
#include <iterator>
#include <type_traits>

JSON_writer::JSON_writer(std::string directory) {
	//create filename from current date and time
	std::ostringstream oss;
	std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
	std::time_t now_c = std::chrono::system_clock::to_time_t(now);
	oss<<directory + "/tags_" <<std::put_time(std::localtime(&now_c), "%d_%m_%Y_%H_%M_%S")<<".json";
	filename = oss.str();

	json_file.open(filename.c_str());
	std::cout << "json_file is opened : " << filename << std::endl;
}

JSON_writer::~JSON_writer() {
	if(json_file.is_open())
	{
	json_file.close();
	std::cout << "json_file is closed : " << filename << std::endl;
	}
}

void JSON_writer::add_tag_json_str(const CommTrackingObjects::CommDetectedMarker& cMarker)
{
	std::stringstream ss;
	ss<< set_prop_str("id", cMarker.getId())
    		   << set_prop_str("x", cMarker.getPose().get_x(1))
			   << set_prop_str("y", cMarker.getPose().get_y(1))
			   << set_prop_str("z", cMarker.getPose().get_z(1))
			   << set_prop_str("yaw", cMarker.getPose().get_azimuth())
			   << set_prop_str("elevation", cMarker.getPose().get_elevation())
			   << set_prop_str("roll", cMarker.getPose().get_roll(), true);

	tags_json_str.push_back(ss.str());

}

template<typename KT, typename VT>
std::string JSON_writer::set_prop_str(KT key, VT value, bool is_last)
{
    std::stringstream ss;
    std::string key_start("\n\t\t\"");
    std::string key_end("\"");
    std::string sep(" : ");
    std::string special_end("");
    std::string end(",");
    if(std::is_same<VT, std::string>::value)
    {
    ss << key_start << key << key_end <<sep <<"\""<<value <<"\""<< (is_last? special_end : end);
    }
    else
    {
    ss << key_start << key << key_end <<sep <<value << (is_last? special_end : end);
    }
    //std::cout << " set_prop_str : " << ss.str() <<std::endl;
    return ss.str();
}

std::string JSON_writer::make_tag_json_str()
{
    std::stringstream ss;
    std::cout << "count " << tags_json_str.size()<<std::endl;

    // Header
    ss << "{ \n\t\"info\": \"detected_tags\",\n\t\"units\": \"x,y,z in meters, azimuth, elevation, roll in radians\",\n\t\"tags\": [";
    //Stations List
    for(auto it = tags_json_str.begin(); it != tags_json_str.end(); ++it)
    {
        if(std::next(it) == tags_json_str.end()) // last element
        {
            ss << "{" << *it << "\n}";
        }else
            ss << "{" << *it << "\n},";
    }
    //END
    ss << "\n] \n}\n";

    std::cout << ss.str() <<std::endl;
    return ss.str();

}

void JSON_writer::process(const std::map<unsigned int, CommBasicObjects::CommPose3d>& cmean_poses)
{
	for( auto it = cmean_poses.begin(); it != cmean_poses.end(); ++it )
	{
		CommTrackingObjects::CommDetectedMarker p;
		p.setId(it->first);
		p.setPose(it->second);
		add_tag_json_str(p);
	}

	json_file << make_tag_json_str();
	json_file.close();
}
