//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter options
		 */
		class optionsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug;
			double decimate;
			double decision_threshold;
			unsigned char numThreads;
			bool refine_edges;
			double sigma;
			std::string tag_family;
			double tag_size;
		
		public:
			// default constructor
			optionsType() {
				debug = false;
				decimate = 1.0;
				decision_threshold = 50.0;
				numThreads = 1;
				refine_edges = false;
				sigma = 1.0;
				tag_family = "tag16h5";
				tag_size = 0.16;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug() const { return debug; }
			inline double getDecimate() const { return decimate; }
			inline double getDecision_threshold() const { return decision_threshold; }
			inline unsigned char getNumThreads() const { return numThreads; }
			inline bool getRefine_edges() const { return refine_edges; }
			inline double getSigma() const { return sigma; }
			inline std::string getTag_family() const { return tag_family; }
			inline double getTag_size() const { return tag_size; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "options(";
				os << "debug = " << debug << ", ";
				os << "decimate = " << decimate << ", ";
				os << "decision_threshold = " << decision_threshold << ", ";
				os << "numThreads = " << numThreads << ", ";
				os << "refine_edges = " << refine_edges << ", ";
				os << "sigma = " << sigma << ", ";
				os << "tag_family = " << tag_family << ", ";
				os << "tag_size = " << tag_size << ", ";
				os << ")\n";
			}
			
		}; // end class optionsType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	optionsType options;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	optionsType getOptions() const {
		return options;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		options.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["options"] = nlohmann::json {
			{"debug" , getOptions().getDebug()},
			{"decimate" , getOptions().getDecimate()},
			{"decision_threshold" , getOptions().getDecision_threshold()},
			{"numThreads" , getOptions().getNumThreads()},
			{"refine_edges" , getOptions().getRefine_edges()},
			{"sigma" , getOptions().getSigma()},
			{"tag_family" , getOptions().getTag_family()},
			{"tag_size" , getOptions().getTag_size()}
		};
	
		
		return param.dump();
	}
};

#endif
