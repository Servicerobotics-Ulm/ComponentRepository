//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2020 Nayabrasul Shaik
//
//        nayabrasul.shaik@thu.de
//
//        Christian Schlegel (christian.schlegel@thu.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------
#include "MarkerListEventServiceOutEventTestHandler.hh"

bool MarkerListEventServiceOutEventTestHandler::testEvent(
	CommTrackingObjects::CommDetectedMarkerEventParameter &p,
	CommTrackingObjects::CommDetectedMarkerEventResult &r,
	const CommTrackingObjects::CommDetectedMarkerEventState &s
) throw() {
	// fire all events (without filtering) in the default implementation
	// implement your own (specific) event-filtering code using the event-parameter as input
	// true means that the current event will be fired to the according client
	// false means that the current event is ignored (it will not be communicated to the according client)
	bool result = false;

		std::vector<unsigned int> requested_tag_ids= p.getTag_idsRef();
		std::vector<CommTrackingObjects::CommDetectedMarker> markers_found = s.getMarkersCopy();
		CommTrackingObjects::CommDetectedMarkerList selected_markers;


		for(CommTrackingObjects::CommDetectedMarker current_marker : markers_found)
		{
			if(std::find(requested_tag_ids.begin(), requested_tag_ids.end(), current_marker.getId()) != requested_tag_ids.end()) {
				selected_markers.add_CommDetectedMarker(current_marker);
			}
		}
		if(selected_markers.getMarkersSize()>0)
		{
			r.set_CommDetectedMarkerList(selected_markers);
			result = true;
		}


		return result;
}
