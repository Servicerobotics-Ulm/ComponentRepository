//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "ComponentWebotsRobotArmOpcUaBackendPortFactory.hh"

// include all potentially required pattern implementations
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/PushClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/EventClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QClientOPCUA.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/SendClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QueryClient.hpp>

#include <SeRoNetSDK/SeRoNet/OPCUA/Server/PushServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/EventServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/SendServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/QueryServer.hpp>

// include referenced CommunicationObject SeRoNetSDK self description implementations
#include "CommBasicObjectsOpcUa/CommBaseStateOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommDigitalInputEventParameterOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommDigitalInputEventResultOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommDigitalInputEventStateOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommIOValuesOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommVoidOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorEventParameterOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorEventResultOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorEventStateOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorTrajectoryOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommMobileManipulatorProgramsOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommMobileManipulatorStateOpcUa.hh"

// create a static instance of the OpcUaBackendPortFactory
static ComponentWebotsRobotArmOpcUaBackendPortFactory OpcUaBackendPortFactory;

ComponentWebotsRobotArmOpcUaBackendPortFactory::ComponentWebotsRobotArmOpcUaBackendPortFactory()
{  
	componentImpl = 0;
	ComponentWebotsRobotArm::instance()->addPortFactory("OpcUa_SeRoNet", this);
}

ComponentWebotsRobotArmOpcUaBackendPortFactory::~ComponentWebotsRobotArmOpcUaBackendPortFactory()
{  }

void ComponentWebotsRobotArmOpcUaBackendPortFactory::initialize(ComponentWebotsRobotArm *component, int argc, char* argv[])
{
	componentImpl = new SeRoNet::Utils::Component(component->connections.component.name);
}

int ComponentWebotsRobotArmOpcUaBackendPortFactory::onStartup()
{
	if (!component_thread.joinable()) {
    	component_thread = std::thread(&ComponentWebotsRobotArmOpcUaBackendPortFactory::task_execution, this);
    	return 0;
    }
	return -1;
}

Smart::IPushClientPattern<CommBasicObjects::CommBaseState> * ComponentWebotsRobotArmOpcUaBackendPortFactory::createBaseStateServiceIn()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommBasicObjects::CommBaseState>(componentImpl);
}


Smart::IEventServerPattern<CommBasicObjects::CommDigitalInputEventParameter, CommBasicObjects::CommDigitalInputEventResult, CommBasicObjects::CommDigitalInputEventState> * ComponentWebotsRobotArmOpcUaBackendPortFactory::createIoEventServer(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommBasicObjects::CommDigitalInputEventParameter, CommBasicObjects::CommDigitalInputEventResult, CommBasicObjects::CommDigitalInputEventState>> ioEventServerEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<CommBasicObjects::CommDigitalInputEventParameter, CommBasicObjects::CommDigitalInputEventResult, CommBasicObjects::CommDigitalInputEventState>(componentImpl, serviceName, ioEventServerEventTestHandler);
}

Smart::IQueryServerPattern<CommBasicObjects::CommIOValues, CommBasicObjects::CommIOValues> * ComponentWebotsRobotArmOpcUaBackendPortFactory::createIoQueryServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::QueryServer<CommBasicObjects::CommIOValues, CommBasicObjects::CommIOValues>(componentImpl, serviceName);
}

Smart::IEventServerPattern<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult, CommManipulatorObjects::CommManipulatorEventState> * ComponentWebotsRobotArmOpcUaBackendPortFactory::createManipulatorEventServiceOut(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult, CommManipulatorObjects::CommManipulatorEventState>> manipulatorEventServiceOutEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult, CommManipulatorObjects::CommManipulatorEventState>(componentImpl, serviceName, manipulatorEventServiceOutEventTestHandler);
}

Smart::IPushServerPattern<CommManipulatorObjects::CommMobileManipulatorState> * ComponentWebotsRobotArmOpcUaBackendPortFactory::createPosePushServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::PushServer<CommManipulatorObjects::CommMobileManipulatorState>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState> * ComponentWebotsRobotArmOpcUaBackendPortFactory::createPoseQueryServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::QueryServer<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorPrograms> * ComponentWebotsRobotArmOpcUaBackendPortFactory::createProgramQuery(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::QueryServer<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorPrograms>(componentImpl, serviceName);
}

Smart::ISendServerPattern<CommManipulatorObjects::CommManipulatorTrajectory> * ComponentWebotsRobotArmOpcUaBackendPortFactory::createTrajectorySendServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::SendServer<CommManipulatorObjects::CommManipulatorTrajectory>(componentImpl, serviceName);
}


int ComponentWebotsRobotArmOpcUaBackendPortFactory::task_execution()
{
	componentImpl->run();
	return 0;
}

int ComponentWebotsRobotArmOpcUaBackendPortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	// stop component-internal infrastructure
	componentImpl->stopRunning();
	// wait on component thread to exit
	if (component_thread.joinable()) {
		// FIXME: don't wait infinetly (use timeoutTime here)
    	component_thread.join();
    }
	return 0;
}

void ComponentWebotsRobotArmOpcUaBackendPortFactory::destroy()
{
	// clean-up component's internally used resources
	delete componentImpl;
}
