//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "TriggerHandler.hh"

#include "ComponentWebotsRobotArm.hh"

// trigger user methods
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_ADD_TCP(const std::string &name, const double &x, const double &y, const double &z, const double &rX, const double &rY, const double &rZ)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_ADD_TOOL(const std::string &name, const std::list<float> &center_of_grav, const float &weight, const std::list<float> &inertia)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_CANCEL_MOTION()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_CLEAR_PCS()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_LOAD_PROGRAM(const std::string &name)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_MOVE_CIRCULAR(const double &viaX, const double &viaY, const double &viaZ, const double &viaRX, const double &viaRY, const double &viaRZ, const double &goalX, const double &goalY, const double &goalZ, const double &goalRX, const double &goalRY, const double &goalRZ, const double &acc, const double &speed)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_MOVE_LINEAR(const double &goalX, const double &goalY, const double &goalZ, const double &goalRX, const double &goalRY, const double &goalRZ, const double &acc, const double &speed)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_MOVE_PATH(const std::string &pathID, const bool &overwriteSpeed, const double &acc, const double &speed)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_SET_ACTIVE_TCP(const std::string &name)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_SET_ACTIVE_TOOL(const std::string &name)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_SET_PCS(const double &x, const double &y, const double &z, const double &rX, const double &rY, const double &rZ)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_SET_TCP(const double &x, const double &y, const double &z, const double &rX, const double &rY, const double &rZ)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_START_FREEDRIVE()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_START_PROGRAM()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_STOP_FREEDRIVE()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommManipulatorObjects_ManipulatorParameter_STOP_PROGRAM()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
