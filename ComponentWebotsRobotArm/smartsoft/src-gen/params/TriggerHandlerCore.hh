//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _TRIGGERHANDLERCORE_HH
#define _TRIGGERHANDLERCORE_HH

#include "aceSmartSoft.hh"
#include <queue>

#include <string>
#include <iostream>
#include <list>

class TriggerHandlerCore : public SmartACE::ManagedTask
{
	friend class ParamUpdateHandler;
	
public:
	TriggerHandlerCore() 
	:	SmartACE::ManagedTask(NULL) //TODO: a propper component pointer should be probably used here instead of NULL
	,	mutex()
	,	sema(0) // initialize semaphore in blocking mode
	,	current_trigger_enumerator(TriggerEnumerators::UNDEFINED_TRIGGER_ACTION)
	{  
		this->start();
	}
	virtual ~TriggerHandlerCore() {  }

	// trigger user methods
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_ADD_TCP(const std::string &name, const double &x, const double &y, const double &z, const double &rX, const double &rY, const double &rZ) = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_ADD_TOOL(const std::string &name, const std::list<float> &center_of_grav, const float &weight, const std::list<float> &inertia) = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_CANCEL_MOTION() = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_CLEAR_PCS() = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_LOAD_PROGRAM(const std::string &name) = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_MOVE_CIRCULAR(const double &viaX, const double &viaY, const double &viaZ, const double &viaRX, const double &viaRY, const double &viaRZ, const double &goalX, const double &goalY, const double &goalZ, const double &goalRX, const double &goalRY, const double &goalRZ, const double &acc, const double &speed) = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_MOVE_LINEAR(const double &goalX, const double &goalY, const double &goalZ, const double &goalRX, const double &goalRY, const double &goalRZ, const double &acc, const double &speed) = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_MOVE_PATH(const std::string &pathID, const bool &overwriteSpeed, const double &acc, const double &speed) = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_SET_ACTIVE_TCP(const std::string &name) = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_SET_ACTIVE_TOOL(const std::string &name) = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_SET_PCS(const double &x, const double &y, const double &z, const double &rX, const double &rY, const double &rZ) = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_SET_TCP(const double &x, const double &y, const double &z, const double &rX, const double &rY, const double &rZ) = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_START_FREEDRIVE() = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_START_PROGRAM() = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_STOP_FREEDRIVE() = 0;
	
		
		virtual void handleCommManipulatorObjects_ManipulatorParameter_STOP_PROGRAM() = 0;
	
	// extended trigger user methods
	
protected:
	SmartACE::SmartMutex mutex;
	SmartACE::SmartSemaphore sema;
	int on_execute();

	class TriggerEnumerators {
	public:
		enum ENUM {
			UNDEFINED_TRIGGER_ACTION
			, COMMMANIPULATOROBJECTS_MANIPULATORPARAMETER_CLEAR_PCS
			, COMMMANIPULATOROBJECTS_MANIPULATORPARAMETER_MOVE_CIRCULAR
			, COMMMANIPULATOROBJECTS_MANIPULATORPARAMETER_MOVE_LINEAR
			, COMMMANIPULATOROBJECTS_MANIPULATORPARAMETER_MOVE_PATH
			, COMMMANIPULATOROBJECTS_MANIPULATORPARAMETER_SET_PCS
			, COMMMANIPULATOROBJECTS_MANIPULATORPARAMETER_SET_TCP
		};
	};
	TriggerEnumerators::ENUM current_trigger_enumerator;
	std::queue<TriggerEnumerators::ENUM> trigger_queue;
	
	// active trigger CLEAR_PCS
	struct CommManipulatorObjects_ManipulatorParameter_CLEAR_PCSAttributes {
	}current_CommManipulatorObjects_ManipulatorParameter_CLEAR_PCS;
	std::queue<CommManipulatorObjects_ManipulatorParameter_CLEAR_PCSAttributes> CommManipulatorObjects_ManipulatorParameter_CLEAR_PCS_queue;
	
	// active trigger MOVE_CIRCULAR
	struct CommManipulatorObjects_ManipulatorParameter_MOVE_CIRCULARAttributes {
		double acc;
		double goalRX;
		double goalRY;
		double goalRZ;
		double goalX;
		double goalY;
		double goalZ;
		double speed;
		double viaRX;
		double viaRY;
		double viaRZ;
		double viaX;
		double viaY;
		double viaZ;
	}current_CommManipulatorObjects_ManipulatorParameter_MOVE_CIRCULAR;
	std::queue<CommManipulatorObjects_ManipulatorParameter_MOVE_CIRCULARAttributes> CommManipulatorObjects_ManipulatorParameter_MOVE_CIRCULAR_queue;
	
	// active trigger MOVE_LINEAR
	struct CommManipulatorObjects_ManipulatorParameter_MOVE_LINEARAttributes {
		double acc;
		double goalRX;
		double goalRY;
		double goalRZ;
		double goalX;
		double goalY;
		double goalZ;
		double speed;
	}current_CommManipulatorObjects_ManipulatorParameter_MOVE_LINEAR;
	std::queue<CommManipulatorObjects_ManipulatorParameter_MOVE_LINEARAttributes> CommManipulatorObjects_ManipulatorParameter_MOVE_LINEAR_queue;
	
	// active trigger MOVE_PATH
	struct CommManipulatorObjects_ManipulatorParameter_MOVE_PATHAttributes {
		double acc;
		bool overwriteSpeed;
		std::string pathID;
		double speed;
	}current_CommManipulatorObjects_ManipulatorParameter_MOVE_PATH;
	std::queue<CommManipulatorObjects_ManipulatorParameter_MOVE_PATHAttributes> CommManipulatorObjects_ManipulatorParameter_MOVE_PATH_queue;
	
	// active trigger SET_PCS
	struct CommManipulatorObjects_ManipulatorParameter_SET_PCSAttributes {
		double rX;
		double rY;
		double rZ;
		double x;
		double y;
		double z;
	}current_CommManipulatorObjects_ManipulatorParameter_SET_PCS;
	std::queue<CommManipulatorObjects_ManipulatorParameter_SET_PCSAttributes> CommManipulatorObjects_ManipulatorParameter_SET_PCS_queue;
	
	// active trigger SET_TCP
	struct CommManipulatorObjects_ManipulatorParameter_SET_TCPAttributes {
		double rX;
		double rY;
		double rZ;
		double x;
		double y;
		double z;
	}current_CommManipulatorObjects_ManipulatorParameter_SET_TCP;
	std::queue<CommManipulatorObjects_ManipulatorParameter_SET_TCPAttributes> CommManipulatorObjects_ManipulatorParameter_SET_TCP_queue;
	
private:
	// trigger internal methods
	void handleCommManipulatorObjects_ManipulatorParameter_ADD_TCPCore(const std::string &name, const double &x, const double &y, const double &z, const double &rX, const double &rY, const double &rZ);
	void handleCommManipulatorObjects_ManipulatorParameter_ADD_TOOLCore(const std::string &name, const std::list<float> &center_of_grav, const float &weight, const std::list<float> &inertia);
	void handleCommManipulatorObjects_ManipulatorParameter_CANCEL_MOTIONCore();
	void handleCommManipulatorObjects_ManipulatorParameter_CLEAR_PCSCore();
	void handleCommManipulatorObjects_ManipulatorParameter_LOAD_PROGRAMCore(const std::string &name);
	void handleCommManipulatorObjects_ManipulatorParameter_MOVE_CIRCULARCore(const double &viaX, const double &viaY, const double &viaZ, const double &viaRX, const double &viaRY, const double &viaRZ, const double &goalX, const double &goalY, const double &goalZ, const double &goalRX, const double &goalRY, const double &goalRZ, const double &acc, const double &speed);
	void handleCommManipulatorObjects_ManipulatorParameter_MOVE_LINEARCore(const double &goalX, const double &goalY, const double &goalZ, const double &goalRX, const double &goalRY, const double &goalRZ, const double &acc, const double &speed);
	void handleCommManipulatorObjects_ManipulatorParameter_MOVE_PATHCore(const std::string &pathID, const bool &overwriteSpeed, const double &acc, const double &speed);
	void handleCommManipulatorObjects_ManipulatorParameter_SET_ACTIVE_TCPCore(const std::string &name);
	void handleCommManipulatorObjects_ManipulatorParameter_SET_ACTIVE_TOOLCore(const std::string &name);
	void handleCommManipulatorObjects_ManipulatorParameter_SET_PCSCore(const double &x, const double &y, const double &z, const double &rX, const double &rY, const double &rZ);
	void handleCommManipulatorObjects_ManipulatorParameter_SET_TCPCore(const double &x, const double &y, const double &z, const double &rX, const double &rY, const double &rZ);
	void handleCommManipulatorObjects_ManipulatorParameter_START_FREEDRIVECore();
	void handleCommManipulatorObjects_ManipulatorParameter_START_PROGRAMCore();
	void handleCommManipulatorObjects_ManipulatorParameter_STOP_FREEDRIVECore();
	void handleCommManipulatorObjects_ManipulatorParameter_STOP_PROGRAMCore();
	
	// extended trigger internal methods 
};

#endif // _TRIGGERHANDLERCORE_HH
