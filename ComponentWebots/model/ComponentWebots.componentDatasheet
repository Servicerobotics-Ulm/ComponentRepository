ComponentDatasheet ComponentWebots
{
	BaseURI "http://www.servicerobotik-ulm.de"
	ShortDescription "

This component starts the [Webots](https://cyberbotics.com) simulator.
 
If another webots simulator is already running, this component will ask to end it first before starting the new one, because two simulations could make the computer very slow.
 
Edit the system model *.systemParam file to change which world file is loaded by webots in this system.

Example:

```
    ComponentParameterInstance ComponentWebots refinesParamStruct ComponentWebots {
        ParameterRefinement General{
            WorldPath = \"/the/path/to/my/folder/MyWorldName.wbt\"
		    isEditorPresent = false
        }
    }
```
### Editor

The Editor can add, move, change and delete Locations, Stations or Waypoints. The Editor can show a map and the position and path of simulated or real mobile robots in the simulation.  

To turn on the editor:
* in system > model > *.systemParam, change the parameter 'isEditorPresent = true'
* in system > model > componentArch, connect the port from ComponentWebots to ComponentKB (if you use Locations/Stations) and/or ComponentNavigationGraph (if you use Waypoints/Connections) (to unhide ports in the diagram, click on the component, wait, a menu appears)
* system > run code generation 
* add the following lines to the world file:

```
Editor {
}
```

The Editor will add/use these Groups in the [Scene Tree](https://cyberbotics.com/doc/guide/the-scene-tree):

```
DEF Locations Group
DEF Stations Group
DEF Waypoints Group
DEF WaypointConnections Group
DEF MobileRobotsPoses
```

(if you don't see the Scene Tree on the left side of Webots, press <kbd>CTRL</kbd>+<kbd>J</kbd> to reset the layout)
 
A **Location** is shown by a cross on the floor. A mobile robot can find a path to a goal Location by using its map and avoid obstacles by using its sensors.

To add an Location:
* double click on the Group 'Locations'
* click on 'children'
* right-click 'Add New'
* find 'Location' or select it from 'PROTO nodes (Current Project)'

Double click on the newly added Location, enter an unique name.

To move an Location:
* click on the cross, press <kdb>shift</kdb> while moving it with the mouse [(moving a solid object)](https://cyberbotics.com/doc/guide/the-3d-window#moving-a-solid-object)
* to rotate it, use the blue curved arrow
* or edit its translation/rotation values in the Scene Tree

Fields of the Location:
* *name* : the name of the Location
* *translation* : (x y z) coordinates in meters, z should be 0 (up) 
* *rotation* : (0 0 1 angle) = rotate around (0 0 1) axis (up) by angle radians  
* *radius* : robot will move to the Location until its distance is less than double this value in meters
* *smallerRadius* : after *radius* distance is reached and if *smallerRadius* is greater than zero then move again to *smallerRadius* distance
* *waypointId* : If this number is 0 or greater, generate a Waypoint with this *waypointId* and at same position than this Location. If this Location is moved, the generated Waypoint is moved too. 

A **Station** can be
* OPC_UA_Station
* RollerConveyorStation
* A-Frame
* InclinedShelf
* CrateStation

Fields of the Station:
* *name* : The name of the Station. OPC_UA_Station and RollerConveyorStation should have a positive number as a name.
* *Locations* : A list of Locations relative to this Station, e.g. translation 1 2 0 means 1 meter forward and 2 meters left and 0 meters upwards than this station. Must have at least one Location (if a robot goes to a station, it uses the first Location of that station). 
* *data* : These additional data strings of the Station are automatically written into the knowledge base. 
* *port* : (OPC_UA_Station only) Default port for OPC UA communication is 4840. Each OPC_UA_Station must have an different port number e.g. 4840 4841 ... [List](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers). port -1 disables communication. Changing the port restarts the OPC UA program.

To select a Location of a Station in the graphics window, click on the Location twice: the first click selects the Station, the second one the Location.

**Waypoints** can be connected by one-way **WaypointConnections**. Mobile robots can travel on these connections between waypoints, avoiding other robots. Robots can use intersections of two connections too. Connections are one-way only, e.g. if there is a connection from A to B, there can't be a direct connection from B to A. A selected Waypoint is red if it is too close to other Waypoints. The length of a connection can be counted by the green arrow stripes: one dark green stripe each meter. (The gray floor tiles in Lab/THU worlds have exactly 0.5 meter size) 

Keys used in the graphics window of Webots:
* <kbd>Insert</kbd> or <kbd>+</kbd> : create a new Waypoint, connect it to the old selected Waypoint if possible
* <kbd>Del</kbd> or <kbd>-</kbd> : delete the selected Waypoint or WaypointConnection
* <kbd>*</kbd> : while pressing this key and selecting a new Waypoint, a new connection from the old selected Waypoint to the new one is created
* <kbd>/</kbd> : while pressing this key and selecting a Waypoint or WaypointConnection, the defaultWaypointWidth of the Editor is applied to it
* <kbd>space</kbd> : send changes in Waypoints or WaypointsConnections to the navigation system (not required for changes of Locations or Stations)


Fields of the Editor:
* *defaultWaypointWidth* : The diameter of newly added Waypoints or the width of newly added WaypointConnections (in meters). To apply this value to an existing Waypoint/WaypointConnection, select it while pressing the <kbd>/</kbd> key.
* *showWaypoints* : if set to false, all Waypoints and WaypointConnections are invisible
* *showMobileRobotsPoses* : can be set to show the position and movement of real or simulated robots (see below)
* *mapWidth* / *mapHeight* : the size of the map in pixels (pixels are the points of an image, in this case a 5cm x 5cm part of a map)
* *maps* : a numbered list of maps
* *mapNumber* : shows this map if the number is in *maps* (below is a picture of a map: blue pixels show the area where the robot center point can't go)

![EditorMap](./textures/EditorMap.png)

To enable the **map**, the parameter *mapWidth* and *mapHeight* must be added to the *.wbt file:

```
Editor {
  mapWidth 1000
  mapHeight 400
}
```

If a system is started with wrong or missing parameters, the map can't be shown (it is not possible to change a Webots Display size at runtime), and ComponentWebots will print an error message showing how to add the correct parameters in the *.wbt file.

**MobileRobotsPoses**
* A green cross on the floor shows the localisation position of the robot (using a map, cameras/lidar etc.).
* 10 blue triangles on the floor shows where the robot is moving to in 0.5 seconds, 1 second, 1.5 seconds ... 5 seconds.
* A red cross on the floor shows the odometry position (using only the wheel rotations).
* A simple transparent model with of a real robot is shown in the simulation. The real robots Larry/Robotino/Pioneer component name must start with ComponentRMPBaseServer/ComponentRobotinoBaseServer/SmartPioneerBaseServer. The middle part of the component can be any string, e.g. '_Larry'. If at the end of the component name is '_0' or '_1' or  ... '_9', that red number is shown on top of the model.      

Be careful if you delete things during runtime. Deleting a OPC_UA_Station during runtime could crash, better stop the simulation, delete the station by using the Scene Tree on the left side of Webots, and start the simulation again. Don't use the Scene Tree to delete a waypoint/connection/location. It is save to delete these during runtime by selecting it and pressing the <kbd>-<kbd> in the graphical window.

If you save a world with Larry, sometimes it's robot arm pose will be reset. To fix this bug, copy from an old world file with Larry the 'hidden' positions/rotations of Larry to the actual one. 

#### How to install Webots in Linux (Ubuntu 20.04)

if webots was already installed, deinstall the old version first:

```
sudo dpkg -r webots
```

go to [https://cyberbotics.com/](https://cyberbotics.com/)

click on 'Download', download [webots_2022a_amd64.deb](https://github.com/cyberbotics/webots/releases/download/R2022a/webots_2022a_amd64.deb) into your Downloads-folder, then do:

```
sudo apt install ~/Downloads/webots_2022a_amd64.deb
```

Add to your ~/.profile:

```
export WEBOTS_HOME=/usr/local/webots
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$WEBOTS_HOME/lib/controller
```

#### Add Webots library and include path to an component project

Add to component's smartsoft/CMakeLists.txt the following lines:

```
INCLUDE_DIRECTORIES($ENV{WEBOTS_HOME}/include/controller/cpp)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} $ENV{WEBOTS_HOME}/lib/controller/libCppController.so)
```

Then do:
- right click on Component in Project Explorer
- properties
- expand 'C/C++ General'
- Paths and Symbols
- includes
- GNU C++
- Add...<br>
  <code>${WEBOTS_HOME}/include/controller/cpp</code>
- rebuild index (e.g. by closing and opening this project)

#### Other Webots components

- [ComponentWebotsMobileRobot](../ComponentWebotsMobileRobot)
- [ComponentWebots2DLidar](../ComponentWebots2DLidar)
- [ComponentWebots3DCamera](../ComponentWebots3DCamera)
- [ComponentWebotsURServer](../ComponentWebotsURServer)
- [ComponentWebotsPTUServer](../ComponentWebotsPTUServer)
- [ComponentWebotsConveyorBeltOpcua](../ComponentWebotsConveyorBeltOpcua)
- [ComponentWebotsMpsDocking](../ComponentWebotsMpsDocking)

#### Webots in the Virtual machine

It is best to start the virtual machine with VMWare Player in Windows. [[1]](https://www.cyberbotics.com/doc/guide/general-bugs#virtualization)
It was tested with VMWare Workstation Player 15 (both non-commercial and PRO version).

You need at least 8 MB Ram and a good graphics card on your computer.
In the settings of the virtual machine, give it at least 4 GB Ram, 512 MB graphics memory and turn on graphics card acceleration. OpenGl is required by webots to run fast.

If your computer has not a very good graphics card, webots may run slowly in the virtual machine. The simulation speed should be near to '1.00x' at the top of the webots window. If it is below, you can speed things up: 
* webots window, at the left side is the Scene Tree, first entry is WorldInfo, double click on it, it expands, now click on basicTimeStep, double the value from 32 to 64 or again to 128. This will speed up the simulation but makes it less accurate as changes are done less frequently. [[2]](https://cyberbotics.com/doc/guide/the-scene-tree) [[3]](https://www.cyberbotics.com/doc/reference/glossary)
* you can reduce here the value FPS too (frames per second, how often graphics is done)
* turn off/on graphics rendering by pressing the cube button or pressing CTRL+4

##### Shared Folders

If you want to share files among virtual machine and the host computer, enable the shared folders [[5]](https://www.vmware.com/support/ws5/doc/ws_running_shared_folders.html). If it does not work, execute this command in the virtual machine (don't add this to an login-script):


```
sudo vmhgfs-fuse .host:/ /mnt/hgfs/ -o allow_other -o uid=1000
```

##### Gazebo in the virtual machine

If you want to start Gazebo directly from the virtual machine's console, do the following line first:

```
export SVGA_VGPU10=0
```
"
	DatasheetProperty Supplier {
		value "Servicerobotics Ulm"
	}
	DatasheetProperty Homepage {
		value "https://wiki.servicerobotik-ulm.de/directory:collection"
	}
	DatasheetProperty Purpose {
		value "Start the Webots simulator."
	}
}
