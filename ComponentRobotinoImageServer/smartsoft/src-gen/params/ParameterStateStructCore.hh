//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter settings
		 */
		class settingsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug_info;
		
		public:
			// default constructor
			settingsType() {
				debug_info = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug_info() const { return debug_info; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "settings(";
				os << "debug_info = " << debug_info << ", ";
				os << ")\n";
			}
			
		}; // end class settingsType
		
		/**
		 * Definition of Parameter hardware
		 */
		class hardwareType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug_info;
			std::string host;
		
		public:
			// default constructor
			hardwareType() {
				debug_info = false;
				host = "127.0.0.1";
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug_info() const { return debug_info; }
			inline std::string getHost() const { return host; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "hardware(";
				os << "debug_info = " << debug_info << ", ";
				os << "host = " << host << ", ";
				os << ")\n";
			}
			
		}; // end class hardwareType
		
		/**
		 * Definition of Parameter hardware_properties
		 */
		class hardware_propertiesType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			unsigned int height;
			unsigned int width;
		
		public:
			// default constructor
			hardware_propertiesType() {
				height = 600;
				width = 800;
			}
		
			/**
			 * here are the public getters
			 */
			inline unsigned int getHeight() const { return height; }
			inline unsigned int getWidth() const { return width; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "hardware_properties(";
				os << "height = " << height << ", ";
				os << "width = " << width << ", ";
				os << ")\n";
			}
			
		}; // end class hardware_propertiesType
		
		/**
		 * Definition of Parameter push_newest
		 */
		class push_newestType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug_info;
		
		public:
			// default constructor
			push_newestType() {
				debug_info = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug_info() const { return debug_info; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "push_newest(";
				os << "debug_info = " << debug_info << ", ";
				os << ")\n";
			}
			
		}; // end class push_newestType
		
		/**
		 * Definition of Parameter push_timed
		 */
		class push_timedType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug_info;
		
		public:
			// default constructor
			push_timedType() {
				debug_info = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug_info() const { return debug_info; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "push_timed(";
				os << "debug_info = " << debug_info << ", ";
				os << ")\n";
			}
			
		}; // end class push_timedType
		
		/**
		 * Definition of Parameter sensor_pose
		 */
		class sensor_poseType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double azimuth;
			double elevation;
			double roll;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			sensor_poseType() {
				azimuth = 0;
				elevation = 0;
				roll = 0;
				x = 0;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAzimuth() const { return azimuth; }
			inline double getElevation() const { return elevation; }
			inline double getRoll() const { return roll; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "sensor_pose(";
				os << "azimuth = " << azimuth << ", ";
				os << "elevation = " << elevation << ", ";
				os << "roll = " << roll << ", ";
				os << "x = " << x << ", ";
				os << "y = " << y << ", ";
				os << "z = " << z << ", ";
				os << ")\n";
			}
			
		}; // end class sensor_poseType
		
		/**
		 * Definition of Parameter base
		 */
		class baseType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double azimuth;
			double elevation;
			bool on_base;
			bool on_ptu;
			double roll;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			baseType() {
				azimuth = 0;
				elevation = 0;
				on_base = false;
				on_ptu = false;
				roll = 0;
				x = 0;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAzimuth() const { return azimuth; }
			inline double getElevation() const { return elevation; }
			inline bool getOn_base() const { return on_base; }
			inline bool getOn_ptu() const { return on_ptu; }
			inline double getRoll() const { return roll; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "base(";
				os << "azimuth = " << azimuth << ", ";
				os << "elevation = " << elevation << ", ";
				os << "on_base = " << on_base << ", ";
				os << "on_ptu = " << on_ptu << ", ";
				os << "roll = " << roll << ", ";
				os << "x = " << x << ", ";
				os << "y = " << y << ", ";
				os << "z = " << z << ", ";
				os << ")\n";
			}
			
		}; // end class baseType
		
		/**
		 * Definition of Parameter Image
		 */
		class ImageType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug_info;
			std::string smart_format;
			float valid_time_in_sec;
		
		public:
			// default constructor
			ImageType() {
				debug_info = false;
				smart_format = "yuv422";
				valid_time_in_sec = 1.0;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug_info() const { return debug_info; }
			inline std::string getSmart_format() const { return smart_format; }
			inline float getValid_time_in_sec() const { return valid_time_in_sec; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Image(";
				os << "debug_info = " << debug_info << ", ";
				os << "smart_format = " << smart_format << ", ";
				os << "valid_time_in_sec = " << valid_time_in_sec << ", ";
				os << ")\n";
			}
			
		}; // end class ImageType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	ImageType Image;
	baseType base;
	hardwareType hardware;
	hardware_propertiesType hardware_properties;
	push_newestType push_newest;
	push_timedType push_timed;
	sensor_poseType sensor_pose;
	settingsType settings;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	ImageType getImage() const {
		return Image;
	}
	baseType getBase() const {
		return base;
	}
	hardwareType getHardware() const {
		return hardware;
	}
	hardware_propertiesType getHardware_properties() const {
		return hardware_properties;
	}
	push_newestType getPush_newest() const {
		return push_newest;
	}
	push_timedType getPush_timed() const {
		return push_timed;
	}
	sensor_poseType getSensor_pose() const {
		return sensor_pose;
	}
	settingsType getSettings() const {
		return settings;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		Image.to_ostream(os);
		base.to_ostream(os);
		hardware.to_ostream(os);
		hardware_properties.to_ostream(os);
		push_newest.to_ostream(os);
		push_timed.to_ostream(os);
		sensor_pose.to_ostream(os);
		settings.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["Image"] = nlohmann::json {
			{"debug_info" , getImage().getDebug_info()},
			{"smart_format" , getImage().getSmart_format()},
			{"valid_time_in_sec" , getImage().getValid_time_in_sec()}
		};
		param["base"] = nlohmann::json {
			{"azimuth" , getBase().getAzimuth()},
			{"elevation" , getBase().getElevation()},
			{"on_base" , getBase().getOn_base()},
			{"on_ptu" , getBase().getOn_ptu()},
			{"roll" , getBase().getRoll()},
			{"x" , getBase().getX()},
			{"y" , getBase().getY()},
			{"z" , getBase().getZ()}
		};
		param["hardware"] = nlohmann::json {
			{"debug_info" , getHardware().getDebug_info()},
			{"host" , getHardware().getHost()}
		};
		param["hardware_properties"] = nlohmann::json {
			{"height" , getHardware_properties().getHeight()},
			{"width" , getHardware_properties().getWidth()}
		};
		param["push_newest"] = nlohmann::json {
			{"debug_info" , getPush_newest().getDebug_info()}
		};
		param["push_timed"] = nlohmann::json {
			{"debug_info" , getPush_timed().getDebug_info()}
		};
		param["sensor_pose"] = nlohmann::json {
			{"azimuth" , getSensor_pose().getAzimuth()},
			{"elevation" , getSensor_pose().getElevation()},
			{"roll" , getSensor_pose().getRoll()},
			{"x" , getSensor_pose().getX()},
			{"y" , getSensor_pose().getY()},
			{"z" , getSensor_pose().getZ()}
		};
		param["settings"] = nlohmann::json {
			{"debug_info" , getSettings().getDebug_info()}
		};
	
		
		return param.dump();
	}
};

#endif
