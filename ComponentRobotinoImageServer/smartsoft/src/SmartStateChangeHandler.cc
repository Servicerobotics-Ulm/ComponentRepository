//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//  Copyright (C) 2010 Matthias Lutz
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

#include "SmartStateChangeHandler.hh"
#include "ComponentRobotinoImageServer.hh"

#include <iostream>

// Called when a substate is entered
void SmartStateChangeHandler::handleEnterState(const std::string & substate) throw()
{
    std::cout<<"handleEnterState: "<<substate<<std::endl;
	if (substate == "nonneutral") {
		if (!COMP->robotinoAPITask->startCaptureMode()) {
			std::cerr << "Error: Capture Mode cannot be started.\n";
		}else{
			std::cout << "Capture Mode started.\n";
		}
	}
	if (substate == "pushimage"){
//		COMP->imagePushTimedServer->start();
//		std::cout << "Push Timed started.\n";
	}

}

// Called when a substate is left
void SmartStateChangeHandler::handleQuitState(const std::string & substate) throw()
{
	std::cout<<"handleQuitState: "<<substate<<std::endl;
	if (substate == "nonneutral") {
		if (!COMP->robotinoAPITask->stopCaptureMode()) {
			std::cerr << "Error: Capture Mode cannot be stopped.\n";
		}
	}
	if (substate == "pushimage"){
//		COMP->imagePushTimedServer->stop();
//		std::cout << "Push Timed stopped.\n";
	}

}
