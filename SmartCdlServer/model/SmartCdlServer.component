/**
 * 	The SmartCdlServer is based on the Curvature Distance Lookup (CDL) algorithm for fast local obstacle avoidance.

	The CDL algorithm is an improvement of the dynamic window approach. It considers the dynamics and kinematics of the robot, 
	as well as its polygonal shape. It consumes raw laser scans or other sensor perceptions transformed into occupancy grids. 
	The basic idea is that a robot moves along different curvatures (v, w combinations) which represent trajectories built up 
	by circular arcs. The huge number of possible v, w combinations is reduced based on the observation that only a few curvatures are 
	safely selectable given the current state and kinematics of the robot. Curvatures leading to a collision are discarded. 
	High performance advantages are achieved by precalculating lookup tables. The final selection along the remaining admissible v, w combinations 
	is done by an objective function, which trades off speed, goal-directedness and remaining distance until collision.

	This objective function together with its weighting factors build different strategies, such as reactive driving, 
	joystick navigation, rotating or approaching goals. The strategies are used for the selection of the best-fitting curvature with 
	respect to the purpose of the strategy. Example strategies are passing over intermediate waypoints, approaching a goal given by a 
	path-planner or following a person.

	The SmartCdlServer will read files which contain precalculated lookup tables generated by cdlCalculate (included in SmartSoft). 
	They contain the kinematics of the robot.

	SmartCdlServer supports differential drive, synchro drive and omnidrive if neglecting lateral velocity.

	Note: This component is used in Tutorials (e.g. Lesson 1).

	See also:
	Christian Schlegel. Fast local obstacle avoidance under kinematic and dynamic constraints for a mobile robot. 
	In Proc. Int. Conf. on Intelligent Robots and Systems (IROS), p. 594-599, Victoria, Canada, 1998.
 */
ComponentDefinition SmartCdlServer 
{
	
	CoordinationSlavePort CoordinationPort implements CommNavigationObjects.CdlCoordinationService {

		PrivateOperationMode moveRobot;
		
		PublicOperationMode CommNavigationObjects.CdlStates.MoveRobot {
			activates ( moveRobot )
		}
		
		with blockedEvent realizedBy RobotBlockedEventServer
		with goalEvent realizedBy GoalEventServer
		SkillRealizationsRef MovementMod2
	}
	
	InputPort LaserClient implements CommBasicObjects.LaserService { }
	InputPort LaserClient2 implements CommBasicObjects.LaserService { }
	InputPort PlannerClient implements CommNavigationObjects.PlannerGoalService { }
	InputPort NavVelSendServer implements CommNavigationObjects.NavigationVelocityService { }
	InputPort TrackingClient implements CommTrackingObjects.TrackingService { }
	InputPort IRClient implements CommNavigationObjects.IRService { }
	InputPort PathNavigationGoalClient implements CommRobotinoObjects.PathNavigationGoalService { }
	InputPort BaseStateClient implements CommBasicObjects.BaseStateService { }
	
	Activity CdlTask {
		InputPortLink LaserClient {
			oversamplingOk undersamplingOk
		}
		InputPortLink PlannerClient {
			optional oversamplingOk undersamplingOk
		}
		InputPortLink NavVelSendServer {
			optional oversamplingOk undersamplingOk
		}
		// several optional input ports
		InputPortLink TrackingClient { optional oversamplingOk undersamplingOk } 
		InputPortLink LaserClient2 { optional oversamplingOk undersamplingOk } 
		InputPortLink IRClient { optional oversamplingOk undersamplingOk }
		InputPortLink PathNavigationGoalClient { optional oversamplingOk undersamplingOk }
		InputPortLink BaseStateClient { optional oversamplingOk undersamplingOk }
		ActivationConstraints {
			configurable=true minActFreq=5.0 Hz maxActFreq=40.0 Hz
		}
		DefaultTrigger PeriodicTimer 20.0 Hz;
		OperationModeBinding CoordinationPort.moveRobot;
	}
	
	OutputPort NavVelSendClient implements CommNavigationObjects.NavigationVelocityService realizedBy CdlTask { 
	}
	OutputPort GoalEventServer implements CommNavigationObjects.GoalEventService realizedBy CdlTask { }
	OutputPort RobotBlockedEventServer implements CommNavigationObjects.RobotBlockedEventService realizedBy CdlTask { } 
	
	ComponentParameters SmartCdlServerParams slave CoordinationPort;
}
