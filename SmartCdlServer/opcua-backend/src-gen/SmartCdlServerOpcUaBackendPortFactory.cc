//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartCdlServerOpcUaBackendPortFactory.hh"

// include all potentially required pattern implementations
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/PushClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/EventClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QClientOPCUA.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/SendClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QueryClient.hpp>

#include <SeRoNetSDK/SeRoNet/OPCUA/Server/PushServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/EventServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/SendServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/QueryServer.hpp>

// include referenced CommunicationObject SeRoNetSDK self description implementations
#include "CommNavigationObjectsOpcUa/CommPlannerGoalOpcUa.hh"
#include "CommNavigationObjectsOpcUa/CommCdlGoalEventResultOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommNavigationVelocityOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommMobileIRScanOpcUa.hh"
#include "CommNavigationObjectsOpcUa/CommCdlRobotBlockedEventParameterOpcUa.hh"
#include "CommNavigationObjectsOpcUa/CommCdlGoalEventParameterOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommMobileLaserScanOpcUa.hh"
#include "CommNavigationObjectsOpcUa/CommCdlRobotBlockedEventResultOpcUa.hh"
#include "CommRobotinoObjectsOpcUa/CommPathNavigationGoalOpcUa.hh"
#include "CommTrackingObjectsOpcUa/CommTrackingGoalOpcUa.hh"
#include "CommNavigationObjectsOpcUa/CommCdlRobotBlockedStateOpcUa.hh"
#include "CommNavigationObjectsOpcUa/CdlGoalEventStateOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommBaseStateOpcUa.hh"

// create a static instance of the OpcUaBackendPortFactory
static SmartCdlServerOpcUaBackendPortFactory OpcUaBackendPortFactory;

SmartCdlServerOpcUaBackendPortFactory::SmartCdlServerOpcUaBackendPortFactory()
{  
	componentImpl = 0;
	SmartCdlServer::instance()->addPortFactory("OpcUa_SeRoNet", this);
}

SmartCdlServerOpcUaBackendPortFactory::~SmartCdlServerOpcUaBackendPortFactory()
{  }

void SmartCdlServerOpcUaBackendPortFactory::initialize(SmartCdlServer *component, int argc, char* argv[])
{
	componentImpl = new SeRoNet::Utils::Component(component->connections.component.name);
}

int SmartCdlServerOpcUaBackendPortFactory::onStartup()
{
	if (!component_thread.joinable()) {
    	component_thread = std::thread(&SmartCdlServerOpcUaBackendPortFactory::task_execution, this);
    	return 0;
    }
	return -1;
}

Smart::IPushClientPattern<CommNavigationObjects::CommPlannerGoal> * SmartCdlServerOpcUaBackendPortFactory::createPlannerClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommNavigationObjects::CommPlannerGoal>(componentImpl);
}

Smart::IPushClientPattern<CommBasicObjects::CommMobileIRScan> * SmartCdlServerOpcUaBackendPortFactory::createIRClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommBasicObjects::CommMobileIRScan>(componentImpl);
}

Smart::IPushClientPattern<CommBasicObjects::CommBaseState> * SmartCdlServerOpcUaBackendPortFactory::createBaseStateClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommBasicObjects::CommBaseState>(componentImpl);
}

Smart::ISendClientPattern<CommBasicObjects::CommNavigationVelocity> * SmartCdlServerOpcUaBackendPortFactory::createNavVelSendClient()
{
	return new SeRoNet::OPCUA::Client::SendClient<CommBasicObjects::CommNavigationVelocity>(componentImpl);
}

Smart::IPushClientPattern<CommRobotinoObjects::CommPathNavigationGoal> * SmartCdlServerOpcUaBackendPortFactory::createPathNavigationGoalClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommRobotinoObjects::CommPathNavigationGoal>(componentImpl);
}

Smart::IPushClientPattern<CommBasicObjects::CommMobileLaserScan> * SmartCdlServerOpcUaBackendPortFactory::createLaserClient2()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommBasicObjects::CommMobileLaserScan>(componentImpl);
}

Smart::IPushClientPattern<CommTrackingObjects::CommTrackingGoal> * SmartCdlServerOpcUaBackendPortFactory::createTrackingClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommTrackingObjects::CommTrackingGoal>(componentImpl);
}

Smart::IPushClientPattern<CommBasicObjects::CommMobileLaserScan> * SmartCdlServerOpcUaBackendPortFactory::createLaserClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommBasicObjects::CommMobileLaserScan>(componentImpl);
}


Smart::IEventServerPattern<CommNavigationObjects::CommCdlRobotBlockedEventParameter, CommNavigationObjects::CommCdlRobotBlockedEventResult, CommNavigationObjects::CommCdlRobotBlockedState> * SmartCdlServerOpcUaBackendPortFactory::createRobotBlockedEventServer(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommNavigationObjects::CommCdlRobotBlockedEventParameter, CommNavigationObjects::CommCdlRobotBlockedEventResult, CommNavigationObjects::CommCdlRobotBlockedState>> robotBlockedEventServerEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<CommNavigationObjects::CommCdlRobotBlockedEventParameter, CommNavigationObjects::CommCdlRobotBlockedEventResult, CommNavigationObjects::CommCdlRobotBlockedState>(componentImpl, serviceName, robotBlockedEventServerEventTestHandler);
}

Smart::ISendServerPattern<CommBasicObjects::CommNavigationVelocity> * SmartCdlServerOpcUaBackendPortFactory::createNavVelSendServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::SendServer<CommBasicObjects::CommNavigationVelocity>(componentImpl, serviceName);
}

Smart::IEventServerPattern<CommNavigationObjects::CommCdlGoalEventParameter, CommNavigationObjects::CommCdlGoalEventResult, CommNavigationObjects::CdlGoalEventState> * SmartCdlServerOpcUaBackendPortFactory::createGoalEventServer(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommNavigationObjects::CommCdlGoalEventParameter, CommNavigationObjects::CommCdlGoalEventResult, CommNavigationObjects::CdlGoalEventState>> goalEventServerEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<CommNavigationObjects::CommCdlGoalEventParameter, CommNavigationObjects::CommCdlGoalEventResult, CommNavigationObjects::CdlGoalEventState>(componentImpl, serviceName, goalEventServerEventTestHandler);
}


int SmartCdlServerOpcUaBackendPortFactory::task_execution()
{
	componentImpl->run();
	return 0;
}

int SmartCdlServerOpcUaBackendPortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	// stop component-internal infrastructure
	componentImpl->stopRunning();
	// wait on component thread to exit
	if (component_thread.joinable()) {
		// FIXME: don't wait infinetly (use timeoutTime here)
    	component_thread.join();
    }
	return 0;
}

void SmartCdlServerOpcUaBackendPortFactory::destroy()
{
	// clean-up component's internally used resources
	delete componentImpl;
}
