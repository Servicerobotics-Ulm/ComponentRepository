//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <list>
#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter Settings
		 */
		class SettingsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			unsigned int apacheServerPort;
			std::string map;
			float orientation;
			float rotation;
			float scale;
			bool useAuthentication;
			bool useDestinationRequest;
			bool useImuData;
			bool useLocationRequestor;
			bool useNavigationInstructions;
			bool useRasterMapRequestor;
			unsigned int workerServerPort;
			std::string wwwRoot;
			unsigned int xOffset;
			unsigned int yOffset;
		
		public:
			// default constructor
			SettingsType() {
				apacheServerPort = 8082;
				map = "comland-bw.png";
				orientation = 0.0;
				rotation = 0.0;
				scale = 39.736842105;
				useAuthentication = false;
				useDestinationRequest = true;
				useImuData = false;
				useLocationRequestor = true;
				useNavigationInstructions = false;
				useRasterMapRequestor = false;
				workerServerPort = 8081;
				wwwRoot = "/var/www/fiona-example";
				xOffset = 514;
				yOffset = 268;
			}
		
			/**
			 * here are the public getters
			 */
			inline unsigned int getApacheServerPort() const { return apacheServerPort; }
			inline std::string getMap() const { return map; }
			inline float getOrientation() const { return orientation; }
			inline float getRotation() const { return rotation; }
			inline float getScale() const { return scale; }
			inline bool getUseAuthentication() const { return useAuthentication; }
			inline bool getUseDestinationRequest() const { return useDestinationRequest; }
			inline bool getUseImuData() const { return useImuData; }
			inline bool getUseLocationRequestor() const { return useLocationRequestor; }
			inline bool getUseNavigationInstructions() const { return useNavigationInstructions; }
			inline bool getUseRasterMapRequestor() const { return useRasterMapRequestor; }
			inline unsigned int getWorkerServerPort() const { return workerServerPort; }
			inline std::string getWwwRoot() const { return wwwRoot; }
			inline unsigned int getXOffset() const { return xOffset; }
			inline unsigned int getYOffset() const { return yOffset; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Settings(";
				os << "apacheServerPort = " << apacheServerPort; os << ", ";
				os << "map = " << map; os << ", ";
				os << "orientation = " << orientation; os << ", ";
				os << "rotation = " << rotation; os << ", ";
				os << "scale = " << scale; os << ", ";
				os << "useAuthentication = " << useAuthentication; os << ", ";
				os << "useDestinationRequest = " << useDestinationRequest; os << ", ";
				os << "useImuData = " << useImuData; os << ", ";
				os << "useLocationRequestor = " << useLocationRequestor; os << ", ";
				os << "useNavigationInstructions = " << useNavigationInstructions; os << ", ";
				os << "useRasterMapRequestor = " << useRasterMapRequestor; os << ", ";
				os << "workerServerPort = " << workerServerPort; os << ", ";
				os << "wwwRoot = " << wwwRoot; os << ", ";
				os << "xOffset = " << xOffset; os << ", ";
				os << "yOffset = " << yOffset;
				os << ")\n";
			}
			
		}; // end class SettingsType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	SettingsType Settings;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	SettingsType getSettings() const {
		return Settings;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		Settings.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["Settings"] = nlohmann::json {
			{"apacheServerPort" , getSettings().getApacheServerPort()},
			{"map" , getSettings().getMap()},
			{"orientation" , getSettings().getOrientation()},
			{"rotation" , getSettings().getRotation()},
			{"scale" , getSettings().getScale()},
			{"useAuthentication" , getSettings().getUseAuthentication()},
			{"useDestinationRequest" , getSettings().getUseDestinationRequest()},
			{"useImuData" , getSettings().getUseImuData()},
			{"useLocationRequestor" , getSettings().getUseLocationRequestor()},
			{"useNavigationInstructions" , getSettings().getUseNavigationInstructions()},
			{"useRasterMapRequestor" , getSettings().getUseRasterMapRequestor()},
			{"workerServerPort" , getSettings().getWorkerServerPort()},
			{"wwwRoot" , getSettings().getWwwRoot()},
			{"xOffset" , getSettings().getXOffset()},
			{"yOffset" , getSettings().getYOffset()}
		};
	
		
		return param.dump();
	}
};

#endif
