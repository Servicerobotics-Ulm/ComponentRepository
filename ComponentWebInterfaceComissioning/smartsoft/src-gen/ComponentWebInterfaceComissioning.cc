//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ComponentWebInterfaceComissioning.hh"
#include "smartTimedTaskTrigger.h"
//FIXME: implement logging
//#include "smartGlobalLogger.hh"

// the ace port-factory is used as a default port-mapping
#include "ComponentWebInterfaceComissioningAcePortFactory.hh"

#include "SequencerEventServerEventTestHandler.hh"

// initialize static singleton pointer to zero
ComponentWebInterfaceComissioning* ComponentWebInterfaceComissioning::_componentWebInterfaceComissioning = 0;

// constructor
ComponentWebInterfaceComissioning::ComponentWebInterfaceComissioning()
{
	std::cout << "constructor of ComponentWebInterfaceComissioning\n";
	
	// set all pointer members to NULL
	//coordinationPort = NULL;
	//coordinationPort = NULL;
	dataTask = NULL;
	dataTaskTrigger = NULL;
	sendHandler = NULL;
	workerTask = NULL;
	workerTaskTrigger = NULL;
	sequencerEventServer = NULL;
	sequencerEventServerWrapper = NULL;
	sequencerEventServerEventTestHandler = nullptr; 
	sequencerSendServer = NULL;
	sequencerSendServerInputTaskTrigger = NULL;
	sequencerSendServerUpcallManager = NULL;
	sequencerSendServerInputCollector = NULL;
	stateChangeHandler = NULL;
	stateSlave = NULL;
	wiringSlave = NULL;
	param = NULL;
	
	// set default ini parameter values
	connections.component.name = "ComponentWebInterfaceComissioning";
	connections.component.initialComponentMode = "Neutral";
	connections.component.defaultScheduler = "DEFAULT";
	connections.component.useLogger = false;
	
	connections.sequencerEventServer.serviceName = "sequencerEventServer";
	connections.sequencerEventServer.roboticMiddleware = "ACE_SmartSoft";
	connections.sequencerSendServer.serviceName = "sequencerSendServer";
	connections.sequencerSendServer.roboticMiddleware = "ACE_SmartSoft";
	connections.dataTask.minActFreq = 0.0;
	connections.dataTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.dataTask.scheduler = "DEFAULT";
	connections.dataTask.priority = -1;
	connections.dataTask.cpuAffinity = -1;
	connections.workerTask.minActFreq = 0.0;
	connections.workerTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.workerTask.scheduler = "DEFAULT";
	connections.workerTask.priority = -1;
	connections.workerTask.cpuAffinity = -1;
	connections.sendHandler.prescale = 1;
	
	// initialize members of ComponentWebInterfaceComissioningROS1InterfacesExtension
	
	// initialize members of ComponentWebInterfaceComissioningROSExtension
	
	// initialize members of ComponentWebInterfaceComissioningRestInterfacesExtension
	
	// initialize members of OpcUaBackendComponentGeneratorExtension
	
	// initialize members of PlainOpcUaComponentWebInterfaceComissioningExtension
	
}

void ComponentWebInterfaceComissioning::addPortFactory(const std::string &name, ComponentWebInterfaceComissioningPortFactoryInterface *portFactory)
{
	portFactoryRegistry[name] = portFactory;
}

void ComponentWebInterfaceComissioning::addExtension(ComponentWebInterfaceComissioningExtension *extension)
{
	componentExtensionRegistry[extension->getName()] = extension;
}

SmartACE::SmartComponent* ComponentWebInterfaceComissioning::getComponentImpl()
{
	return dynamic_cast<ComponentWebInterfaceComissioningAcePortFactory*>(portFactoryRegistry["ACE_SmartSoft"])->getComponentImpl();
}

/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void ComponentWebInterfaceComissioning::setStartupFinished() {
	stateSlave->setWaitState("Alive");
	std::cout << "ComponentDefinition initialization/startup finished." << std::endl;
}




/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
Smart::StatusCode ComponentWebInterfaceComissioning::connectAndStartAllServices() {
	Smart::StatusCode status = Smart::SMART_OK;
	
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void ComponentWebInterfaceComissioning::startAllTasks() {
	// start task DataTask
	if(connections.dataTask.scheduler != "DEFAULT") {
		ACE_Sched_Params dataTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.dataTask.scheduler == "FIFO") {
			dataTask_SchedParams.policy(ACE_SCHED_FIFO);
			dataTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.dataTask.scheduler == "RR") {
			dataTask_SchedParams.policy(ACE_SCHED_RR);
			dataTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		dataTask->start(dataTask_SchedParams, connections.dataTask.cpuAffinity);
	} else {
		dataTask->start();
	}
	// start task WorkerTask
	if(connections.workerTask.scheduler != "DEFAULT") {
		ACE_Sched_Params workerTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.workerTask.scheduler == "FIFO") {
			workerTask_SchedParams.policy(ACE_SCHED_FIFO);
			workerTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.workerTask.scheduler == "RR") {
			workerTask_SchedParams.policy(ACE_SCHED_RR);
			workerTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		workerTask->start(workerTask_SchedParams, connections.workerTask.cpuAffinity);
	} else {
		workerTask->start();
	}
}

/**
 * Start all timers contained in this component
 */
void ComponentWebInterfaceComissioning::startAllTimers() {
}


Smart::TaskTriggerSubject* ComponentWebInterfaceComissioning::getInputTaskTriggerFromString(const std::string &client)
{
	if(client == "sequencerSendServer") return sequencerSendServerInputTaskTrigger;
	
	return NULL;
}


void ComponentWebInterfaceComissioning::init(int argc, char *argv[])
{
	try {
		Smart::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		// print out the actual parameters which are used to initialize the component
		std::cout << " \nComponentDefinition Initial-Parameters:\n" << COMP->getParameters() << std::endl;
		
		// initializations of ComponentWebInterfaceComissioningROS1InterfacesExtension
		
		// initializations of ComponentWebInterfaceComissioningROSExtension
		
		// initializations of ComponentWebInterfaceComissioningRestInterfacesExtension
		
		// initializations of OpcUaBackendComponentGeneratorExtension
		
		// initializations of PlainOpcUaComponentWebInterfaceComissioningExtension
		
		
		// initialize all registered port-factories
		for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
		{
			portFactory->second->initialize(this, argc, argv);
		}
		
		// initialize all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->initialize(this, argc, argv);
		}
		
		ComponentWebInterfaceComissioningPortFactoryInterface *acePortFactory = portFactoryRegistry["ACE_SmartSoft"];
		if(acePortFactory == 0) {
			std::cerr << "ERROR: acePortFactory NOT instantiated -> exit(-1)" << std::endl;
			exit(-1);
		}
		
		// this pointer is used for backwards compatibility (deprecated: should be removed as soon as all patterns, including coordination, are moved to port-factory)
		SmartACE::SmartComponent *component = dynamic_cast<ComponentWebInterfaceComissioningAcePortFactory*>(acePortFactory)->getComponentImpl();
		
		std::cout << "ComponentDefinition ComponentWebInterfaceComissioning is named " << connections.component.name << std::endl;
		
		if(connections.component.useLogger == true) {
			//FIXME: use logging
			//Smart::LOGGER->openLogFileInFolder("data/"+connections.component.name);
			//Smart::LOGGER->startLogging();
		}

		// create event-test handlers (if needed)
		sequencerEventServerEventTestHandler = std::make_shared<SequencerEventServerEventTestHandler>();
		
		// create server ports
		// TODO: set minCycleTime from Ini-file
		sequencerEventServerEventTestHandler = std::make_shared<SequencerEventServerEventTestHandler>();
		sequencerEventServer = portFactoryRegistry[connections.sequencerEventServer.roboticMiddleware]->createSequencerEventServer(connections.sequencerEventServer.serviceName, sequencerEventServerEventTestHandler);
		sequencerEventServerWrapper = new SequencerEventServerWrapper(sequencerEventServer);
		sequencerSendServer = portFactoryRegistry[connections.sequencerSendServer.roboticMiddleware]->createSequencerSendServer(connections.sequencerSendServer.serviceName);
		
		// create client ports
		
		// create InputTaskTriggers and UpcallManagers
		sequencerSendServerInputCollector = new SequencerSendServerInputCollector(sequencerSendServer);
		sequencerSendServerInputTaskTrigger = new Smart::InputTaskTrigger<CommBasicObjects::CommSkillMsg>(sequencerSendServerInputCollector);
		sequencerSendServerUpcallManager = new SequencerSendServerUpcallManager(sequencerSendServerInputCollector);
		
		// create input-handler
		sendHandler = new SendHandler(sequencerSendServer, connections.sendHandler.prescale);
		
		// create request-handlers
		
		// create state pattern
		stateChangeHandler = new SmartStateChangeHandler();
		stateSlave = new SmartACE::StateSlave(component, stateChangeHandler);
		status = stateSlave->setUpInitialState(connections.component.initialComponentMode);
		if (status != Smart::SMART_OK) std::cerr << status << "; failed setting initial ComponentMode: " << connections.component.initialComponentMode << std::endl;
		// activate state slave
		status = stateSlave->activate();
		if(status != Smart::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		wiringSlave = new SmartACE::WiringSlave(component);
		// add client port to wiring slave
		
		// create parameter slave
		param = new SmartACE::ParameterSlave(component, &paramHandler);
		
		
		// create Task DataTask
		dataTask = new DataTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.dataTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.dataTask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(dataTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				dataTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task DataTask" << std::endl;
			}
		} else if(connections.dataTask.trigger == "DataTriggered") {
			dataTaskTrigger = getInputTaskTriggerFromString(connections.dataTask.inPortRef);
			if(dataTaskTrigger != NULL) {
				dataTaskTrigger->attach(dataTask, connections.dataTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.dataTask.inPortRef << " as activation source for Task DataTask" << std::endl;
			}
		} 
		
		// create Task WorkerTask
		workerTask = new WorkerTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.workerTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.workerTask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(workerTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				workerTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task WorkerTask" << std::endl;
			}
		} else if(connections.workerTask.trigger == "DataTriggered") {
			workerTaskTrigger = getInputTaskTriggerFromString(connections.workerTask.inPortRef);
			if(workerTaskTrigger != NULL) {
				workerTaskTrigger->attach(workerTask, connections.workerTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.workerTask.inPortRef << " as activation source for Task WorkerTask" << std::endl;
			}
		} 
		
		
		// link observers with subjects
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void ComponentWebInterfaceComissioning::run()
{
	stateSlave->acquire("init");
	// startup all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onStartup();
	}
	
	// startup all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onStartup();
	}
	stateSlave->release("init");
	
	// do not call this handler within the init state (see above) as this handler internally calls setStartupFinished() (this should be fixed in future)
	compHandler.onStartup();
	
	// this call blocks until the component is commanded to shutdown
	stateSlave->acquire("shutdown");
	
	// shutdown all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onShutdown();
	}
	
	// shutdown all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onShutdown();
	}
	
	if(connections.component.useLogger == true) {
		//FIXME: use logging
		//Smart::LOGGER->stopLogging();
	}
	
	compHandler.onShutdown();
	
	stateSlave->release("shutdown");
}

// clean-up component's resources
void ComponentWebInterfaceComissioning::fini()
{
	// unlink all observers
	
	// destroy all task instances
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(dataTaskTrigger != NULL){
		dataTaskTrigger->detach(dataTask);
		delete dataTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(workerTaskTrigger != NULL){
		workerTaskTrigger->detach(workerTask);
		delete workerTask;
	}

	// destroy all input-handler
	delete sendHandler;

	// destroy InputTaskTriggers and UpcallManagers
	delete sequencerSendServerInputTaskTrigger;
	delete sequencerSendServerUpcallManager;
	delete sequencerSendServerInputCollector;

	// destroy client ports

	// destroy server ports
	delete sequencerEventServerWrapper;
	delete sequencerEventServer;
	delete sequencerSendServer;
	// destroy event-test handlers (if needed)
	sequencerEventServerEventTestHandler;
	
	// destroy request-handlers
	
	delete stateSlave;
	// destroy state-change-handler
	delete stateChangeHandler;
	
	// destroy all master/slave ports
	delete wiringSlave;
	delete param;
	

	// destroy all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->destroy();
	}

	// destroy all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->destroy();
	}
	
	// destruction of ComponentWebInterfaceComissioningROS1InterfacesExtension
	
	// destruction of ComponentWebInterfaceComissioningROSExtension
	
	// destruction of ComponentWebInterfaceComissioningRestInterfacesExtension
	
	// destruction of OpcUaBackendComponentGeneratorExtension
	
	// destruction of PlainOpcUaComponentWebInterfaceComissioningExtension
	
}

void ComponentWebInterfaceComissioning::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	SmartACE::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("ComponentWebInterfaceComissioning.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load ComponentWebInterfaceComissioning.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: ComponentWebInterfaceComissioning.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		SmartACE::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(SmartACE::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(SmartACE::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		parameter.getString("component", "initialComponentMode", connections.component.initialComponentMode);
		if(parameter.checkIfParameterExists("component", "defaultScheduler")) {
			parameter.getString("component", "defaultScheduler", connections.component.defaultScheduler);
		}
		if(parameter.checkIfParameterExists("component", "useLogger")) {
			parameter.getBoolean("component", "useLogger", connections.component.useLogger);
		}
		
		
		// load parameters for server sequencerEventServer
		parameter.getString("sequencerEventServer", "serviceName", connections.sequencerEventServer.serviceName);
		if(parameter.checkIfParameterExists("sequencerEventServer", "roboticMiddleware")) {
			parameter.getString("sequencerEventServer", "roboticMiddleware", connections.sequencerEventServer.roboticMiddleware);
		}
		// load parameters for server sequencerSendServer
		parameter.getString("sequencerSendServer", "serviceName", connections.sequencerSendServer.serviceName);
		if(parameter.checkIfParameterExists("sequencerSendServer", "roboticMiddleware")) {
			parameter.getString("sequencerSendServer", "roboticMiddleware", connections.sequencerSendServer.roboticMiddleware);
		}
		
		// load parameters for task DataTask
		parameter.getDouble("DataTask", "minActFreqHz", connections.dataTask.minActFreq);
		parameter.getDouble("DataTask", "maxActFreqHz", connections.dataTask.maxActFreq);
		parameter.getString("DataTask", "triggerType", connections.dataTask.trigger);
		if(connections.dataTask.trigger == "PeriodicTimer") {
			parameter.getDouble("DataTask", "periodicActFreqHz", connections.dataTask.periodicActFreq);
		} else if(connections.dataTask.trigger == "DataTriggered") {
			parameter.getString("DataTask", "inPortRef", connections.dataTask.inPortRef);
			parameter.getInteger("DataTask", "prescale", connections.dataTask.prescale);
		}
		if(parameter.checkIfParameterExists("DataTask", "scheduler")) {
			parameter.getString("DataTask", "scheduler", connections.dataTask.scheduler);
		}
		if(parameter.checkIfParameterExists("DataTask", "priority")) {
			parameter.getInteger("DataTask", "priority", connections.dataTask.priority);
		}
		if(parameter.checkIfParameterExists("DataTask", "cpuAffinity")) {
			parameter.getInteger("DataTask", "cpuAffinity", connections.dataTask.cpuAffinity);
		}
		// load parameters for task WorkerTask
		parameter.getDouble("WorkerTask", "minActFreqHz", connections.workerTask.minActFreq);
		parameter.getDouble("WorkerTask", "maxActFreqHz", connections.workerTask.maxActFreq);
		parameter.getString("WorkerTask", "triggerType", connections.workerTask.trigger);
		if(connections.workerTask.trigger == "PeriodicTimer") {
			parameter.getDouble("WorkerTask", "periodicActFreqHz", connections.workerTask.periodicActFreq);
		} else if(connections.workerTask.trigger == "DataTriggered") {
			parameter.getString("WorkerTask", "inPortRef", connections.workerTask.inPortRef);
			parameter.getInteger("WorkerTask", "prescale", connections.workerTask.prescale);
		}
		if(parameter.checkIfParameterExists("WorkerTask", "scheduler")) {
			parameter.getString("WorkerTask", "scheduler", connections.workerTask.scheduler);
		}
		if(parameter.checkIfParameterExists("WorkerTask", "priority")) {
			parameter.getInteger("WorkerTask", "priority", connections.workerTask.priority);
		}
		if(parameter.checkIfParameterExists("WorkerTask", "cpuAffinity")) {
			parameter.getInteger("WorkerTask", "cpuAffinity", connections.workerTask.cpuAffinity);
		}
		if(parameter.checkIfParameterExists("SendHandler", "prescale")) {
			parameter.getInteger("SendHandler", "prescale", connections.sendHandler.prescale);
		}
		
		// load parameters for ComponentWebInterfaceComissioningROS1InterfacesExtension
		
		// load parameters for ComponentWebInterfaceComissioningROSExtension
		
		// load parameters for ComponentWebInterfaceComissioningRestInterfacesExtension
		
		// load parameters for OpcUaBackendComponentGeneratorExtension
		
		// load parameters for PlainOpcUaComponentWebInterfaceComissioningExtension
		
		
		// load parameters for all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->loadParameters(parameter);
		}
		
		paramHandler.loadParameter(parameter);
	
	} catch (const SmartACE::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
