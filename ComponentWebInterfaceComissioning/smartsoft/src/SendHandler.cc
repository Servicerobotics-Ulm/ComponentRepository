//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2012 Sebastian Schmid, Alex Lotz
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------
#include "SendHandler.hh"
#include "ComponentWebInterfaceComissioning.hh"
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <strings.h>
#include <iostream>
#include <cstring>
#include <iostream>

#include "ace/INET_Addr.h"
#include "ace/SOCK_Connector.h"
#include "ace/SOCK_Stream.h"

SendHandler::SendHandler(Smart::InputSubject<CommBasicObjects::CommSkillMsg> *subject, const int &prescaleFactor)
:	SendHandlerCore(subject, prescaleFactor)
{
	std::cout << "constructor SendHandler\n";
}
SendHandler::~SendHandler() 
{
	std::cout << "destructor SendHandler\n";
}

void SendHandler::on_sequencerSendServer(const CommBasicObjects::CommSkillMsg &input)
{
	std::cout << "SmartWebInterfaceComissioning SendHandler started!" << std::endl;

		ACE_SOCK_Connector connector;
		ACE_SOCK_Stream peer;
		ACE_INET_Addr peer_addr;
		if(peer_addr.set(COMP->getGlobalState().getSettings().getApacheServerPort(), "127.0.0.1") == -1){
			std::cout << "ERROR on set!" << std::endl;
			return;
		}
		if(connector.connect (peer, peer_addr) == -1){
			std::cout << "Error on connect!" << std::endl;
		}
		char *bufferOut;
	//	int code;
	//	std::cout << "SendHandler code is " << code << std::endl;
	//	if ( code < 0){
	//		cerr << "ERROR connecting!" << endl;
	//	}
		std::string outMessage = input.getMsg();
		std::cout << "Incoming message is: '" << outMessage << "'" << std::endl;
		outMessage += '\0';
		bufferOut = new char[outMessage.length()];
		strcpy(bufferOut, outMessage.c_str());
		if(peer.send_n(bufferOut, outMessage.length()) == -1){
			std::cout << "Error on send_n!";
		}
		delete bufferOut;
		peer.close();
		std::cout << std::endl;

}
