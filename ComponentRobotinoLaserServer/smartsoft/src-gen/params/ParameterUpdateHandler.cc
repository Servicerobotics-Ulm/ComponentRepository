//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "ComponentRobotinoLaserServer.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	if(request.getParameterDataMode() == SmartACE::ParameterDataMode::NAME){
		answer = handleParametersNamed(request);
	} else {
		answer = handleParametersSequence(request);
	}
	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersNamed(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersSequence(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter RobotinoLaser_ini
		if(parameter.getBoolean("RobotinoLaser_ini", "activatePushNewest", commitState.RobotinoLaser_ini.activatePushNewest))
		{
			globalState.RobotinoLaser_ini.activatePushNewest = commitState.RobotinoLaser_ini.activatePushNewest;
		}
		if(parameter.getBoolean("RobotinoLaser_ini", "activate_safetyEventServer", commitState.RobotinoLaser_ini.activate_safetyEventServer))
		{
			globalState.RobotinoLaser_ini.activate_safetyEventServer = commitState.RobotinoLaser_ini.activate_safetyEventServer;
		}
		if(parameter.getDouble("RobotinoLaser_ini", "laserPosX", commitState.RobotinoLaser_ini.laserPosX))
		{
			globalState.RobotinoLaser_ini.laserPosX = commitState.RobotinoLaser_ini.laserPosX;
		}
		if(parameter.getDouble("RobotinoLaser_ini", "laserPosY", commitState.RobotinoLaser_ini.laserPosY))
		{
			globalState.RobotinoLaser_ini.laserPosY = commitState.RobotinoLaser_ini.laserPosY;
		}
		if(parameter.getDouble("RobotinoLaser_ini", "laserPosZ", commitState.RobotinoLaser_ini.laserPosZ))
		{
			globalState.RobotinoLaser_ini.laserPosZ = commitState.RobotinoLaser_ini.laserPosZ;
		}
		if(parameter.getDouble("RobotinoLaser_ini", "laserSafetyDist", commitState.RobotinoLaser_ini.laserSafetyDist))
		{
			globalState.RobotinoLaser_ini.laserSafetyDist = commitState.RobotinoLaser_ini.laserSafetyDist;
		}
		if(parameter.getDouble("RobotinoLaser_ini", "laserWarningSafetyDist", commitState.RobotinoLaser_ini.laserWarningSafetyDist))
		{
			globalState.RobotinoLaser_ini.laserWarningSafetyDist = commitState.RobotinoLaser_ini.laserWarningSafetyDist;
		}
		if(parameter.getInteger("RobotinoLaser_ini", "max_range", commitState.RobotinoLaser_ini.max_range))
		{
			globalState.RobotinoLaser_ini.max_range = commitState.RobotinoLaser_ini.max_range;
		}
		if(parameter.getInteger("RobotinoLaser_ini", "min_range", commitState.RobotinoLaser_ini.min_range))
		{
			globalState.RobotinoLaser_ini.min_range = commitState.RobotinoLaser_ini.min_range;
		}
		if(parameter.getInteger("RobotinoLaser_ini", "opening_angle", commitState.RobotinoLaser_ini.opening_angle))
		{
			globalState.RobotinoLaser_ini.opening_angle = commitState.RobotinoLaser_ini.opening_angle;
		}
		if(parameter.getDouble("RobotinoLaser_ini", "pitch", commitState.RobotinoLaser_ini.pitch))
		{
			globalState.RobotinoLaser_ini.pitch = commitState.RobotinoLaser_ini.pitch;
		}
		if(parameter.getString("RobotinoLaser_ini", "robotinoAddress", commitState.RobotinoLaser_ini.robotinoAddress))
		{
			globalState.RobotinoLaser_ini.robotinoAddress = commitState.RobotinoLaser_ini.robotinoAddress;
		}
		if(parameter.getDouble("RobotinoLaser_ini", "roll", commitState.RobotinoLaser_ini.roll))
		{
			globalState.RobotinoLaser_ini.roll = commitState.RobotinoLaser_ini.roll;
		}
		if(parameter.getBoolean("RobotinoLaser_ini", "verbose", commitState.RobotinoLaser_ini.verbose))
		{
			globalState.RobotinoLaser_ini.verbose = commitState.RobotinoLaser_ini.verbose;
		}
		if(parameter.getDouble("RobotinoLaser_ini", "yaw", commitState.RobotinoLaser_ini.yaw))
		{
			globalState.RobotinoLaser_ini.yaw = commitState.RobotinoLaser_ini.yaw;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
