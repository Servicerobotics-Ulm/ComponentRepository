//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "ComponentGMapping.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;

	std::string tag = request.getTag();
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMLOCALIZATIONOBJECTS.SLAMPARAMETER.INITNEWMAP")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_x = 0;
		if(request.getInteger("1", temp_x) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_y = 0;
		if(request.getInteger("2", temp_y) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_a = 0;
		if(request.getInteger("3", temp_a) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommLocalizationObjects_SlamParameter_INITNEWMAPCore(
			temp_x, 
			temp_y, 
			temp_a
			);
		}
	}
	else if (tag == "COMMLOCALIZATIONOBJECTS.SLAMPARAMETER.SAVEMAP")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_dirname = "";
		if(request.getString("1", temp_dirname) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		std::string temp_filename = "";
		if(request.getString("2", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommLocalizationObjects_SlamParameter_SAVEMAPCore(
			temp_dirname, 
			temp_filename
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter gfs
		if(parameter.getDouble("gfs", "angularUpdate", commitState.gfs.angularUpdate))
		{
			globalState.gfs.angularUpdate = commitState.gfs.angularUpdate;
		}
		if(parameter.getDouble("gfs", "astep", commitState.gfs.astep))
		{
			globalState.gfs.astep = commitState.gfs.astep;
		}
		if(parameter.getDouble("gfs", "critscore", commitState.gfs.critscore))
		{
			globalState.gfs.critscore = commitState.gfs.critscore;
		}
		if(parameter.getDouble("gfs", "delta", commitState.gfs.delta))
		{
			globalState.gfs.delta = commitState.gfs.delta;
		}
		if(parameter.getBoolean("gfs", "generateMap", commitState.gfs.generateMap))
		{
			globalState.gfs.generateMap = commitState.gfs.generateMap;
		}
		if(parameter.getInteger("gfs", "iterations", commitState.gfs.iterations))
		{
			globalState.gfs.iterations = commitState.gfs.iterations;
		}
		if(parameter.getInteger("gfs", "kernelSize", commitState.gfs.kernelSize))
		{
			globalState.gfs.kernelSize = commitState.gfs.kernelSize;
		}
		if(parameter.getDouble("gfs", "linearUpdate", commitState.gfs.linearUpdate))
		{
			globalState.gfs.linearUpdate = commitState.gfs.linearUpdate;
		}
		if(parameter.getDouble("gfs", "lsigma", commitState.gfs.lsigma))
		{
			globalState.gfs.lsigma = commitState.gfs.lsigma;
		}
		if(parameter.getInteger("gfs", "lskip", commitState.gfs.lskip))
		{
			globalState.gfs.lskip = commitState.gfs.lskip;
		}
		if(parameter.getDouble("gfs", "lstep", commitState.gfs.lstep))
		{
			globalState.gfs.lstep = commitState.gfs.lstep;
		}
		if(parameter.getDouble("gfs", "maxMove", commitState.gfs.maxMove))
		{
			globalState.gfs.maxMove = commitState.gfs.maxMove;
		}
		if(parameter.getDouble("gfs", "maxUrange", commitState.gfs.maxUrange))
		{
			globalState.gfs.maxUrange = commitState.gfs.maxUrange;
		}
		if(parameter.getDouble("gfs", "maxrange", commitState.gfs.maxrange))
		{
			globalState.gfs.maxrange = commitState.gfs.maxrange;
		}
		if(parameter.getInteger("gfs", "ogain", commitState.gfs.ogain))
		{
			globalState.gfs.ogain = commitState.gfs.ogain;
		}
		if(parameter.getInteger("gfs", "particles", commitState.gfs.particles))
		{
			globalState.gfs.particles = commitState.gfs.particles;
		}
		if(parameter.getDouble("gfs", "regscore", commitState.gfs.regscore))
		{
			globalState.gfs.regscore = commitState.gfs.regscore;
		}
		if(parameter.getDouble("gfs", "resampleThreshold", commitState.gfs.resampleThreshold))
		{
			globalState.gfs.resampleThreshold = commitState.gfs.resampleThreshold;
		}
		if(parameter.getDouble("gfs", "sigma", commitState.gfs.sigma))
		{
			globalState.gfs.sigma = commitState.gfs.sigma;
		}
		if(parameter.getDouble("gfs", "srr", commitState.gfs.srr))
		{
			globalState.gfs.srr = commitState.gfs.srr;
		}
		if(parameter.getDouble("gfs", "srt", commitState.gfs.srt))
		{
			globalState.gfs.srt = commitState.gfs.srt;
		}
		if(parameter.getDouble("gfs", "str", commitState.gfs.str))
		{
			globalState.gfs.str = commitState.gfs.str;
		}
		if(parameter.getDouble("gfs", "stt", commitState.gfs.stt))
		{
			globalState.gfs.stt = commitState.gfs.stt;
		}
		if(parameter.getDouble("gfs", "xmax", commitState.gfs.xmax))
		{
			globalState.gfs.xmax = commitState.gfs.xmax;
		}
		if(parameter.getDouble("gfs", "xmin", commitState.gfs.xmin))
		{
			globalState.gfs.xmin = commitState.gfs.xmin;
		}
		if(parameter.getDouble("gfs", "ymax", commitState.gfs.ymax))
		{
			globalState.gfs.ymax = commitState.gfs.ymax;
		}
		if(parameter.getDouble("gfs", "ymin", commitState.gfs.ymin))
		{
			globalState.gfs.ymin = commitState.gfs.ymin;
		}
		// parameter settings
		if(parameter.getDouble("settings", "initial_pose_azimuth", commitState.settings.initial_pose_azimuth))
		{
			globalState.settings.initial_pose_azimuth = commitState.settings.initial_pose_azimuth;
		}
		if(parameter.getDouble("settings", "initial_pose_x", commitState.settings.initial_pose_x))
		{
			globalState.settings.initial_pose_x = commitState.settings.initial_pose_x;
		}
		if(parameter.getDouble("settings", "initial_pose_y", commitState.settings.initial_pose_y))
		{
			globalState.settings.initial_pose_y = commitState.settings.initial_pose_y;
		}
		if(parameter.getBoolean("settings", "verbose", commitState.settings.verbose))
		{
			globalState.settings.verbose = commitState.settings.verbose;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
