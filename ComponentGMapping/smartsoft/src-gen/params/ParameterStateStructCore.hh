//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter gfs
		 */
		class gfsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double angularUpdate;
			double astep;
			double critscore;
			double delta;
			bool generateMap;
			int iterations;
			int kernelSize;
			double linearUpdate;
			double lsigma;
			int lskip;
			double lstep;
			double maxMove;
			double maxUrange;
			double maxrange;
			int ogain;
			int particles;
			double regscore;
			double resampleThreshold;
			double sigma;
			double srr;
			double srt;
			double str;
			double stt;
			double xmax;
			double xmin;
			double ymax;
			double ymin;
		
		public:
			// default constructor
			gfsType() {
				angularUpdate = 0.5;
				astep = 0.05;
				critscore = 0.0;
				delta = 0.05;
				generateMap = true;
				iterations = 5;
				kernelSize = 1;
				linearUpdate = 1.0;
				lsigma = 0.05;
				lskip = 0;
				lstep = 0.05;
				maxMove = 1.0;
				maxUrange = 80.0;
				maxrange = 81.0;
				ogain = 3;
				particles = 50;
				regscore = 4.0E-4;
				resampleThreshold = 0.5;
				sigma = 0.05;
				srr = 0.1;
				srt = 0.1;
				str = 0.1;
				stt = 0.1;
				xmax = 20.0;
				xmin = -20.0;
				ymax = 20.0;
				ymin = -20.0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAngularUpdate() const { return angularUpdate; }
			inline double getAstep() const { return astep; }
			inline double getCritscore() const { return critscore; }
			inline double getDelta() const { return delta; }
			inline bool getGenerateMap() const { return generateMap; }
			inline int getIterations() const { return iterations; }
			inline int getKernelSize() const { return kernelSize; }
			inline double getLinearUpdate() const { return linearUpdate; }
			inline double getLsigma() const { return lsigma; }
			inline int getLskip() const { return lskip; }
			inline double getLstep() const { return lstep; }
			inline double getMaxMove() const { return maxMove; }
			inline double getMaxUrange() const { return maxUrange; }
			inline double getMaxrange() const { return maxrange; }
			inline int getOgain() const { return ogain; }
			inline int getParticles() const { return particles; }
			inline double getRegscore() const { return regscore; }
			inline double getResampleThreshold() const { return resampleThreshold; }
			inline double getSigma() const { return sigma; }
			inline double getSrr() const { return srr; }
			inline double getSrt() const { return srt; }
			inline double getStr() const { return str; }
			inline double getStt() const { return stt; }
			inline double getXmax() const { return xmax; }
			inline double getXmin() const { return xmin; }
			inline double getYmax() const { return ymax; }
			inline double getYmin() const { return ymin; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "gfs(";
				os << "angularUpdate = " << angularUpdate << ", ";
				os << "astep = " << astep << ", ";
				os << "critscore = " << critscore << ", ";
				os << "delta = " << delta << ", ";
				os << "generateMap = " << generateMap << ", ";
				os << "iterations = " << iterations << ", ";
				os << "kernelSize = " << kernelSize << ", ";
				os << "linearUpdate = " << linearUpdate << ", ";
				os << "lsigma = " << lsigma << ", ";
				os << "lskip = " << lskip << ", ";
				os << "lstep = " << lstep << ", ";
				os << "maxMove = " << maxMove << ", ";
				os << "maxUrange = " << maxUrange << ", ";
				os << "maxrange = " << maxrange << ", ";
				os << "ogain = " << ogain << ", ";
				os << "particles = " << particles << ", ";
				os << "regscore = " << regscore << ", ";
				os << "resampleThreshold = " << resampleThreshold << ", ";
				os << "sigma = " << sigma << ", ";
				os << "srr = " << srr << ", ";
				os << "srt = " << srt << ", ";
				os << "str = " << str << ", ";
				os << "stt = " << stt << ", ";
				os << "xmax = " << xmax << ", ";
				os << "xmin = " << xmin << ", ";
				os << "ymax = " << ymax << ", ";
				os << "ymin = " << ymin << ", ";
				os << ")\n";
			}
			
		}; // end class gfsType
		
		/**
		 * Definition of Parameter settings
		 */
		class settingsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double initial_pose_azimuth;
			double initial_pose_x;
			double initial_pose_y;
			bool verbose;
		
		public:
			// default constructor
			settingsType() {
				initial_pose_azimuth = 0.0;
				initial_pose_x = 0.0;
				initial_pose_y = 0.0;
				verbose = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getInitial_pose_azimuth() const { return initial_pose_azimuth; }
			inline double getInitial_pose_x() const { return initial_pose_x; }
			inline double getInitial_pose_y() const { return initial_pose_y; }
			inline bool getVerbose() const { return verbose; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "settings(";
				os << "initial_pose_azimuth = " << initial_pose_azimuth << ", ";
				os << "initial_pose_x = " << initial_pose_x << ", ";
				os << "initial_pose_y = " << initial_pose_y << ", ";
				os << "verbose = " << verbose << ", ";
				os << ")\n";
			}
			
		}; // end class settingsType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommLocalizationObjects
		 */
		class CommLocalizationObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet SlamParameter
			 */
			class SlamParameterType {
				friend class ParamUpdateHandler;
				public:
				protected:
					/**
					 * internal members
					 */
					
				public:
					/**
					 * public getter methods
					 */
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "SlamParameter(\n";
						os << ")";
					}
			}; // end of parameter-set class SlamParameterType
			
			protected:
				/**
				 * internal members
				 */
				SlamParameterType SlamParameter;
			
			public:
				/**
				 * public getter methods
				 */
				inline SlamParameterType getSlamParameter() const { return SlamParameter; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommLocalizationObjects(\n";
					SlamParameter.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommLocalizationObjectsType
	
protected:

	// Internal params
	gfsType gfs;
	settingsType settings;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommLocalizationObjectsType CommLocalizationObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommLocalizationObjects = commit.getCommLocalizationObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	gfsType getGfs() const {
		return gfs;
	}
	settingsType getSettings() const {
		return settings;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommLocalizationObjectsType getCommLocalizationObjects() const {
		return CommLocalizationObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		gfs.to_ostream(os);
		settings.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommLocalizationObjects.to_ostream(os);
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["gfs"] = nlohmann::json {
			{"angularUpdate" , getGfs().getAngularUpdate()},
			{"astep" , getGfs().getAstep()},
			{"critscore" , getGfs().getCritscore()},
			{"delta" , getGfs().getDelta()},
			{"generateMap" , getGfs().getGenerateMap()},
			{"iterations" , getGfs().getIterations()},
			{"kernelSize" , getGfs().getKernelSize()},
			{"linearUpdate" , getGfs().getLinearUpdate()},
			{"lsigma" , getGfs().getLsigma()},
			{"lskip" , getGfs().getLskip()},
			{"lstep" , getGfs().getLstep()},
			{"maxMove" , getGfs().getMaxMove()},
			{"maxUrange" , getGfs().getMaxUrange()},
			{"maxrange" , getGfs().getMaxrange()},
			{"ogain" , getGfs().getOgain()},
			{"particles" , getGfs().getParticles()},
			{"regscore" , getGfs().getRegscore()},
			{"resampleThreshold" , getGfs().getResampleThreshold()},
			{"sigma" , getGfs().getSigma()},
			{"srr" , getGfs().getSrr()},
			{"srt" , getGfs().getSrt()},
			{"str" , getGfs().getStr()},
			{"stt" , getGfs().getStt()},
			{"xmax" , getGfs().getXmax()},
			{"xmin" , getGfs().getXmin()},
			{"ymax" , getGfs().getYmax()},
			{"ymin" , getGfs().getYmin()}
		};
		param["settings"] = nlohmann::json {
			{"initial_pose_azimuth" , getSettings().getInitial_pose_azimuth()},
			{"initial_pose_x" , getSettings().getInitial_pose_x()},
			{"initial_pose_y" , getSettings().getInitial_pose_y()},
			{"verbose" , getSettings().getVerbose()}
		};
	
		param["SlamParameter"] = nlohmann::json {
		};
		
		return param.dump();
	}
};

#endif
