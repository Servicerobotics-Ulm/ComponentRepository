//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

// include wrapper header
#include "BasePositionUpdateClientWrapper.hh"

// include component's main class
#include "ComponentGMapping.hh"

// other extensin includes

BasePositionUpdateClientWrapper::BasePositionUpdateClientWrapper(Smart::ISendClientPattern<CommBasicObjects::CommBasePositionUpdate> *basePositionUpdateClient) {
	this->basePositionUpdateClient = basePositionUpdateClient;
	update_status = Smart::SMART_NODATA;
}

BasePositionUpdateClientWrapper::~BasePositionUpdateClientWrapper() {
}


Smart::StatusCode BasePositionUpdateClientWrapper::send(CommBasicObjects::CommBasePositionUpdate &basePositionUpdateClientDataObject) {
	std::unique_lock<std::mutex> lock(update_mutex);
	updateData = basePositionUpdateClientDataObject;
	update_status = basePositionUpdateClient->send(basePositionUpdateClientDataObject);
	return update_status;
}

Smart::StatusCode BasePositionUpdateClientWrapper::getLatestUpdate(CommBasicObjects::CommBasePositionUpdate &basePositionUpdateClientDataObject) {
	std::unique_lock<std::mutex> lock(update_mutex);
	basePositionUpdateClientDataObject = updateData;
	return update_status;
}
