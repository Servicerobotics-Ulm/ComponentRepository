//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef COMPONENTROBOTINOBASESERVER_PORTFACTORYINTERFACE_HH_
#define COMPONENTROBOTINOBASESERVER_PORTFACTORYINTERFACE_HH_

// include communication objects
#include <CommBasicObjects/CommBasePositionUpdate.hh>
#include <CommBasicObjects/CommBasePositionUpdateACE.hh>
#include <CommBasicObjects/CommBaseState.hh>
#include <CommBasicObjects/CommBaseStateACE.hh>
#include <CommBasicObjects/CommBatteryEvent.hh>
#include <CommBasicObjects/CommBatteryEventACE.hh>
#include <CommBasicObjects/CommBatteryParameter.hh>
#include <CommBasicObjects/CommBatteryParameterACE.hh>
#include <CommBasicObjects/CommBatteryState.hh>
#include <CommBasicObjects/CommBatteryStateACE.hh>
#include <CommBasicObjects/CommBumperEventParameter.hh>
#include <CommBasicObjects/CommBumperEventParameterACE.hh>
#include <CommBasicObjects/CommBumperEventResult.hh>
#include <CommBasicObjects/CommBumperEventResultACE.hh>
#include <CommBasicObjects/CommBumperEventState.hh>
#include <CommBasicObjects/CommBumperEventStateACE.hh>
#include <CommRobotinoObjects/CommDigitalInputEventParameter.hh>
#include <CommRobotinoObjects/CommDigitalInputEventParameterACE.hh>
#include <CommRobotinoObjects/CommDigitalInputEventResult.hh>
#include <CommRobotinoObjects/CommDigitalInputEventResultACE.hh>
#include <CommRobotinoObjects/CommDigitalInputEventState.hh>
#include <CommRobotinoObjects/CommDigitalInputEventStateACE.hh>
#include <CommBasicObjects/CommLaserSafetyEventParam.hh>
#include <CommBasicObjects/CommLaserSafetyEventParamACE.hh>
#include <CommBasicObjects/CommLaserSafetyEventState.hh>
#include <CommBasicObjects/CommLaserSafetyEventStateACE.hh>
#include <CommBasicObjects/CommLaserSafetyField.hh>
#include <CommBasicObjects/CommLaserSafetyFieldACE.hh>
#include <CommLocalizationObjects/CommLocalizationEventParameter.hh>
#include <CommLocalizationObjects/CommLocalizationEventParameterACE.hh>
#include <CommLocalizationObjects/CommLocalizationEventResult.hh>
#include <CommLocalizationObjects/CommLocalizationEventResultACE.hh>
#include <CommBasicObjects/CommNavigationVelocity.hh>
#include <CommBasicObjects/CommNavigationVelocityACE.hh>
#include <CommRobotinoObjects/CommRobotinoIOValues.hh>
#include <CommRobotinoObjects/CommRobotinoIOValuesACE.hh>
#include <CommRobotinoObjects/CommRobotinoPowerOutputValue.hh>
#include <CommRobotinoObjects/CommRobotinoPowerOutputValueACE.hh>
#include <CommBasicObjects/CommVoid.hh>
#include <CommBasicObjects/CommVoidACE.hh>
#include <CommLocalizationObjects/LocalizationEventState.hh>
#include <CommLocalizationObjects/LocalizationEventStateACE.hh>

#include <chrono>

// include component's main class
#include "ComponentRobotinoBaseServer.hh"

// forward declaration
class ComponentRobotinoBaseServer;

class ComponentRobotinoBaseServerPortFactoryInterface {
public:
	ComponentRobotinoBaseServerPortFactoryInterface() { };
	virtual ~ComponentRobotinoBaseServerPortFactoryInterface() { };

	virtual void initialize(ComponentRobotinoBaseServer *component, int argc, char* argv[]) = 0;
	virtual int onStartup() = 0;

	virtual Smart::IEventClientPattern<CommLocalizationObjects::CommLocalizationEventParameter, CommLocalizationObjects::CommLocalizationEventResult> * createLocalizationEventServiceIn() = 0;
	
	virtual Smart::IQueryServerPattern<CommBasicObjects::CommVoid, CommBasicObjects::CommBaseState> * createBaseStateQueryServiceAnsw(const std::string &serviceName) = 0;
	virtual Smart::IPushServerPattern<CommBasicObjects::CommBaseState> * createBaseStateServiceOut(const std::string &serviceName) = 0;
	virtual Smart::IEventServerPattern<CommBasicObjects::CommBatteryParameter, CommBasicObjects::CommBatteryEvent, CommBasicObjects::CommBatteryState> * createBatteryEventServiceOut(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommBasicObjects::CommBatteryParameter, CommBasicObjects::CommBatteryEvent, CommBasicObjects::CommBatteryState>> batteryEventServiceOutEventTestHandler) = 0;
	virtual Smart::IEventServerPattern<CommBasicObjects::CommBumperEventParameter, CommBasicObjects::CommBumperEventResult, CommBasicObjects::CommBumperEventState> * createBumperEventServiceOut(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommBasicObjects::CommBumperEventParameter, CommBasicObjects::CommBumperEventResult, CommBasicObjects::CommBumperEventState>> bumperEventServiceOutEventTestHandler) = 0;
	virtual Smart::IEventServerPattern<CommRobotinoObjects::CommDigitalInputEventParameter, CommRobotinoObjects::CommDigitalInputEventResult, CommRobotinoObjects::CommDigitalInputEventState> * createDigitalInputEventOut(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommRobotinoObjects::CommDigitalInputEventParameter, CommRobotinoObjects::CommDigitalInputEventResult, CommRobotinoObjects::CommDigitalInputEventState>> digitalInputEventOutEventTestHandler) = 0;
	virtual Smart::IEventServerPattern<CommBasicObjects::CommLaserSafetyEventParam, CommBasicObjects::CommLaserSafetyField, CommBasicObjects::CommLaserSafetyEventState> * createLaserSafetyEventServiceOut(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommBasicObjects::CommLaserSafetyEventParam, CommBasicObjects::CommLaserSafetyField, CommBasicObjects::CommLaserSafetyEventState>> laserSafetyEventServiceOutEventTestHandler) = 0;
	virtual Smart::ISendServerPattern<CommBasicObjects::CommBasePositionUpdate> * createLocalizationUpdateServiceIn(const std::string &serviceName) = 0;
	virtual Smart::ISendServerPattern<CommBasicObjects::CommNavigationVelocity> * createNavigationVelocityServiceIn(const std::string &serviceName) = 0;
	virtual Smart::ISendServerPattern<CommRobotinoObjects::CommRobotinoPowerOutputValue> * createPowerOutputSendIn(const std::string &serviceName) = 0;
	virtual Smart::IQueryServerPattern<CommRobotinoObjects::CommRobotinoIOValues, CommRobotinoObjects::CommRobotinoIOValues> * createRobotinoIOValuesQueryServiceAnsw(const std::string &serviceName) = 0;

	virtual int onShutdown(const std::chrono::steady_clock::duration &timeoutTime=std::chrono::seconds(2)) = 0;
	virtual void destroy() = 0;
};

#endif /* COMPONENTROBOTINOBASESERVER_PORTFACTORYINTERFACE_HH_ */
