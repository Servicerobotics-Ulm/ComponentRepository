//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "ComponentRobotinoBaseServer.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;

	std::string tag = request.getTag();
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "SET_RELAY")
	{
		unsigned int temp_number = 0;
		if(request.getInteger("1", temp_number) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		bool temp_value = false;
		if(request.getBoolean("2", temp_value) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleSET_RELAYCore(
			temp_number, 
			temp_value
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.BASEPARAMS.BASE_RESET")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_BaseParams_BASE_RESETCore(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.BASEPARAMS.BASE_SONAR")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_BaseParams_BASE_SONARCore(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.BASEPARAMS.SIGNAL_STATE_BUSY")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_BaseParams_SIGNAL_STATE_BUSYCore(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.BASEPARAMS.SIGNAL_STATE_ERROR")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_BaseParams_SIGNAL_STATE_ERRORCore(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.BASEPARAMS.SIGNAL_STATE_IDLE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_BaseParams_SIGNAL_STATE_IDLECore(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.BASEPARAMS.SIGNAL_STATE_LOCALIZATION_ERROR")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_BaseParams_SIGNAL_STATE_LOCALIZATION_ERRORCore(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.BASEPARAMS.SIGNAL_STATE_SAFETY_FIELD")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_BaseParams_SIGNAL_STATE_SAFETY_FIELDCore(
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter Bumper
		if(parameter.getInteger("Bumper", "bumperTimeOutMSec", commitState.Bumper.bumperTimeOutMSec))
		{
			globalState.Bumper.bumperTimeOutMSec = commitState.Bumper.bumperTimeOutMSec;
		}
		if(parameter.getInteger("Bumper", "bumperTimeOutSec", commitState.Bumper.bumperTimeOutSec))
		{
			globalState.Bumper.bumperTimeOutSec = commitState.Bumper.bumperTimeOutSec;
		}
		// parameter General
		if(parameter.getBoolean("General", "hasSignalState", commitState.General.hasSignalState))
		{
			globalState.General.hasSignalState = commitState.General.hasSignalState;
		}
		if(parameter.getString("General", "poseFileName", commitState.General.poseFileName))
		{
			globalState.General.poseFileName = commitState.General.poseFileName;
		}
		if(parameter.getBoolean("General", "useLocalizationEvent", commitState.General.useLocalizationEvent))
		{
			globalState.General.useLocalizationEvent = commitState.General.useLocalizationEvent;
		}
		if(parameter.getBoolean("General", "verbose", commitState.General.verbose))
		{
			globalState.General.verbose = commitState.General.verbose;
		}
		if(parameter.getBoolean("General", "writePoseFile", commitState.General.writePoseFile))
		{
			globalState.General.writePoseFile = commitState.General.writePoseFile;
		}
		// parameter LaserSafetyField
		if(parameter.getBoolean("LaserSafetyField", "generateLaserSafetyFieldEvents", commitState.LaserSafetyField.generateLaserSafetyFieldEvents))
		{
			globalState.LaserSafetyField.generateLaserSafetyFieldEvents = commitState.LaserSafetyField.generateLaserSafetyFieldEvents;
		}
		if(parameter.getInteger("LaserSafetyField", "laserSafetyfFieldTimeOutMSec", commitState.LaserSafetyField.laserSafetyfFieldTimeOutMSec))
		{
			globalState.LaserSafetyField.laserSafetyfFieldTimeOutMSec = commitState.LaserSafetyField.laserSafetyfFieldTimeOutMSec;
		}
		if(parameter.getInteger("LaserSafetyField", "laserSafetyfFieldTimeOutSec", commitState.LaserSafetyField.laserSafetyfFieldTimeOutSec))
		{
			globalState.LaserSafetyField.laserSafetyfFieldTimeOutSec = commitState.LaserSafetyField.laserSafetyfFieldTimeOutSec;
		}
		// parameter Robot
		if(parameter.getString("Robot", "daemonIP", commitState.Robot.daemonIP))
		{
			globalState.Robot.daemonIP = commitState.Robot.daemonIP;
		}
		if(parameter.getDouble("Robot", "maxRotVel", commitState.Robot.maxRotVel))
		{
			globalState.Robot.maxRotVel = commitState.Robot.maxRotVel;
		}
		if(parameter.getDouble("Robot", "maxVelX", commitState.Robot.maxVelX))
		{
			globalState.Robot.maxVelX = commitState.Robot.maxVelX;
		}
		if(parameter.getDouble("Robot", "maxVelY", commitState.Robot.maxVelY))
		{
			globalState.Robot.maxVelY = commitState.Robot.maxVelY;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
