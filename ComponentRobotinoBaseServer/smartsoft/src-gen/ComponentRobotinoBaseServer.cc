//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ComponentRobotinoBaseServer.hh"
#include "smartTimedTaskTrigger.h"
//FIXME: implement logging
//#include "smartGlobalLogger.hh"

// the ace port-factory is used as a default port-mapping
#include "ComponentRobotinoBaseServerAcePortFactory.hh"

#include "BatteryEventServiceOutEventTestHandler.hh"
#include "BumperEventServiceOutEventTestHandler.hh"
#include "DigitalInputEventOutEventTestHandler.hh"
#include "LaserSafetyEventServiceOutEventTestHandler.hh"

// initialize static singleton pointer to zero
ComponentRobotinoBaseServer* ComponentRobotinoBaseServer::_componentRobotinoBaseServer = 0;

// constructor
ComponentRobotinoBaseServer::ComponentRobotinoBaseServer()
{
	std::cout << "constructor of ComponentRobotinoBaseServer\n";
	
	// set all pointer members to NULL
	baseStateQueryServiceAnsw = NULL;
	baseStateQueryServiceAnswInputTaskTrigger = NULL;
	baseStateQueryServiceAnswHandler = NULL;
	baseStateServiceOut = NULL;
	batteryEventServiceOut = NULL;
	batteryEventServiceOutEventTestHandler = nullptr; 
	bumperEventServiceOut = NULL;
	bumperEventServiceOutEventTestHandler = nullptr; 
	//componentRobotinoBaseServerParams = NULL;
	//coordinationPort = NULL;
	digitalInputEventOut = NULL;
	digitalInputEventOutEventTestHandler = nullptr; 
	laserSafetyEventServiceOut = NULL;
	laserSafetyEventServiceOutEventTestHandler = nullptr; 
	localizationEventServiceIn = NULL;
	localizationEventServiceInInputTaskTrigger = NULL;
	localizationEventServiceInUpcallManager = NULL;
	localizationEventServiceInHandler = NULL;
	localizationUpdateServiceIn = NULL;
	localizationUpdateServiceInInputTaskTrigger = NULL;
	localizationUpdateServiceInUpcallManager = NULL;
	localizationUpdateServiceInHandler = NULL;
	navigationVelocityServiceIn = NULL;
	navigationVelocityServiceInInputTaskTrigger = NULL;
	navigationVelocityServiceInUpcallManager = NULL;
	navigationVelocityServiceInHandler = NULL;
	odomTask = NULL;
	odomTaskTrigger = NULL;
	powerOutputSendIn = NULL;
	powerOutputSendInInputTaskTrigger = NULL;
	powerOutputSendInUpcallManager = NULL;
	powerOutputSendInHandler = NULL;
	robotinoIOValuesQueryServiceAnsw = NULL;
	robotinoIOValuesQueryServiceAnswInputTaskTrigger = NULL;
	robotinoIOValuesQueryServiceAnswHandler = NULL;
	signalStateTask = NULL;
	signalStateTaskTrigger = NULL;
	robotinoAPITask = NULL;
	robotinoAPITaskTrigger = NULL;
	stateChangeHandler = NULL;
	stateSlave = NULL;
	wiringSlave = NULL;
	param = NULL;
	
	// set default ini parameter values
	connections.component.name = "ComponentRobotinoBaseServer";
	connections.component.initialComponentMode = "Neutral";
	connections.component.defaultScheduler = "DEFAULT";
	connections.component.useLogger = false;
	
	connections.baseStateQueryServiceAnsw.serviceName = "BaseStateQueryServiceAnsw";
	connections.baseStateQueryServiceAnsw.roboticMiddleware = "ACE_SmartSoft";
	connections.baseStateServiceOut.serviceName = "BaseStateServiceOut";
	connections.baseStateServiceOut.roboticMiddleware = "ACE_SmartSoft";
	connections.batteryEventServiceOut.serviceName = "BatteryEventServiceOut";
	connections.batteryEventServiceOut.roboticMiddleware = "ACE_SmartSoft";
	connections.bumperEventServiceOut.serviceName = "BumperEventServiceOut";
	connections.bumperEventServiceOut.roboticMiddleware = "ACE_SmartSoft";
	connections.digitalInputEventOut.serviceName = "DigitalInputEventOut";
	connections.digitalInputEventOut.roboticMiddleware = "ACE_SmartSoft";
	connections.laserSafetyEventServiceOut.serviceName = "LaserSafetyEventServiceOut";
	connections.laserSafetyEventServiceOut.roboticMiddleware = "ACE_SmartSoft";
	connections.localizationUpdateServiceIn.serviceName = "LocalizationUpdateServiceIn";
	connections.localizationUpdateServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.navigationVelocityServiceIn.serviceName = "NavigationVelocityServiceIn";
	connections.navigationVelocityServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.powerOutputSendIn.serviceName = "PowerOutputSendIn";
	connections.powerOutputSendIn.roboticMiddleware = "ACE_SmartSoft";
	connections.robotinoIOValuesQueryServiceAnsw.serviceName = "RobotinoIOValuesQueryServiceAnsw";
	connections.robotinoIOValuesQueryServiceAnsw.roboticMiddleware = "ACE_SmartSoft";
	connections.localizationEventServiceIn.initialConnect = false;
	connections.localizationEventServiceIn.wiringName = "LocalizationEventServiceIn";
	connections.localizationEventServiceIn.serverName = "unknown";
	connections.localizationEventServiceIn.serviceName = "unknown";
	connections.localizationEventServiceIn.interval = 1;
	connections.localizationEventServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.odomTask.minActFreq = 20.0;
	connections.odomTask.maxActFreq = 1.0;
	connections.odomTask.trigger = "PeriodicTimer";
	connections.odomTask.periodicActFreq = 50.0;
	// scheduling default parameters
	connections.odomTask.scheduler = "DEFAULT";
	connections.odomTask.priority = -1;
	connections.odomTask.cpuAffinity = -1;
	connections.signalStateTask.minActFreq = 0.0;
	connections.signalStateTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.signalStateTask.scheduler = "DEFAULT";
	connections.signalStateTask.priority = -1;
	connections.signalStateTask.cpuAffinity = -1;
	connections.robotinoAPITask.minActFreq = 0.0;
	connections.robotinoAPITask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.robotinoAPITask.scheduler = "DEFAULT";
	connections.robotinoAPITask.priority = -1;
	connections.robotinoAPITask.cpuAffinity = -1;
	connections.localizationEventServiceInHandler.prescale = 1;
	connections.localizationUpdateServiceInHandler.prescale = 1;
	connections.navigationVelocityServiceInHandler.prescale = 1;
	connections.powerOutputSendInHandler.prescale = 1;
	
	// initialize members of OpcUaBackendComponentGeneratorExtension
	
	// initialize members of ComponentRobotinoBaseServerROSExtension
	
	// initialize members of PlainOpcUaComponentRobotinoBaseServerExtension
	
}

void ComponentRobotinoBaseServer::addPortFactory(const std::string &name, ComponentRobotinoBaseServerPortFactoryInterface *portFactory)
{
	portFactoryRegistry[name] = portFactory;
}

void ComponentRobotinoBaseServer::addExtension(ComponentRobotinoBaseServerExtension *extension)
{
	componentExtensionRegistry[extension->getName()] = extension;
}

SmartACE::SmartComponent* ComponentRobotinoBaseServer::getComponentImpl()
{
	return dynamic_cast<ComponentRobotinoBaseServerAcePortFactory*>(portFactoryRegistry["ACE_SmartSoft"])->getComponentImpl();
}

/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void ComponentRobotinoBaseServer::setStartupFinished() {
	stateSlave->setWaitState("Alive");
	std::cout << "ComponentDefinition initialization/startup finished." << std::endl;
}


Smart::StatusCode ComponentRobotinoBaseServer::connectLocalizationEventServiceIn(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.localizationEventServiceIn.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = localizationEventServiceIn->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->localizationEventServiceIn->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}


/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
Smart::StatusCode ComponentRobotinoBaseServer::connectAndStartAllServices() {
	Smart::StatusCode status = Smart::SMART_OK;
	
	status = connectLocalizationEventServiceIn(connections.localizationEventServiceIn.serverName, connections.localizationEventServiceIn.serviceName);
	if(status != Smart::SMART_OK) return status;
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void ComponentRobotinoBaseServer::startAllTasks() {
	// start task OdomTask
	if(connections.odomTask.scheduler != "DEFAULT") {
		ACE_Sched_Params odomTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.odomTask.scheduler == "FIFO") {
			odomTask_SchedParams.policy(ACE_SCHED_FIFO);
			odomTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.odomTask.scheduler == "RR") {
			odomTask_SchedParams.policy(ACE_SCHED_RR);
			odomTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		odomTask->start(odomTask_SchedParams, connections.odomTask.cpuAffinity);
	} else {
		odomTask->start();
	}
	// start task SignalStateTask
	if(connections.signalStateTask.scheduler != "DEFAULT") {
		ACE_Sched_Params signalStateTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.signalStateTask.scheduler == "FIFO") {
			signalStateTask_SchedParams.policy(ACE_SCHED_FIFO);
			signalStateTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.signalStateTask.scheduler == "RR") {
			signalStateTask_SchedParams.policy(ACE_SCHED_RR);
			signalStateTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		signalStateTask->start(signalStateTask_SchedParams, connections.signalStateTask.cpuAffinity);
	} else {
		signalStateTask->start();
	}
	// start task robotinoAPITask
	if(connections.robotinoAPITask.scheduler != "DEFAULT") {
		ACE_Sched_Params robotinoAPITask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.robotinoAPITask.scheduler == "FIFO") {
			robotinoAPITask_SchedParams.policy(ACE_SCHED_FIFO);
			robotinoAPITask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.robotinoAPITask.scheduler == "RR") {
			robotinoAPITask_SchedParams.policy(ACE_SCHED_RR);
			robotinoAPITask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		robotinoAPITask->start(robotinoAPITask_SchedParams, connections.robotinoAPITask.cpuAffinity);
	} else {
		robotinoAPITask->start();
	}
}

/**
 * Start all timers contained in this component
 */
void ComponentRobotinoBaseServer::startAllTimers() {
}


Smart::TaskTriggerSubject* ComponentRobotinoBaseServer::getInputTaskTriggerFromString(const std::string &client)
{
	if(client == "LocalizationEventServiceIn") return localizationEventServiceInInputTaskTrigger;
	if(client == "LocalizationUpdateServiceIn") return localizationUpdateServiceInInputTaskTrigger;
	if(client == "NavigationVelocityServiceIn") return navigationVelocityServiceInInputTaskTrigger;
	if(client == "PowerOutputSendIn") return powerOutputSendInInputTaskTrigger;
	
	return NULL;
}


void ComponentRobotinoBaseServer::init(int argc, char *argv[])
{
	try {
		Smart::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		// print out the actual parameters which are used to initialize the component
		std::cout << " \nComponentDefinition Initial-Parameters:\n" << COMP->getParameters() << std::endl;
		
		// initializations of OpcUaBackendComponentGeneratorExtension
		
		// initializations of ComponentRobotinoBaseServerROSExtension
		
		// initializations of PlainOpcUaComponentRobotinoBaseServerExtension
		
		
		// initialize all registered port-factories
		for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
		{
			portFactory->second->initialize(this, argc, argv);
		}
		
		// initialize all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->initialize(this, argc, argv);
		}
		
		ComponentRobotinoBaseServerPortFactoryInterface *acePortFactory = portFactoryRegistry["ACE_SmartSoft"];
		if(acePortFactory == 0) {
			std::cerr << "ERROR: acePortFactory NOT instantiated -> exit(-1)" << std::endl;
			exit(-1);
		}
		
		// this pointer is used for backwards compatibility (deprecated: should be removed as soon as all patterns, including coordination, are moved to port-factory)
		SmartACE::SmartComponent *component = dynamic_cast<ComponentRobotinoBaseServerAcePortFactory*>(acePortFactory)->getComponentImpl();
		
		std::cout << "ComponentDefinition ComponentRobotinoBaseServer is named " << connections.component.name << std::endl;
		
		if(connections.component.useLogger == true) {
			//FIXME: use logging
			//Smart::LOGGER->openLogFileInFolder("data/"+connections.component.name);
			//Smart::LOGGER->startLogging();
		}

		// create event-test handlers (if needed)
		batteryEventServiceOutEventTestHandler = std::make_shared<BatteryEventServiceOutEventTestHandler>();
		bumperEventServiceOutEventTestHandler = std::make_shared<BumperEventServiceOutEventTestHandler>();
		digitalInputEventOutEventTestHandler = std::make_shared<DigitalInputEventOutEventTestHandler>();
		laserSafetyEventServiceOutEventTestHandler = std::make_shared<LaserSafetyEventServiceOutEventTestHandler>();
		
		// create server ports
		// TODO: set minCycleTime from Ini-file
		baseStateQueryServiceAnsw = portFactoryRegistry[connections.baseStateQueryServiceAnsw.roboticMiddleware]->createBaseStateQueryServiceAnsw(connections.baseStateQueryServiceAnsw.serviceName);
		baseStateQueryServiceAnswInputTaskTrigger = new Smart::QueryServerTaskTrigger<CommBasicObjects::CommVoid, CommBasicObjects::CommBaseState>(baseStateQueryServiceAnsw);
		baseStateServiceOut = portFactoryRegistry[connections.baseStateServiceOut.roboticMiddleware]->createBaseStateServiceOut(connections.baseStateServiceOut.serviceName);
		batteryEventServiceOutEventTestHandler = std::make_shared<BatteryEventServiceOutEventTestHandler>();
		batteryEventServiceOut = portFactoryRegistry[connections.batteryEventServiceOut.roboticMiddleware]->createBatteryEventServiceOut(connections.batteryEventServiceOut.serviceName, batteryEventServiceOutEventTestHandler);
		bumperEventServiceOutEventTestHandler = std::make_shared<BumperEventServiceOutEventTestHandler>();
		bumperEventServiceOut = portFactoryRegistry[connections.bumperEventServiceOut.roboticMiddleware]->createBumperEventServiceOut(connections.bumperEventServiceOut.serviceName, bumperEventServiceOutEventTestHandler);
		digitalInputEventOutEventTestHandler = std::make_shared<DigitalInputEventOutEventTestHandler>();
		digitalInputEventOut = portFactoryRegistry[connections.digitalInputEventOut.roboticMiddleware]->createDigitalInputEventOut(connections.digitalInputEventOut.serviceName, digitalInputEventOutEventTestHandler);
		laserSafetyEventServiceOutEventTestHandler = std::make_shared<LaserSafetyEventServiceOutEventTestHandler>();
		laserSafetyEventServiceOut = portFactoryRegistry[connections.laserSafetyEventServiceOut.roboticMiddleware]->createLaserSafetyEventServiceOut(connections.laserSafetyEventServiceOut.serviceName, laserSafetyEventServiceOutEventTestHandler);
		localizationUpdateServiceIn = portFactoryRegistry[connections.localizationUpdateServiceIn.roboticMiddleware]->createLocalizationUpdateServiceIn(connections.localizationUpdateServiceIn.serviceName);
		navigationVelocityServiceIn = portFactoryRegistry[connections.navigationVelocityServiceIn.roboticMiddleware]->createNavigationVelocityServiceIn(connections.navigationVelocityServiceIn.serviceName);
		powerOutputSendIn = portFactoryRegistry[connections.powerOutputSendIn.roboticMiddleware]->createPowerOutputSendIn(connections.powerOutputSendIn.serviceName);
		robotinoIOValuesQueryServiceAnsw = portFactoryRegistry[connections.robotinoIOValuesQueryServiceAnsw.roboticMiddleware]->createRobotinoIOValuesQueryServiceAnsw(connections.robotinoIOValuesQueryServiceAnsw.serviceName);
		robotinoIOValuesQueryServiceAnswInputTaskTrigger = new Smart::QueryServerTaskTrigger<CommRobotinoObjects::CommRobotinoIOValues, CommRobotinoObjects::CommRobotinoIOValues>(robotinoIOValuesQueryServiceAnsw);
		
		// create client ports
		localizationEventServiceIn = portFactoryRegistry[connections.localizationEventServiceIn.roboticMiddleware]->createLocalizationEventServiceIn();
		
		// create InputTaskTriggers and UpcallManagers
		localizationEventServiceInInputTaskTrigger = new Smart::InputTaskTrigger<Smart::EventInputType<CommLocalizationObjects::CommLocalizationEventResult>>(localizationEventServiceIn);
		localizationEventServiceInUpcallManager = new LocalizationEventServiceInUpcallManager(localizationEventServiceIn);
		localizationUpdateServiceInInputTaskTrigger = new Smart::InputTaskTrigger<CommBasicObjects::CommBasePositionUpdate>(localizationUpdateServiceIn);
		localizationUpdateServiceInUpcallManager = new LocalizationUpdateServiceInUpcallManager(localizationUpdateServiceIn);
		navigationVelocityServiceInInputTaskTrigger = new Smart::InputTaskTrigger<CommBasicObjects::CommNavigationVelocity>(navigationVelocityServiceIn);
		navigationVelocityServiceInUpcallManager = new NavigationVelocityServiceInUpcallManager(navigationVelocityServiceIn);
		powerOutputSendInInputTaskTrigger = new Smart::InputTaskTrigger<CommRobotinoObjects::CommRobotinoPowerOutputValue>(powerOutputSendIn);
		powerOutputSendInUpcallManager = new PowerOutputSendInUpcallManager(powerOutputSendIn);
		
		// create input-handler
		localizationEventServiceInHandler = new LocalizationEventServiceInHandler(localizationEventServiceIn, connections.localizationEventServiceInHandler.prescale);
		localizationUpdateServiceInHandler = new LocalizationUpdateServiceInHandler(localizationUpdateServiceIn, connections.localizationUpdateServiceInHandler.prescale);
		navigationVelocityServiceInHandler = new NavigationVelocityServiceInHandler(navigationVelocityServiceIn, connections.navigationVelocityServiceInHandler.prescale);
		powerOutputSendInHandler = new PowerOutputSendInHandler(powerOutputSendIn, connections.powerOutputSendInHandler.prescale);
		
		// create request-handlers
		baseStateQueryServiceAnswHandler = new BaseStateQueryServiceAnswHandler(baseStateQueryServiceAnsw);
		robotinoIOValuesQueryServiceAnswHandler = new RobotinoIOValuesQueryServiceAnswHandler(robotinoIOValuesQueryServiceAnsw);
		
		// create state pattern
		stateChangeHandler = new SmartStateChangeHandler();
		stateSlave = new SmartACE::StateSlave(component, stateChangeHandler);
		if (stateSlave->defineStates("emergencyStop" ,"eStop") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion emergencyStop.eStop" << std::endl;
		status = stateSlave->setUpInitialState(connections.component.initialComponentMode);
		if (status != Smart::SMART_OK) std::cerr << status << "; failed setting initial ComponentMode: " << connections.component.initialComponentMode << std::endl;
		// activate state slave
		status = stateSlave->activate();
		if(status != Smart::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		wiringSlave = new SmartACE::WiringSlave(component);
		// add client port to wiring slave
		if(connections.localizationEventServiceIn.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::EventClient<CommLocalizationObjects::CommLocalizationEventParameter, CommLocalizationObjects::CommLocalizationEventResult>*>(localizationEventServiceIn)->add(wiringSlave, connections.localizationEventServiceIn.wiringName);
		}
		
		// create parameter slave
		param = new SmartACE::ParameterSlave(component, &paramHandler);
		
		
		// create Task OdomTask
		odomTask = new OdomTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.odomTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.odomTask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(odomTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				odomTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task OdomTask" << std::endl;
			}
		} else if(connections.odomTask.trigger == "DataTriggered") {
			odomTaskTrigger = getInputTaskTriggerFromString(connections.odomTask.inPortRef);
			if(odomTaskTrigger != NULL) {
				odomTaskTrigger->attach(odomTask, connections.odomTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.odomTask.inPortRef << " as activation source for Task OdomTask" << std::endl;
			}
		} else
		{
			// setup default task-trigger as PeriodicTimer
			Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
			int microseconds = 1000*1000 / 50.0;
			if(microseconds > 0) {
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				triggerPtr->attach(odomTask);
				// store trigger in class member
				odomTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task OdomTask" << std::endl;
			}
		}
		
		// create Task SignalStateTask
		signalStateTask = new SignalStateTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.signalStateTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.signalStateTask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(signalStateTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				signalStateTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task SignalStateTask" << std::endl;
			}
		} else if(connections.signalStateTask.trigger == "DataTriggered") {
			signalStateTaskTrigger = getInputTaskTriggerFromString(connections.signalStateTask.inPortRef);
			if(signalStateTaskTrigger != NULL) {
				signalStateTaskTrigger->attach(signalStateTask, connections.signalStateTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.signalStateTask.inPortRef << " as activation source for Task SignalStateTask" << std::endl;
			}
		} 
		
		// create Task robotinoAPITask
		robotinoAPITask = new RobotinoAPITask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.robotinoAPITask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.robotinoAPITask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(robotinoAPITask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				robotinoAPITaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task RobotinoAPITask" << std::endl;
			}
		} else if(connections.robotinoAPITask.trigger == "DataTriggered") {
			robotinoAPITaskTrigger = getInputTaskTriggerFromString(connections.robotinoAPITask.inPortRef);
			if(robotinoAPITaskTrigger != NULL) {
				robotinoAPITaskTrigger->attach(robotinoAPITask, connections.robotinoAPITask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.robotinoAPITask.inPortRef << " as activation source for Task RobotinoAPITask" << std::endl;
			}
		} 
		
		
		// link observers with subjects
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void ComponentRobotinoBaseServer::run()
{
	stateSlave->acquire("init");
	// startup all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onStartup();
	}
	
	// startup all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onStartup();
	}
	stateSlave->release("init");
	
	// do not call this handler within the init state (see above) as this handler internally calls setStartupFinished() (this should be fixed in future)
	compHandler.onStartup();
	
	// this call blocks until the component is commanded to shutdown
	stateSlave->acquire("shutdown");
	
	// shutdown all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onShutdown();
	}
	
	// shutdown all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onShutdown();
	}
	
	if(connections.component.useLogger == true) {
		//FIXME: use logging
		//Smart::LOGGER->stopLogging();
	}
	
	compHandler.onShutdown();
	
	stateSlave->release("shutdown");
}

// clean-up component's resources
void ComponentRobotinoBaseServer::fini()
{
	// unlink all observers
	
	// destroy all task instances
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(odomTaskTrigger != NULL){
		odomTaskTrigger->detach(odomTask);
		delete odomTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(signalStateTaskTrigger != NULL){
		signalStateTaskTrigger->detach(signalStateTask);
		delete signalStateTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(robotinoAPITaskTrigger != NULL){
		robotinoAPITaskTrigger->detach(robotinoAPITask);
		delete robotinoAPITask;
	}

	// destroy all input-handler
	delete localizationEventServiceInHandler;
	delete localizationUpdateServiceInHandler;
	delete navigationVelocityServiceInHandler;
	delete powerOutputSendInHandler;

	// destroy InputTaskTriggers and UpcallManagers
	delete localizationEventServiceInInputTaskTrigger;
	delete localizationEventServiceInUpcallManager;
	delete localizationUpdateServiceInInputTaskTrigger;
	delete localizationUpdateServiceInUpcallManager;
	delete navigationVelocityServiceInInputTaskTrigger;
	delete navigationVelocityServiceInUpcallManager;
	delete powerOutputSendInInputTaskTrigger;
	delete powerOutputSendInUpcallManager;

	// destroy client ports
	delete localizationEventServiceIn;

	// destroy server ports
	delete baseStateQueryServiceAnsw;
	delete baseStateQueryServiceAnswInputTaskTrigger;
	delete baseStateServiceOut;
	delete batteryEventServiceOut;
	delete bumperEventServiceOut;
	delete digitalInputEventOut;
	delete laserSafetyEventServiceOut;
	delete localizationUpdateServiceIn;
	delete navigationVelocityServiceIn;
	delete powerOutputSendIn;
	delete robotinoIOValuesQueryServiceAnsw;
	delete robotinoIOValuesQueryServiceAnswInputTaskTrigger;
	// destroy event-test handlers (if needed)
	batteryEventServiceOutEventTestHandler;
	bumperEventServiceOutEventTestHandler;
	digitalInputEventOutEventTestHandler;
	laserSafetyEventServiceOutEventTestHandler;
	
	// destroy request-handlers
	delete baseStateQueryServiceAnswHandler;
	delete robotinoIOValuesQueryServiceAnswHandler;
	
	delete stateSlave;
	// destroy state-change-handler
	delete stateChangeHandler;
	
	// destroy all master/slave ports
	delete wiringSlave;
	delete param;
	

	// destroy all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->destroy();
	}

	// destroy all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->destroy();
	}
	
	// destruction of OpcUaBackendComponentGeneratorExtension
	
	// destruction of ComponentRobotinoBaseServerROSExtension
	
	// destruction of PlainOpcUaComponentRobotinoBaseServerExtension
	
}

void ComponentRobotinoBaseServer::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	SmartACE::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("ComponentRobotinoBaseServer.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load ComponentRobotinoBaseServer.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: ComponentRobotinoBaseServer.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		SmartACE::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(SmartACE::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(SmartACE::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		parameter.getString("component", "initialComponentMode", connections.component.initialComponentMode);
		if(parameter.checkIfParameterExists("component", "defaultScheduler")) {
			parameter.getString("component", "defaultScheduler", connections.component.defaultScheduler);
		}
		if(parameter.checkIfParameterExists("component", "useLogger")) {
			parameter.getBoolean("component", "useLogger", connections.component.useLogger);
		}
		
		// load parameters for client LocalizationEventServiceIn
		parameter.getBoolean("LocalizationEventServiceIn", "initialConnect", connections.localizationEventServiceIn.initialConnect);
		parameter.getString("LocalizationEventServiceIn", "serviceName", connections.localizationEventServiceIn.serviceName);
		parameter.getString("LocalizationEventServiceIn", "serverName", connections.localizationEventServiceIn.serverName);
		parameter.getString("LocalizationEventServiceIn", "wiringName", connections.localizationEventServiceIn.wiringName);
		if(parameter.checkIfParameterExists("LocalizationEventServiceIn", "roboticMiddleware")) {
			parameter.getString("LocalizationEventServiceIn", "roboticMiddleware", connections.localizationEventServiceIn.roboticMiddleware);
		}
		
		// load parameters for server BaseStateQueryServiceAnsw
		parameter.getString("BaseStateQueryServiceAnsw", "serviceName", connections.baseStateQueryServiceAnsw.serviceName);
		if(parameter.checkIfParameterExists("BaseStateQueryServiceAnsw", "roboticMiddleware")) {
			parameter.getString("BaseStateQueryServiceAnsw", "roboticMiddleware", connections.baseStateQueryServiceAnsw.roboticMiddleware);
		}
		// load parameters for server BaseStateServiceOut
		parameter.getString("BaseStateServiceOut", "serviceName", connections.baseStateServiceOut.serviceName);
		if(parameter.checkIfParameterExists("BaseStateServiceOut", "roboticMiddleware")) {
			parameter.getString("BaseStateServiceOut", "roboticMiddleware", connections.baseStateServiceOut.roboticMiddleware);
		}
		// load parameters for server BatteryEventServiceOut
		parameter.getString("BatteryEventServiceOut", "serviceName", connections.batteryEventServiceOut.serviceName);
		if(parameter.checkIfParameterExists("BatteryEventServiceOut", "roboticMiddleware")) {
			parameter.getString("BatteryEventServiceOut", "roboticMiddleware", connections.batteryEventServiceOut.roboticMiddleware);
		}
		// load parameters for server BumperEventServiceOut
		parameter.getString("BumperEventServiceOut", "serviceName", connections.bumperEventServiceOut.serviceName);
		if(parameter.checkIfParameterExists("BumperEventServiceOut", "roboticMiddleware")) {
			parameter.getString("BumperEventServiceOut", "roboticMiddleware", connections.bumperEventServiceOut.roboticMiddleware);
		}
		// load parameters for server DigitalInputEventOut
		parameter.getString("DigitalInputEventOut", "serviceName", connections.digitalInputEventOut.serviceName);
		if(parameter.checkIfParameterExists("DigitalInputEventOut", "roboticMiddleware")) {
			parameter.getString("DigitalInputEventOut", "roboticMiddleware", connections.digitalInputEventOut.roboticMiddleware);
		}
		// load parameters for server LaserSafetyEventServiceOut
		parameter.getString("LaserSafetyEventServiceOut", "serviceName", connections.laserSafetyEventServiceOut.serviceName);
		if(parameter.checkIfParameterExists("LaserSafetyEventServiceOut", "roboticMiddleware")) {
			parameter.getString("LaserSafetyEventServiceOut", "roboticMiddleware", connections.laserSafetyEventServiceOut.roboticMiddleware);
		}
		// load parameters for server LocalizationUpdateServiceIn
		parameter.getString("LocalizationUpdateServiceIn", "serviceName", connections.localizationUpdateServiceIn.serviceName);
		if(parameter.checkIfParameterExists("LocalizationUpdateServiceIn", "roboticMiddleware")) {
			parameter.getString("LocalizationUpdateServiceIn", "roboticMiddleware", connections.localizationUpdateServiceIn.roboticMiddleware);
		}
		// load parameters for server NavigationVelocityServiceIn
		parameter.getString("NavigationVelocityServiceIn", "serviceName", connections.navigationVelocityServiceIn.serviceName);
		if(parameter.checkIfParameterExists("NavigationVelocityServiceIn", "roboticMiddleware")) {
			parameter.getString("NavigationVelocityServiceIn", "roboticMiddleware", connections.navigationVelocityServiceIn.roboticMiddleware);
		}
		// load parameters for server PowerOutputSendIn
		parameter.getString("PowerOutputSendIn", "serviceName", connections.powerOutputSendIn.serviceName);
		if(parameter.checkIfParameterExists("PowerOutputSendIn", "roboticMiddleware")) {
			parameter.getString("PowerOutputSendIn", "roboticMiddleware", connections.powerOutputSendIn.roboticMiddleware);
		}
		// load parameters for server RobotinoIOValuesQueryServiceAnsw
		parameter.getString("RobotinoIOValuesQueryServiceAnsw", "serviceName", connections.robotinoIOValuesQueryServiceAnsw.serviceName);
		if(parameter.checkIfParameterExists("RobotinoIOValuesQueryServiceAnsw", "roboticMiddleware")) {
			parameter.getString("RobotinoIOValuesQueryServiceAnsw", "roboticMiddleware", connections.robotinoIOValuesQueryServiceAnsw.roboticMiddleware);
		}
		
		// load parameters for task OdomTask
		parameter.getDouble("OdomTask", "minActFreqHz", connections.odomTask.minActFreq);
		parameter.getDouble("OdomTask", "maxActFreqHz", connections.odomTask.maxActFreq);
		parameter.getString("OdomTask", "triggerType", connections.odomTask.trigger);
		if(connections.odomTask.trigger == "PeriodicTimer") {
			parameter.getDouble("OdomTask", "periodicActFreqHz", connections.odomTask.periodicActFreq);
		} else if(connections.odomTask.trigger == "DataTriggered") {
			parameter.getString("OdomTask", "inPortRef", connections.odomTask.inPortRef);
			parameter.getInteger("OdomTask", "prescale", connections.odomTask.prescale);
		}
		if(parameter.checkIfParameterExists("OdomTask", "scheduler")) {
			parameter.getString("OdomTask", "scheduler", connections.odomTask.scheduler);
		}
		if(parameter.checkIfParameterExists("OdomTask", "priority")) {
			parameter.getInteger("OdomTask", "priority", connections.odomTask.priority);
		}
		if(parameter.checkIfParameterExists("OdomTask", "cpuAffinity")) {
			parameter.getInteger("OdomTask", "cpuAffinity", connections.odomTask.cpuAffinity);
		}
		// load parameters for task SignalStateTask
		parameter.getDouble("SignalStateTask", "minActFreqHz", connections.signalStateTask.minActFreq);
		parameter.getDouble("SignalStateTask", "maxActFreqHz", connections.signalStateTask.maxActFreq);
		parameter.getString("SignalStateTask", "triggerType", connections.signalStateTask.trigger);
		if(connections.signalStateTask.trigger == "PeriodicTimer") {
			parameter.getDouble("SignalStateTask", "periodicActFreqHz", connections.signalStateTask.periodicActFreq);
		} else if(connections.signalStateTask.trigger == "DataTriggered") {
			parameter.getString("SignalStateTask", "inPortRef", connections.signalStateTask.inPortRef);
			parameter.getInteger("SignalStateTask", "prescale", connections.signalStateTask.prescale);
		}
		if(parameter.checkIfParameterExists("SignalStateTask", "scheduler")) {
			parameter.getString("SignalStateTask", "scheduler", connections.signalStateTask.scheduler);
		}
		if(parameter.checkIfParameterExists("SignalStateTask", "priority")) {
			parameter.getInteger("SignalStateTask", "priority", connections.signalStateTask.priority);
		}
		if(parameter.checkIfParameterExists("SignalStateTask", "cpuAffinity")) {
			parameter.getInteger("SignalStateTask", "cpuAffinity", connections.signalStateTask.cpuAffinity);
		}
		// load parameters for task robotinoAPITask
		parameter.getDouble("robotinoAPITask", "minActFreqHz", connections.robotinoAPITask.minActFreq);
		parameter.getDouble("robotinoAPITask", "maxActFreqHz", connections.robotinoAPITask.maxActFreq);
		parameter.getString("robotinoAPITask", "triggerType", connections.robotinoAPITask.trigger);
		if(connections.robotinoAPITask.trigger == "PeriodicTimer") {
			parameter.getDouble("robotinoAPITask", "periodicActFreqHz", connections.robotinoAPITask.periodicActFreq);
		} else if(connections.robotinoAPITask.trigger == "DataTriggered") {
			parameter.getString("robotinoAPITask", "inPortRef", connections.robotinoAPITask.inPortRef);
			parameter.getInteger("robotinoAPITask", "prescale", connections.robotinoAPITask.prescale);
		}
		if(parameter.checkIfParameterExists("robotinoAPITask", "scheduler")) {
			parameter.getString("robotinoAPITask", "scheduler", connections.robotinoAPITask.scheduler);
		}
		if(parameter.checkIfParameterExists("robotinoAPITask", "priority")) {
			parameter.getInteger("robotinoAPITask", "priority", connections.robotinoAPITask.priority);
		}
		if(parameter.checkIfParameterExists("robotinoAPITask", "cpuAffinity")) {
			parameter.getInteger("robotinoAPITask", "cpuAffinity", connections.robotinoAPITask.cpuAffinity);
		}
		if(parameter.checkIfParameterExists("LocalizationEventServiceInHandler", "prescale")) {
			parameter.getInteger("LocalizationEventServiceInHandler", "prescale", connections.localizationEventServiceInHandler.prescale);
		}
		if(parameter.checkIfParameterExists("LocalizationUpdateServiceInHandler", "prescale")) {
			parameter.getInteger("LocalizationUpdateServiceInHandler", "prescale", connections.localizationUpdateServiceInHandler.prescale);
		}
		if(parameter.checkIfParameterExists("NavigationVelocityServiceInHandler", "prescale")) {
			parameter.getInteger("NavigationVelocityServiceInHandler", "prescale", connections.navigationVelocityServiceInHandler.prescale);
		}
		if(parameter.checkIfParameterExists("PowerOutputSendInHandler", "prescale")) {
			parameter.getInteger("PowerOutputSendInHandler", "prescale", connections.powerOutputSendInHandler.prescale);
		}
		
		// load parameters for OpcUaBackendComponentGeneratorExtension
		
		// load parameters for ComponentRobotinoBaseServerROSExtension
		
		// load parameters for PlainOpcUaComponentRobotinoBaseServerExtension
		
		
		// load parameters for all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->loadParameters(parameter);
		}
		
		paramHandler.loadParameter(parameter);
	
	} catch (const SmartACE::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
