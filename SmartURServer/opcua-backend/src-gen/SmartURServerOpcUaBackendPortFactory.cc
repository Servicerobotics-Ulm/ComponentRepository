//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartURServerOpcUaBackendPortFactory.hh"

// include all potentially required pattern implementations
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/PushClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/EventClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QClientOPCUA.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/SendClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QueryClient.hpp>

#include <SeRoNetSDK/SeRoNet/OPCUA/Server/PushServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/EventServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/SendServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/QueryServer.hpp>

// include referenced CommunicationObject SeRoNetSDK self description implementations
#include "CommManipulatorObjectsOpcUa/CommManipulatorEventResultOpcUa.hh"
#include "DomainVisionOpcUa/Comm3dPointCloudOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommBaseStateOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommScanEventStateOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorEventStateOpcUa.hh"
#include "CommRobotinoObjectsOpcUa/CommDigitalInputEventResultOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorRequestScan3dOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommMobileManipulatorStateOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorIdOpcUa.hh"
#include "CommRobotinoObjectsOpcUa/CommRobotinoIOValuesOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorTrajectoryOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorEventParameterOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommVoidOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommMobileLaserScanOpcUa.hh"
#include "CommRobotinoObjectsOpcUa/CommDigitalInputEventParameterOpcUa.hh"
#include "CommRobotinoObjectsOpcUa/CommDigitalInputEventStateOpcUa.hh"

// create a static instance of the OpcUaBackendPortFactory
static SmartURServerOpcUaBackendPortFactory OpcUaBackendPortFactory;

SmartURServerOpcUaBackendPortFactory::SmartURServerOpcUaBackendPortFactory()
{  
	componentImpl = 0;
	SmartURServer::instance()->addPortFactory("OpcUa_SeRoNet", this);
}

SmartURServerOpcUaBackendPortFactory::~SmartURServerOpcUaBackendPortFactory()
{  }

void SmartURServerOpcUaBackendPortFactory::initialize(SmartURServer *component, int argc, char* argv[])
{
	componentImpl = new SeRoNet::Utils::Component(component->connections.component.name);
}

int SmartURServerOpcUaBackendPortFactory::onStartup()
{
	if (!component_thread.joinable()) {
    	component_thread = std::thread(&SmartURServerOpcUaBackendPortFactory::task_execution, this);
    	return 0;
    }
	return -1;
}

Smart::IPushClientPattern<CommBasicObjects::CommBaseState> * SmartURServerOpcUaBackendPortFactory::createBaseStateServiceIn()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommBasicObjects::CommBaseState>(componentImpl);
}

Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommBasicObjects::CommMobileLaserScan> * SmartURServerOpcUaBackendPortFactory::createLaserQueryServiceReq()
{
	return new SeRoNet::OPCUA::Client::QueryClient<CommBasicObjects::CommVoid, CommBasicObjects::CommMobileLaserScan>(componentImpl);
}


Smart::IPushServerPattern<CommManipulatorObjects::CommMobileManipulatorState> * SmartURServerOpcUaBackendPortFactory::createPosePushServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::PushServer<CommManipulatorObjects::CommMobileManipulatorState>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<CommManipulatorObjects::CommManipulatorId, DomainVision::Comm3dPointCloud> * SmartURServerOpcUaBackendPortFactory::createScan3dQueryServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::QueryServer<CommManipulatorObjects::CommManipulatorId, DomainVision::Comm3dPointCloud>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<CommRobotinoObjects::CommRobotinoIOValues, CommRobotinoObjects::CommRobotinoIOValues> * SmartURServerOpcUaBackendPortFactory::createIoQueryServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::QueryServer<CommRobotinoObjects::CommRobotinoIOValues, CommRobotinoObjects::CommRobotinoIOValues>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState> * SmartURServerOpcUaBackendPortFactory::createPoseQueryServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::QueryServer<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState>(componentImpl, serviceName);
}

Smart::IEventServerPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommManipulatorId, CommManipulatorObjects::CommScanEventState> * SmartURServerOpcUaBackendPortFactory::createScan3dEventServer(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommBasicObjects::CommVoid, CommManipulatorObjects::CommManipulatorId, CommManipulatorObjects::CommScanEventState>> scan3dEventServerEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<CommBasicObjects::CommVoid, CommManipulatorObjects::CommManipulatorId, CommManipulatorObjects::CommScanEventState>(componentImpl, serviceName, scan3dEventServerEventTestHandler);
}

Smart::IEventServerPattern<CommRobotinoObjects::CommDigitalInputEventParameter, CommRobotinoObjects::CommDigitalInputEventResult, CommRobotinoObjects::CommDigitalInputEventState> * SmartURServerOpcUaBackendPortFactory::createDigitalInputEventServer(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommRobotinoObjects::CommDigitalInputEventParameter, CommRobotinoObjects::CommDigitalInputEventResult, CommRobotinoObjects::CommDigitalInputEventState>> digitalInputEventServerEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<CommRobotinoObjects::CommDigitalInputEventParameter, CommRobotinoObjects::CommDigitalInputEventResult, CommRobotinoObjects::CommDigitalInputEventState>(componentImpl, serviceName, digitalInputEventServerEventTestHandler);
}

Smart::ISendServerPattern<CommManipulatorObjects::CommManipulatorTrajectory> * SmartURServerOpcUaBackendPortFactory::createTrajectorySendServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::SendServer<CommManipulatorObjects::CommManipulatorTrajectory>(componentImpl, serviceName);
}

Smart::IEventServerPattern<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult, CommManipulatorObjects::CommManipulatorEventState> * SmartURServerOpcUaBackendPortFactory::createManipulatorEventServiceOut(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult, CommManipulatorObjects::CommManipulatorEventState>> manipulatorEventServiceOutEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult, CommManipulatorObjects::CommManipulatorEventState>(componentImpl, serviceName, manipulatorEventServiceOutEventTestHandler);
}

Smart::ISendServerPattern<CommManipulatorObjects::CommManipulatorRequestScan3d> * SmartURServerOpcUaBackendPortFactory::createRequestScan3dSendServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::SendServer<CommManipulatorObjects::CommManipulatorRequestScan3d>(componentImpl, serviceName);
}


int SmartURServerOpcUaBackendPortFactory::task_execution()
{
	componentImpl->run();
	return 0;
}

int SmartURServerOpcUaBackendPortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	// stop component-internal infrastructure
	componentImpl->stopRunning();
	// wait on component thread to exit
	if (component_thread.joinable()) {
		// FIXME: don't wait infinetly (use timeoutTime here)
    	component_thread.join();
    }
	return 0;
}

void SmartURServerOpcUaBackendPortFactory::destroy()
{
	// clean-up component's internally used resources
	delete componentImpl;
}
