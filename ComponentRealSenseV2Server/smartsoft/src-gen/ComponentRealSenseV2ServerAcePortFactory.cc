//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "ComponentRealSenseV2ServerAcePortFactory.hh"

// create a static instance of the default AcePortFactory
static ComponentRealSenseV2ServerAcePortFactory acePortFactory;

ComponentRealSenseV2ServerAcePortFactory::ComponentRealSenseV2ServerAcePortFactory()
{  
	componentImpl = 0;
	ComponentRealSenseV2Server::instance()->addPortFactory("ACE_SmartSoft", this);
}

ComponentRealSenseV2ServerAcePortFactory::~ComponentRealSenseV2ServerAcePortFactory()
{  }

void ComponentRealSenseV2ServerAcePortFactory::initialize(ComponentRealSenseV2Server *component, int argc, char* argv[])
{
	if(component->connections.component.defaultScheduler != "DEFAULT") {
		ACE_Sched_Params sched_params(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(component->connections.component.defaultScheduler == "FIFO") {
			sched_params.policy(ACE_SCHED_FIFO);
			sched_params.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(component->connections.component.defaultScheduler == "RR") {
			sched_params.policy(ACE_SCHED_RR);
			sched_params.priority(ACE_THR_PRI_RR_MIN);
		}
		// create new instance of the SmartSoft component with customized scheuling parameters 
		componentImpl = new ComponentRealSenseV2ServerImpl(component->connections.component.name, argc, argv, sched_params);
	} else {
		// create new instance of the SmartSoft component
		componentImpl = new ComponentRealSenseV2ServerImpl(component->connections.component.name, argc, argv);
	}
}

int ComponentRealSenseV2ServerAcePortFactory::onStartup()
{
	return componentImpl->startComponentInfrastructure();
}

Smart::IPushClientPattern<CommManipulatorObjects::CommMobileManipulatorState> * ComponentRealSenseV2ServerAcePortFactory::createUrPosePushTimedClient()
{
	return new SmartACE::PushClient<CommManipulatorObjects::CommMobileManipulatorState>(componentImpl);
}

Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState> * ComponentRealSenseV2ServerAcePortFactory::createUrPoseQueryClient()
{
	return new SmartACE::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState>(componentImpl);
}

Smart::IPushClientPattern<CommBasicObjects::CommBaseState> * ComponentRealSenseV2ServerAcePortFactory::createBasePushTimedClient()
{
	return new SmartACE::PushClient<CommBasicObjects::CommBaseState>(componentImpl);
}

Smart::IPushClientPattern<CommBasicObjects::CommDevicePoseState> * ComponentRealSenseV2ServerAcePortFactory::createPtuPosePushNewestClient()
{
	return new SmartACE::PushClient<CommBasicObjects::CommDevicePoseState>(componentImpl);
}


Smart::IPushServerPattern<DomainVision::CommVideoImage> * ComponentRealSenseV2ServerAcePortFactory::createColorImagePushNewestServer(const std::string &serviceName)
{
	return new SmartACE::PushServer<DomainVision::CommVideoImage>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<CommBasicObjects::CommVoid, DomainVision::CommVideoImage> * ComponentRealSenseV2ServerAcePortFactory::createColorImageQueryServer(const std::string &serviceName)
{
	return new SmartACE::QueryServer<CommBasicObjects::CommVoid, DomainVision::CommVideoImage>(componentImpl, serviceName);
}

Smart::IPushServerPattern<DomainVision::CommDepthImage> * ComponentRealSenseV2ServerAcePortFactory::createDepthPushNewestServer(const std::string &serviceName)
{
	return new SmartACE::PushServer<DomainVision::CommDepthImage>(componentImpl, serviceName);
}

Smart::IPushServerPattern<DomainVision::CommRGBDImage> * ComponentRealSenseV2ServerAcePortFactory::createImagePushNewestServer(const std::string &serviceName)
{
	return new SmartACE::PushServer<DomainVision::CommRGBDImage>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<CommBasicObjects::CommVoid, DomainVision::CommRGBDImage> * ComponentRealSenseV2ServerAcePortFactory::createImageQueryServer(const std::string &serviceName)
{
	return new SmartACE::QueryServer<CommBasicObjects::CommVoid, DomainVision::CommRGBDImage>(componentImpl, serviceName);
}


SmartACE::SmartComponent* ComponentRealSenseV2ServerAcePortFactory::getComponentImpl()
{
	return componentImpl;
}

int ComponentRealSenseV2ServerAcePortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	componentImpl->stopComponentInfrastructure(timeoutTime);
	return 0;
}

void ComponentRealSenseV2ServerAcePortFactory::destroy()
{
	// clean-up component's internally used resources (internally used communication middleware) 
	componentImpl->cleanUpComponentResources();
	delete componentImpl;
}
