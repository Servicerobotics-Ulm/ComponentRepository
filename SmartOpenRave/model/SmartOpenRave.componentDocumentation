ComponentDocumentation SmartOpenRave {
	
	Description : "NOTE: THIS COMPONENT PROJECT ONLY CONTAINS A COMPONENT HULL. IMPLEMENTATION OF THIS COMPONENT IS WORK IN PROGRESS. YOU CAN USE THIS COMPONENT HULL TO FILL IN YOUR OWN IMPLEMENTATION.
		This component is based on the OpenRAVE framework. It allows to plan a trajectory to a given point with the specified manipulator. The path planning performs collision free manipulation by taking, for example, obstacles in the scene into account. The scene can be loaded from a XML file or via an object recognition. Furthermore it is possible to plan higher level tasks like grasping an object and putting it on a table. All coordinates are on the robot coordinate system."
	License : "	LGPL"
	HardwareRequirements : "-"
	Purpose : "Manipulation"
	
	NeutralMode : "The component does not perform any planning or IK calculation. It accepts parameters."
	ComponentMode Trajectory : "The component can plan paths or plan higher level tasks like grasping an object and place it somewhere."
	ComponentMode Demonstration : "The component just synchronizes the modeled manipulator with the real manipulator. This state is mainly for testing purpose."
	ComponentMode Simulation : "The component does not send any trajectory to the real manipulator. It computes all IK solutions and plans path as in ''trajectory'' state."

	
//	ComponentPort trajectorySendClient{
//		Description : "Connect this send client service to the real manipulator component, e.g. SmartKatanaServer. Via this port the trajectory which has been planned is sent to the real manipulator."
//		NeutralMode : "The port is neutral and does nothing."
//		ComponentMode trajectory : "The port sends the planned trajectroy to the manipulator."
//		ComponentMode demonstration : "	The port is neutral and does nothing."
//		ComponentMode simulation : "The port is neutral and does nothing."
//	}

	ComponentPort MobileManipulatorStateServiceIn {
		Description : "Connect this client service to the real manipulator component (e.g. SmartKatanaServer) to receive the current joint configuration and tool center point of the manipulator."
		NeutralMode : "The port is neutral and does nothing."
		ComponentMode Trajectory : "The port receives new updates from the server."
		ComponentMode Demonstration : "The port receives new updates from the server."
		ComponentMode Simulation : "The port receives new updates from the server."
	}

	ComponentPort ManipulatorEventServiceIn {
		Description : "Connect this client service to the real manipulator component to receive events. The events are important for the path planning. For example it is necessary to receive the \"GOAL_REACHED\" event to know if the real manipulator is ready to receive a next trajectory."
		NeutralMode : "The port is neutral and does nothing."
		ComponentMode Trajectory : "The port receives new events from the server."
		ComponentMode Demonstration : "The port receives new events from the server."
		ComponentMode Simulation : "The port receives new events from the server."
	}

	ComponentPort EnvironmentQueryServiceReq {
		Description : "Connect this query client service to an object recognition to load an environment from it. The environment contains serveral objects which will be loaded into OpenRAVE. These objects will be considered in the path planning process. If no object recognition is available it is possible to load an environment from a file which can be specified in the ini-configuration."
		NeutralMode : "The port is neutral and does nothing."
		ComponentMode Trajectory : "The port queries the environment with the objects in it."
		ComponentMode Demonstration : "The port is neutral and does nothing."
	}
	ComponentPort ObjectQueryServiceReq {
		Description : "Connect this query client service to an object recognition to load objects from it. The object has to be loaded from this port to get information about the type and extents of the object."
		NeutralMode : "The port is neutral and does nothing."
		ComponentMode Trajectory : "The port queries the object."
		ComponentMode Demonstration : "	The port is neutral and does nothing."
	}

	ComponentPort PathPlanningRequestIn {
		Description : "Only the first tool center point or joint angle configuration in the communication object is used. For this tool center point or joint angle configuration a path planning is performed. The handler fires events when it begins to plan a trajectory ('PLANNING_PATH') or when a trajectory has been found ('PATH_FOUND') or when no trajectory can be calculated ('NO_PATH_FOUND' if the planning is unsuccessful or 'NO_IKSOLUTION_FOUND' if the inverse kinematic cannot be calculated). The environment has to be loaded before this handler is called over the parameter port. The tool center point in the trajectory must be given in the robot coordinate system."
		NeutralMode : "Port is neutral, does not consume new input while in this state."
		ComponentMode Trajectory : "A path to the given pose is planned and sent to the real manipulator."
		ComponentMode Demonstration : "Port is neutral, does not consume new input while in this state."
		ComponentMode Simulation : "A path to the given pose is planned but not sent to the real manipulator."
	}
//	ComponentPort taskPlanningSendServer{
//		Description : "NOT SUPPORTED YET"
//		State_neutral : ""
//		ComponentMode trajectory : ""
//		ComponentMode demonstration : ""
//	}
	ComponentPort ObjectQueryServiceAnsw {
		Description : "This port returns the pose of the object with the id specified in the request. If the object is unknown an invalid answer object is returned."
		NeutralMode : "Returns pose information of an object."
		ComponentMode Trajectory : "Returns pose information of an object."
		ComponentMode Demonstration : "Returns pose information of an object."
	}
	ComponentPort EventServiceOut {
		Description : " The event state UNKNOWN can be used for activation if the current state is unknown. The port will send the following events:

    					- PLANNING_PATH: Fired when component started planning the path.
    					- PATH_FOUND: Fired when the path planing was successful and a trajectory has been found.
    					- NO_PATH_FOUND: Fired when no trajectory can be found to the specified position.
    					- NO_IKSOLUTION_FOUND: Fired when the inverse kinematic caluclation fails.
    					- MANIPULATOR_SYNC_FAIL: Event is fired if the modeled manipulator cannot be synced with the real manipulator.

						"
    	NeutralMode : "The port is neutral and does nothing."
    	ComponentMode Trajectory : "All events are fired in this state."
    	ComponentMode Demonstration : "All events are fired in this state."
    	ComponentMode Simulation : "All events are fired in this state."
	}
	
	CoordinationSlavePort CoordinationPort {
		DynamicWiringPort : "Slave part of wiring pattern. It is responsible for changing the port connections within the component."
		ParameterPort : "Accepts various parameters to handle the environment and objects in OpenRAVE. PARAMETER_SUCCESS and PARAMETER_FAIL are fired from the handler. Not all parameters fire the mentioned events. See parameter description for further information."
//		NeutralMode : "All parameters are accepted in this state."
//		ComponentMode trajectory : "No parameters are accepted in this state."
//		ComponentMode demonstration : "No parameters are accepted in this state."
//		ComponentMode simulation : "No parameters are accepted in this state."
		SlavePortDescription : "See States for descriptions of possible states and their meaning."
	}
}