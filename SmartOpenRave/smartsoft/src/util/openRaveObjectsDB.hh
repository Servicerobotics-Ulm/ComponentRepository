// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef OPEN_RAVE_OBJECTS_DB_HXX
#define OPEN_RAVE_OBJECTS_DB_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class object_t;
class objectRecDb_t;
class shape_t;
class mesh_t;
class cylinder_t;
class box_t;
class sphere_t;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class object_t: public ::xml_schema::type
{
  public:
  // type
  //
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  ::std::auto_ptr< type_type >
  detach_type ();

  // shape
  //
  typedef ::shape_t shape_type;
  typedef ::xsd::cxx::tree::traits< shape_type, char > shape_traits;

  const shape_type&
  shape () const;

  shape_type&
  shape ();

  void
  shape (const shape_type& x);

  void
  shape (::std::auto_ptr< shape_type > p);

  ::std::auto_ptr< shape_type >
  detach_shape ();

  // Constructors.
  //
  object_t (const type_type&,
            const shape_type&);

  object_t (const type_type&,
            ::std::auto_ptr< shape_type >);

  object_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  object_t (const object_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual object_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  object_t&
  operator= (const object_t& x);

  virtual 
  ~object_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< shape_type > shape_;
};

class objectRecDb_t: public ::xml_schema::type
{
  public:
  // object
  //
  typedef ::object_t object_type;
  typedef ::xsd::cxx::tree::sequence< object_type > object_sequence;
  typedef object_sequence::iterator object_iterator;
  typedef object_sequence::const_iterator object_const_iterator;
  typedef ::xsd::cxx::tree::traits< object_type, char > object_traits;

  const object_sequence&
  object () const;

  object_sequence&
  object ();

  void
  object (const object_sequence& s);

  // Constructors.
  //
  objectRecDb_t ();

  objectRecDb_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  objectRecDb_t (const objectRecDb_t& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual objectRecDb_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  objectRecDb_t&
  operator= (const objectRecDb_t& x);

  virtual 
  ~objectRecDb_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  object_sequence object_;
};

class shape_t: public ::xml_schema::type
{
  public:
  // mesh
  //
  typedef ::mesh_t mesh_type;
  typedef ::xsd::cxx::tree::optional< mesh_type > mesh_optional;
  typedef ::xsd::cxx::tree::traits< mesh_type, char > mesh_traits;

  const mesh_optional&
  mesh () const;

  mesh_optional&
  mesh ();

  void
  mesh (const mesh_type& x);

  void
  mesh (const mesh_optional& x);

  void
  mesh (::std::auto_ptr< mesh_type > p);

  // cylinder
  //
  typedef ::cylinder_t cylinder_type;
  typedef ::xsd::cxx::tree::optional< cylinder_type > cylinder_optional;
  typedef ::xsd::cxx::tree::traits< cylinder_type, char > cylinder_traits;

  const cylinder_optional&
  cylinder () const;

  cylinder_optional&
  cylinder ();

  void
  cylinder (const cylinder_type& x);

  void
  cylinder (const cylinder_optional& x);

  void
  cylinder (::std::auto_ptr< cylinder_type > p);

  // box
  //
  typedef ::box_t box_type;
  typedef ::xsd::cxx::tree::optional< box_type > box_optional;
  typedef ::xsd::cxx::tree::traits< box_type, char > box_traits;

  const box_optional&
  box () const;

  box_optional&
  box ();

  void
  box (const box_type& x);

  void
  box (const box_optional& x);

  void
  box (::std::auto_ptr< box_type > p);

  // sphere
  //
  typedef ::sphere_t sphere_type;
  typedef ::xsd::cxx::tree::optional< sphere_type > sphere_optional;
  typedef ::xsd::cxx::tree::traits< sphere_type, char > sphere_traits;

  const sphere_optional&
  sphere () const;

  sphere_optional&
  sphere ();

  void
  sphere (const sphere_type& x);

  void
  sphere (const sphere_optional& x);

  void
  sphere (::std::auto_ptr< sphere_type > p);

  // Constructors.
  //
  shape_t ();

  shape_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  shape_t (const shape_t& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual shape_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  shape_t&
  operator= (const shape_t& x);

  virtual 
  ~shape_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  mesh_optional mesh_;
  cylinder_optional cylinder_;
  box_optional box_;
  sphere_optional sphere_;
};

class mesh_t: public ::xml_schema::type
{
  public:
  // filename
  //
  typedef ::xml_schema::string filename_type;
  typedef ::xsd::cxx::tree::traits< filename_type, char > filename_traits;

  const filename_type&
  filename () const;

  filename_type&
  filename ();

  void
  filename (const filename_type& x);

  void
  filename (::std::auto_ptr< filename_type > p);

  ::std::auto_ptr< filename_type >
  detach_filename ();

  // Constructors.
  //
  mesh_t (const filename_type&);

  mesh_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  mesh_t (const mesh_t& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual mesh_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  mesh_t&
  operator= (const mesh_t& x);

  virtual 
  ~mesh_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< filename_type > filename_;
};

class cylinder_t: public ::xml_schema::type
{
  public:
  // radius
  //
  typedef ::xml_schema::double_ radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char, ::xsd::cxx::tree::schema_type::double_ > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  // height
  //
  typedef ::xml_schema::double_ height_type;
  typedef ::xsd::cxx::tree::traits< height_type, char, ::xsd::cxx::tree::schema_type::double_ > height_traits;

  const height_type&
  height () const;

  height_type&
  height ();

  void
  height (const height_type& x);

  // Constructors.
  //
  cylinder_t (const radius_type&,
              const height_type&);

  cylinder_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  cylinder_t (const cylinder_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual cylinder_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  cylinder_t&
  operator= (const cylinder_t& x);

  virtual 
  ~cylinder_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< radius_type > radius_;
  ::xsd::cxx::tree::one< height_type > height_;
};

class box_t: public ::xml_schema::type
{
  public:
  // sizeX
  //
  typedef ::xml_schema::double_ sizeX_type;
  typedef ::xsd::cxx::tree::traits< sizeX_type, char, ::xsd::cxx::tree::schema_type::double_ > sizeX_traits;

  const sizeX_type&
  sizeX () const;

  sizeX_type&
  sizeX ();

  void
  sizeX (const sizeX_type& x);

  // sizeY
  //
  typedef ::xml_schema::double_ sizeY_type;
  typedef ::xsd::cxx::tree::traits< sizeY_type, char, ::xsd::cxx::tree::schema_type::double_ > sizeY_traits;

  const sizeY_type&
  sizeY () const;

  sizeY_type&
  sizeY ();

  void
  sizeY (const sizeY_type& x);

  // sizeZ
  //
  typedef ::xml_schema::double_ sizeZ_type;
  typedef ::xsd::cxx::tree::traits< sizeZ_type, char, ::xsd::cxx::tree::schema_type::double_ > sizeZ_traits;

  const sizeZ_type&
  sizeZ () const;

  sizeZ_type&
  sizeZ ();

  void
  sizeZ (const sizeZ_type& x);

  // Constructors.
  //
  box_t (const sizeX_type&,
         const sizeY_type&,
         const sizeZ_type&);

  box_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  box_t (const box_t& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual box_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  box_t&
  operator= (const box_t& x);

  virtual 
  ~box_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< sizeX_type > sizeX_;
  ::xsd::cxx::tree::one< sizeY_type > sizeY_;
  ::xsd::cxx::tree::one< sizeZ_type > sizeZ_;
};

class sphere_t: public ::xml_schema::type
{
  public:
  // radius
  //
  typedef ::xml_schema::double_ radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char, ::xsd::cxx::tree::schema_type::double_ > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  // Constructors.
  //
  sphere_t (const radius_type&);

  sphere_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  sphere_t (const sphere_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual sphere_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  sphere_t&
  operator= (const sphere_t& x);

  virtual 
  ~sphere_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< radius_type > radius_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::objectRecDb_t >
objectRecDb (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const object_t&);

void
operator<< (::xercesc::DOMElement&, const objectRecDb_t&);

// Serialize to std::ostream.
//

void
objectRecDb (::std::ostream& os,
             const ::objectRecDb_t& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
objectRecDb (::std::ostream& os,
             const ::objectRecDb_t& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
objectRecDb (::std::ostream& os,
             const ::objectRecDb_t& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
objectRecDb (::xercesc::XMLFormatTarget& ft,
             const ::objectRecDb_t& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
objectRecDb (::xercesc::XMLFormatTarget& ft,
             const ::objectRecDb_t& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
objectRecDb (::xercesc::XMLFormatTarget& ft,
             const ::objectRecDb_t& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
objectRecDb (::xercesc::DOMDocument& d,
             const ::objectRecDb_t& x,
             ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
objectRecDb (const ::objectRecDb_t& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const shape_t&);

void
operator<< (::xercesc::DOMElement&, const mesh_t&);

void
operator<< (::xercesc::DOMElement&, const cylinder_t&);

void
operator<< (::xercesc::DOMElement&, const box_t&);

void
operator<< (::xercesc::DOMElement&, const sphere_t&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // OPEN_RAVE_OBJECTS_DB_HXX
