//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef _PATHPLANNING_HH
#define _PATHPLANNING_HH

#include "PathPlanningCore.hh"

#include "OpenRave.hh"
#include "wrapper/ORUtil.hh"
#include "util/MessageHandler.hh"

class PathPlanning  : public PathPlanningCore
{
private:
	virtual void on_SendTrajectoryServiceIn(const CommManipulatorObjects::CommManipulatorTrajectory &input);

	//	void performPreGripperAction(CommManipulatorObjects::ManipulatorGripperAction action);
	//	void performPostGripperAction(CommManipulatorObjects::ManipulatorGripperAction action);
	void handleJointAngles(const CommManipulatorObjects::CommManipulatorTrajectory& r, std::vector<ORUtil::TrajectoryPoint>& openraveTrajectory);
	void handlePoses(const CommManipulatorObjects::CommManipulatorTrajectory& r, std::vector<ORUtil::TrajectoryPoint>& openraveTrajectory);
public:
	PathPlanning(SmartACE::SmartComponent *comp);
	virtual ~PathPlanning();
	
	virtual int on_entry();
	virtual int on_execute();
	virtual int on_exit();
};

#endif
