//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2012 Timo Hegele
//
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommManipulationPlannerObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

#include "TaskPlanning.hh"
#include "SmartOpenRave.hh"

#include <iostream>

TaskPlanning::TaskPlanning(SmartACE::SmartComponent *comp) 
:	TaskPlanningCore(comp)
{
	std::cout << "constructor TaskPlanning\n";
}
TaskPlanning::~TaskPlanning() 
{
	std::cout << "destructor TaskPlanning\n";
}

int TaskPlanning::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int TaskPlanning::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status;
	CommManipulationPlannerObjects::CommManipulationTaskPlanning sendTaskPlanningServiceInObject;
	status = this->taskPlanningRequestInGetUpdate(sendTaskPlanningServiceInObject);

	if(status != Smart::SMART_OK) {
		std::cerr << status << std::endl;
		// return 0;
	} else {
		std::cout << "received: " << sendTaskPlanningServiceInObject << std::endl;
	}

	switch(sendTaskPlanningServiceInObject.getMode())
	{
	case CommManipulationPlannerObjects::ManipulationTaskParameterMode::OPEN_FURNITURE:
		executeOpenFurnitureTask(sendTaskPlanningServiceInObject);
		break;
	default:
		MessageHandler::handleMessage("[TaskPlanningSendHandler::handleSend] Unsupported Mode used",
							MessageHandler::ERROR);
		break;
	}

	std::cout << "Hello from TaskPlanning " << std::endl;

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int TaskPlanning::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}

void TaskPlanning::executeOpenFurnitureTask(const CommManipulationPlannerObjects::CommManipulationTaskPlanning &r)
{
}

void TaskPlanning::setupComponents(SmartACE::EventId& manipEventId, SmartACE::EventId& gripperEventId) throw()
{
}

bool TaskPlanning::planOpenFurnitureTask(const CommManipulationPlannerObjects::CommManipulationTaskPlanning &r,
			std::vector<ORUtil::TrajectoryPoint>& toHandleTraj, std::vector<ORUtil::TrajectoryPoint>& openDoorTraj)
{
}

void TaskPlanning::convertOpenRaveTrajToManipulatorTraj(const std::vector<ORUtil::TrajectoryPoint>& openraveTrajectory,
			CommManipulatorObjects::CommManipulatorTrajectory& manipulatorTrajectory)
{
}

void TaskPlanning::sendTrajToManip(CommManipulatorObjects::CommManipulatorTrajectory traj)
{
}

bool TaskPlanning::waitTillManipPerformed(SmartACE::EventId& eventId)
{
}

void TaskPlanning::closeGripper()
{
}

bool TaskPlanning::waitTillGripperClosed(SmartACE::EventId& eventId)
{
}
