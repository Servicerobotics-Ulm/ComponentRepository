//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartOpenRaveAcePortFactory.hh"

// create a static instance of the default AcePortFactory
static SmartOpenRaveAcePortFactory acePortFactory;

SmartOpenRaveAcePortFactory::SmartOpenRaveAcePortFactory()
{  
	componentImpl = 0;
	SmartOpenRave::instance()->addPortFactory("ACE_SmartSoft", this);
}

SmartOpenRaveAcePortFactory::~SmartOpenRaveAcePortFactory()
{  }

void SmartOpenRaveAcePortFactory::initialize(SmartOpenRave *component, int argc, char* argv[])
{
	if(component->connections.component.defaultScheduler != "DEFAULT") {
		ACE_Sched_Params sched_params(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(component->connections.component.defaultScheduler == "FIFO") {
			sched_params.policy(ACE_SCHED_FIFO);
			sched_params.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(component->connections.component.defaultScheduler == "RR") {
			sched_params.policy(ACE_SCHED_RR);
			sched_params.priority(ACE_THR_PRI_RR_MIN);
		}
		// create new instance of the SmartSoft component with customized scheuling parameters 
		componentImpl = new SmartOpenRaveImpl(component->connections.component.name, argc, argv, sched_params);
	} else {
		// create new instance of the SmartSoft component
		componentImpl = new SmartOpenRaveImpl(component->connections.component.name, argc, argv);
	}
}

int SmartOpenRaveAcePortFactory::onStartup()
{
	return componentImpl->startComponentInfrastructure();
}

Smart::IQueryClientPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionEnvironment,SmartACE::QueryId> * SmartOpenRaveAcePortFactory::createEnvironmentQueryServiceReq()
{
	return new SmartACE::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionEnvironment>(componentImpl);
}

Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommGripperState,SmartACE::QueryId> * SmartOpenRaveAcePortFactory::createGripperStateQueryServiceReq()
{
	return new SmartACE::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommGripperState>(componentImpl);
}

Smart::IPushClientPattern<CommManipulatorObjects::CommGripperState> * SmartOpenRaveAcePortFactory::createGripperStateServiceIn()
{
	return new SmartACE::PushClient<CommManipulatorObjects::CommGripperState>(componentImpl);
}

Smart::IEventClientPattern<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult,SmartACE::EventId> * SmartOpenRaveAcePortFactory::createManipulatorEventServiceIn()
{
	return new SmartACE::EventClient<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult>(componentImpl);
}

Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState,SmartACE::QueryId> * SmartOpenRaveAcePortFactory::createMobileManipulatorStateQueryServiceReq()
{
	return new SmartACE::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState>(componentImpl);
}

Smart::IPushClientPattern<CommManipulatorObjects::CommMobileManipulatorState> * SmartOpenRaveAcePortFactory::createMobileManipulatorStateServiceIn()
{
	return new SmartACE::PushClient<CommManipulatorObjects::CommMobileManipulatorState>(componentImpl);
}

Smart::IQueryClientPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties,SmartACE::QueryId> * SmartOpenRaveAcePortFactory::createObjectQueryServiceReq()
{
	return new SmartACE::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>(componentImpl);
}

Smart::ISendClientPattern<CommManipulatorObjects::CommManipulatorTrajectory> * SmartOpenRaveAcePortFactory::createSendPathTrajectoryOut()
{
	return new SmartACE::SendClient<CommManipulatorObjects::CommManipulatorTrajectory>(componentImpl);
}

Smart::ISendClientPattern<CommManipulatorObjects::CommManipulatorTrajectory> * SmartOpenRaveAcePortFactory::createSendTaskTrajectoryOut()
{
	return new SmartACE::SendClient<CommManipulatorObjects::CommManipulatorTrajectory>(componentImpl);
}


Smart::IEventServerPattern<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState,SmartACE::EventId> * SmartOpenRaveAcePortFactory::createEventServiceOut(const std::string &serviceName, Smart::IEventTestHandler<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState> *eventServiceOutEventTestHandler)
{
	return new SmartACE::EventServer<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState>(componentImpl, serviceName, eventServiceOutEventTestHandler);
}

Smart::IQueryServerPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties,SmartACE::QueryId> * SmartOpenRaveAcePortFactory::createObjectQueryServiceAnsw(const std::string &serviceName)
{
	return new SmartACE::QueryServer<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>(componentImpl, serviceName);
}

Smart::ISendServerPattern<CommManipulatorObjects::CommManipulatorTrajectory> * SmartOpenRaveAcePortFactory::createPathPlanningRequestIn(const std::string &serviceName)
{
	return new SmartACE::SendServer<CommManipulatorObjects::CommManipulatorTrajectory>(componentImpl, serviceName);
}


SmartACE::SmartComponent* SmartOpenRaveAcePortFactory::getComponentImpl()
{
	return componentImpl;
}

int SmartOpenRaveAcePortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	componentImpl->stopComponentInfrastructure(timeoutTime);
	return 0;
}

void SmartOpenRaveAcePortFactory::destroy()
{
	// clean-up component's internally used resources (internally used communication middleware) 
	componentImpl->cleanUpComponentResources();
	delete componentImpl;
}
