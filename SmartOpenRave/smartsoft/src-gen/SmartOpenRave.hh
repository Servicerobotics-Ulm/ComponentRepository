//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _SMARTOPENRAVE_HH
#define _SMARTOPENRAVE_HH

#include <map>
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "SmartOpenRaveCore.hh"

#include "SmartOpenRavePortFactoryInterface.hh"
#include "SmartOpenRaveExtension.hh"

// forward declarations
class SmartOpenRavePortFactoryInterface;
class SmartOpenRaveExtension;

// includes for SmartOpenRaveROSExtension

// includes for PlainOpcUaSmartOpenRaveExtension
// include plain OPC UA device clients
// include plain OPC UA status servers


// include communication objects
#include <CommManipulatorObjects/CommGripperState.hh>
#include <CommManipulatorObjects/CommGripperStateACE.hh>
#include <CommManipulationPlannerObjects/CommManipulationPlannerEventParameter.hh>
#include <CommManipulationPlannerObjects/CommManipulationPlannerEventParameterACE.hh>
#include <CommManipulationPlannerObjects/CommManipulationPlannerEventResult.hh>
#include <CommManipulationPlannerObjects/CommManipulationPlannerEventResultACE.hh>
#include <CommManipulationPlannerObjects/CommManipulationPlannerEventState.hh>
#include <CommManipulationPlannerObjects/CommManipulationPlannerEventStateACE.hh>
#include <CommManipulatorObjects/CommManipulatorEventParameter.hh>
#include <CommManipulatorObjects/CommManipulatorEventParameterACE.hh>
#include <CommManipulatorObjects/CommManipulatorEventResult.hh>
#include <CommManipulatorObjects/CommManipulatorEventResultACE.hh>
#include <CommManipulatorObjects/CommManipulatorEventState.hh>
#include <CommManipulatorObjects/CommManipulatorEventStateACE.hh>
#include <CommManipulatorObjects/CommManipulatorTrajectory.hh>
#include <CommManipulatorObjects/CommManipulatorTrajectoryACE.hh>
#include <CommManipulatorObjects/CommMobileManipulatorState.hh>
#include <CommManipulatorObjects/CommMobileManipulatorStateACE.hh>
#include <CommObjectRecognitionObjects/CommObjectRecognitionEnvironment.hh>
#include <CommObjectRecognitionObjects/CommObjectRecognitionEnvironmentACE.hh>
#include <CommObjectRecognitionObjects/CommObjectRecognitionId.hh>
#include <CommObjectRecognitionObjects/CommObjectRecognitionIdACE.hh>
#include <CommObjectRecognitionObjects/CommObjectRecognitionObjectProperties.hh>
#include <CommObjectRecognitionObjects/CommObjectRecognitionObjectPropertiesACE.hh>
#include <CommBasicObjects/CommVoid.hh>
#include <CommBasicObjects/CommVoidACE.hh>

// include tasks
#include "DemonstrationTask.hh"
#include "EventActivity.hh"
#include "PathPlanning.hh"
#include "TaskPlanning.hh"
// include UpcallManagers
#include "GripperStateServiceInUpcallManager.hh"
#include "ManipulatorEventServiceInUpcallManager.hh"
#include "MobileManipulatorStateServiceInUpcallManager.hh"
#include "PathPlanningRequestInUpcallManager.hh"

// include input-handler
#include "ManipulatorEventServiceInHandler.hh"
// include input-handler
#include "ObjectQueryServiceAnswHandler.hh"

// include handler
#include "CompHandler.hh"

#include "ParameterStateStruct.hh"
#include "ParameterUpdateHandler.hh"

#include "SmartStateChangeHandler.hh"

#define COMP SmartOpenRave::instance()

class SmartOpenRave : public SmartOpenRaveCore {
private:
	static SmartOpenRave *_smartOpenRave;
	
	// constructor
	SmartOpenRave();
	
	// copy-constructor
	SmartOpenRave(const SmartOpenRave& cc);
	
	// destructor
	~SmartOpenRave() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	// helper method that maps a string-name to an according TaskTriggerSubject
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
	// internal map storing the different port-creation factories (that internally map to specific middleware implementations)
	std::map<std::string, SmartOpenRavePortFactoryInterface*> portFactoryRegistry;
	
	// internal map storing various extensions of this component class
	std::map<std::string, SmartOpenRaveExtension*> componentExtensionRegistry;
	
public:
	ParameterStateStruct getGlobalState() const
	{
		return paramHandler.getGlobalState();
	}
	
	ParameterStateStruct getParameters() const
	{
		return paramHandler.getGlobalState();
	}
	
	// define tasks
	Smart::TaskTriggerSubject* demonstrationTaskTrigger;
	DemonstrationTask *demonstrationTask;
	Smart::TaskTriggerSubject* eventActivityTrigger;
	EventActivity *eventActivity;
	Smart::TaskTriggerSubject* pathPlanningTrigger;
	PathPlanning *pathPlanning;
	Smart::TaskTriggerSubject* taskPlanningTrigger;
	TaskPlanning *taskPlanning;
	
	// define input-ports
	// InputPort GripperStateServiceIn
	Smart::IPushClientPattern<CommManipulatorObjects::CommGripperState> *gripperStateServiceIn;
	Smart::InputTaskTrigger<CommManipulatorObjects::CommGripperState> *gripperStateServiceInInputTaskTrigger;
	GripperStateServiceInUpcallManager *gripperStateServiceInUpcallManager;
	// InputPort ManipulatorEventServiceIn
	Smart::IEventClientPattern<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult,SmartACE::EventId> *manipulatorEventServiceIn;
	Smart::InputTaskTrigger<Smart::EventInputType<CommManipulatorObjects::CommManipulatorEventResult,SmartACE::EventId>> *manipulatorEventServiceInInputTaskTrigger;
	ManipulatorEventServiceInUpcallManager *manipulatorEventServiceInUpcallManager;
	// InputPort MobileManipulatorStateServiceIn
	Smart::IPushClientPattern<CommManipulatorObjects::CommMobileManipulatorState> *mobileManipulatorStateServiceIn;
	Smart::InputTaskTrigger<CommManipulatorObjects::CommMobileManipulatorState> *mobileManipulatorStateServiceInInputTaskTrigger;
	MobileManipulatorStateServiceInUpcallManager *mobileManipulatorStateServiceInUpcallManager;
	// InputPort PathPlanningRequestIn
	Smart::ISendServerPattern<CommManipulatorObjects::CommManipulatorTrajectory> *pathPlanningRequestIn;
	Smart::InputTaskTrigger<CommManipulatorObjects::CommManipulatorTrajectory> *pathPlanningRequestInInputTaskTrigger;
	PathPlanningRequestInUpcallManager *pathPlanningRequestInUpcallManager;
	
	// define request-ports
	Smart::IQueryClientPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionEnvironment,SmartACE::QueryId> *environmentQueryServiceReq;
	Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommGripperState,SmartACE::QueryId> *gripperStateQueryServiceReq;
	Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState,SmartACE::QueryId> *mobileManipulatorStateQueryServiceReq;
	Smart::IQueryClientPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties,SmartACE::QueryId> *objectQueryServiceReq;
	
	// define input-handler
	ManipulatorEventServiceInHandler *manipulatorEventServiceInHandler;
	
	// define output-ports
	Smart::IEventServerPattern<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState,SmartACE::EventId> *eventServiceOut;
	Smart::IEventTestHandler<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState> *eventServiceOutEventTestHandler; 
	Smart::ISendClientPattern<CommManipulatorObjects::CommManipulatorTrajectory> *sendPathTrajectoryOut;
	Smart::ISendClientPattern<CommManipulatorObjects::CommManipulatorTrajectory> *sendTaskTrajectoryOut;
	
	// define answer-ports
	Smart::IQueryServerPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties,SmartACE::QueryId> *objectQueryServiceAnsw;
	Smart::QueryServerTaskTrigger<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties,SmartACE::QueryId> *objectQueryServiceAnswInputTaskTrigger;
	
	// define request-handlers
	ObjectQueryServiceAnswHandler *objectQueryServiceAnswHandler;
	
	// definitions of SmartOpenRaveROSExtension
	
	// definitions of PlainOpcUaSmartOpenRaveExtension
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	ParamUpdateHandler paramHandler;
	SmartACE::ParameterSlave *param;
	
	
	/// this method is used to register different PortFactory classes (one for each supported middleware framework)
	void addPortFactory(const std::string &name, SmartOpenRavePortFactoryInterface *portFactory);
	
	SmartACE::SmartComponent* getComponentImpl();
	
	/// this method is used to register different component-extension classes
	void addExtension(SmartOpenRaveExtension *extension);
	
	/// this method allows to access the registered component-extensions (automatically converting to the actuall implementation type)
	template <typename T>
	T* getExtension(const std::string &name) {
		auto it = componentExtensionRegistry.find(name);
		if(it != componentExtensionRegistry.end()) {
			return dynamic_cast<T*>(it->second);
		}
		return 0;
	}
	
	/// initialize component's internal members
	void init(int argc, char *argv[]);
	
	/// execute the component's infrastructure
	void run();
	
	/// clean-up component's resources
	void fini();
	
	/// call this method to set the overall component into the Alive state (i.e. component is then ready to operate)
	void setStartupFinished();
	
	/// connect all component's client ports
	Smart::StatusCode connectAndStartAllServices();
	
	/// start all assocuated Activities
	void startAllTasks();
	
	/// start all associated timers
	void startAllTimers();
	
	Smart::StatusCode connectEnvironmentQueryServiceReq(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectGripperStateQueryServiceReq(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectGripperStateServiceIn(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectManipulatorEventServiceIn(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectMobileManipulatorStateQueryServiceReq(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectMobileManipulatorStateServiceIn(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectObjectQueryServiceReq(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectSendPathTrajectoryOut(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectSendTaskTrajectoryOut(const std::string &serverName, const std::string &serviceName);

	// return singleton instance
	static SmartOpenRave* instance()
	{
		if(_smartOpenRave == 0) {
			_smartOpenRave = new SmartOpenRave();
		}
		return _smartOpenRave;
	}
	
	static void deleteInstance() {
		if(_smartOpenRave != 0) {
			delete _smartOpenRave;
		}
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct DemonstrationTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} demonstrationTask;
		struct EventActivity_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} eventActivity;
		struct PathPlanning_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} pathPlanning;
		struct TaskPlanning_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} taskPlanning;
		
		//--- upcall parameter ---
		struct ManipulatorEventServiceInHandler_struct {
			int prescale;
		} manipulatorEventServiceInHandler;
		
		//--- server port parameter ---
		struct EventServiceOut_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} eventServiceOut;
		struct ObjectQueryServiceAnsw_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} objectQueryServiceAnsw;
		struct PathPlanningRequestIn_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} pathPlanningRequestIn;
	
		//--- client port parameter ---
		struct EnvironmentQueryServiceReq_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} environmentQueryServiceReq;
		struct GripperStateQueryServiceReq_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} gripperStateQueryServiceReq;
		struct GripperStateServiceIn_struct {
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} gripperStateServiceIn;
		struct ManipulatorEventServiceIn_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} manipulatorEventServiceIn;
		struct MobileManipulatorStateQueryServiceReq_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} mobileManipulatorStateQueryServiceReq;
		struct MobileManipulatorStateServiceIn_struct {
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} mobileManipulatorStateServiceIn;
		struct ObjectQueryServiceReq_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} objectQueryServiceReq;
		struct SendPathTrajectoryOut_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} sendPathTrajectoryOut;
		struct SendTaskTrajectoryOut_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} sendTaskTrajectoryOut;
		
		// -- parameters for SmartOpenRaveROSExtension
		
		// -- parameters for PlainOpcUaSmartOpenRaveExtension
		
	} connections;
};
#endif
