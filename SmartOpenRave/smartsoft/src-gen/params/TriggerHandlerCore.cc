//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "TriggerHandlerCore.hh"


//
// trigger internal handler methods
//

	// handle CONSTRAINED_PATH
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_CONSTRAINED_PATHCore(const double &fromHeight, const double &toHeight, const double &fromDepth, const double &toDepth, const double &fromSide, const double &toSide, const double &fromAzimuth, const double &toAzimuth, const double &fromElevation, const double &toElevation, const double &fromRoll, const double &toRoll)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_CONSTRAINED_PATH(fromHeight, toHeight, fromDepth, toDepth, fromSide, toSide, fromAzimuth, toAzimuth, fromElevation, toElevation, fromRoll, toRoll);
	}

	// handle ENV_CLEAR
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_CLEARCore()
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_CLEAR();
	}

	// handle ENV_LOAD_FILE
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_FILECore(const int &fileID)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_FILE(fileID);
	}

	// handle ENV_LOAD_OBJECTRECOGNITION
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_OBJECTRECOGNITIONCore(const int &envID)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_OBJECTRECOGNITION(envID);
	}

	// handle ENV_SAVE_FILE
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_SAVE_FILECore()
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_SAVE_FILE();
	}

	// handle GRASPING_CENTERED
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_CENTEREDCore(const double &fromHeight, const double &toHeight, const double &fromDepth, const double &toDepth, const double &fromSide, const double &toSide, const double &fromAzimuth, const double &toAzimuth, const double &fromElevation, const double &toElevation, const double &fromRoll, const double &toRoll)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_CENTERED(fromHeight, toHeight, fromDepth, toDepth, fromSide, toSide, fromAzimuth, toAzimuth, fromElevation, toElevation, fromRoll, toRoll);
	}

	// handle GRASPING_NONE
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_NONECore()
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_NONE();
	}

	// handle GRASPING_SIMPLE
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_SIMPLECore(const double &fromHeight, const double &toHeight, const double &fromDepth, const double &toDepth, const double &fromSide, const double &toSide, const double &fromAzimuth, const double &toAzimuth, const double &fromElevation, const double &toElevation, const double &fromRoll, const double &toRoll)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_SIMPLE(fromHeight, toHeight, fromDepth, toDepth, fromSide, toSide, fromAzimuth, toAzimuth, fromElevation, toElevation, fromRoll, toRoll);
	}

	// handle NORMAL_PATH
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_NORMAL_PATHCore()
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_NORMAL_PATH();
	}

	// handle OBJ_ADD
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_ADDCore(const int &objectID)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_ADD(objectID);
	}

	// handle OBJ_COMPUTEGRASPTABLE
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_COMPUTEGRASPTABLECore(const int &objectID)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_COMPUTEGRASPTABLE(objectID);
	}

	// handle OBJ_DELETE
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_DELETECore(const int &objectID)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_DELETE(objectID);
	}

	// handle OBJ_MOVE
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_MOVECore(const int &objectID, const double &x, const double &y, const double &z, const double &yaw, const double &pitch, const double &roll)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_MOVE(objectID, x, y, z, yaw, pitch, roll);
	}

	// handle PLANNING_GRASPOBJ
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_GRASPOBJCore(const int &objectID)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_GRASPOBJ(objectID);
	}

	// handle PLANNING_RELEASEOBJ
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_RELEASEOBJCore(const int &objectID)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_RELEASEOBJ(objectID);
	}

	// handle PLAN_FURNITURE_MANIPUATION_TASK
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_FURNITURE_MANIPUATION_TASKCore(const PLAN_FURNITURE_MANIPUATION_TASKType::modeType &mode, const unsigned int &furnitureIdentifier, const unsigned int &doorIdentifier, const double &openAmount)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_FURNITURE_MANIPUATION_TASK(mode, furnitureIdentifier, doorIdentifier, openAmount);
	}

	// handle PLAN_PATH_TARGET_JOINT_ANGLES
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_JOINT_ANGLESCore(const std::list<double> &angles)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_JOINT_ANGLES(angles);
	}

	// handle PLAN_PATH_TARGET_TCP_POSE
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_TCP_POSECore(const double &x, const double &y, const double &z, const double &azimuth, const double &elevation, const double &roll)
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_TCP_POSE(x, y, z, azimuth, elevation, roll);
	}

	// handle SIMULATION_PLAN_ALL
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_PLAN_ALLCore()
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_PLAN_ALL();
	}

	// handle SIMULATION_TEST_IK_ONLY
	void TriggerHandlerCore::handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_TEST_IK_ONLYCore()
	{
		this->handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_TEST_IK_ONLY();
	}

//
// extended trigger internal handler methods
//
