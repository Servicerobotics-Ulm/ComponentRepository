//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "SmartOpenRave.hh"
#include "smartTimedTaskTrigger.h"
//FIXME: implement logging
//#include "smartGlobalLogger.hh"

// the ace port-factory is used as a default port-mapping
#include "SmartOpenRaveAcePortFactory.hh"

#include "EventServiceOutEventTestHandler.hh"

// initialize static singleton pointer to zero
SmartOpenRave* SmartOpenRave::_smartOpenRave = 0;

// constructor
SmartOpenRave::SmartOpenRave()
{
	std::cout << "constructor of SmartOpenRave\n";
	
	// set all pointer members to NULL
	//coordinationPort = NULL;
	demonstrationTask = NULL;
	demonstrationTaskTrigger = NULL;
	environmentQueryServiceReq = NULL;
	eventActivity = NULL;
	eventActivityTrigger = NULL;
	eventServiceOut = NULL;
	eventServiceOutEventTestHandler = NULL; 
	gripperStateQueryServiceReq = NULL;
	gripperStateServiceIn = NULL;
	gripperStateServiceInInputTaskTrigger = NULL;
	gripperStateServiceInUpcallManager = NULL;
	manipulatorEventServiceIn = NULL;
	manipulatorEventServiceInInputTaskTrigger = NULL;
	manipulatorEventServiceInUpcallManager = NULL;
	manipulatorEventServiceInHandler = NULL;
	mobileManipulatorStateQueryServiceReq = NULL;
	mobileManipulatorStateServiceIn = NULL;
	mobileManipulatorStateServiceInInputTaskTrigger = NULL;
	mobileManipulatorStateServiceInUpcallManager = NULL;
	objectQueryServiceAnsw = NULL;
	objectQueryServiceAnswInputTaskTrigger = NULL;
	objectQueryServiceAnswHandler = NULL;
	objectQueryServiceReq = NULL;
	pathPlanning = NULL;
	pathPlanningTrigger = NULL;
	pathPlanningRequestIn = NULL;
	pathPlanningRequestInInputTaskTrigger = NULL;
	pathPlanningRequestInUpcallManager = NULL;
	sendPathTrajectoryOut = NULL;
	sendTaskTrajectoryOut = NULL;
	//smartOpenRaveParams = NULL;
	taskPlanning = NULL;
	taskPlanningTrigger = NULL;
	stateChangeHandler = NULL;
	stateSlave = NULL;
	wiringSlave = NULL;
	param = NULL;
	
	// set default ini parameter values
	connections.component.name = "SmartOpenRave";
	connections.component.initialComponentMode = "Neutral";
	connections.component.defaultScheduler = "DEFAULT";
	connections.component.useLogger = false;
	
	connections.eventServiceOut.serviceName = "EventServiceOut";
	connections.eventServiceOut.roboticMiddleware = "ACE_SmartSoft";
	connections.objectQueryServiceAnsw.serviceName = "ObjectQueryServiceAnsw";
	connections.objectQueryServiceAnsw.roboticMiddleware = "ACE_SmartSoft";
	connections.pathPlanningRequestIn.serviceName = "PathPlanningRequestIn";
	connections.pathPlanningRequestIn.roboticMiddleware = "ACE_SmartSoft";
	connections.environmentQueryServiceReq.initialConnect = false;
	connections.environmentQueryServiceReq.wiringName = "EnvironmentQueryServiceReq";
	connections.environmentQueryServiceReq.serverName = "unknown";
	connections.environmentQueryServiceReq.serviceName = "unknown";
	connections.environmentQueryServiceReq.interval = 1;
	connections.environmentQueryServiceReq.roboticMiddleware = "ACE_SmartSoft";
	connections.gripperStateQueryServiceReq.initialConnect = false;
	connections.gripperStateQueryServiceReq.wiringName = "GripperStateQueryServiceReq";
	connections.gripperStateQueryServiceReq.serverName = "unknown";
	connections.gripperStateQueryServiceReq.serviceName = "unknown";
	connections.gripperStateQueryServiceReq.interval = 1;
	connections.gripperStateQueryServiceReq.roboticMiddleware = "ACE_SmartSoft";
	connections.gripperStateServiceIn.wiringName = "GripperStateServiceIn";
	connections.gripperStateServiceIn.serverName = "unknown";
	connections.gripperStateServiceIn.serviceName = "unknown";
	connections.gripperStateServiceIn.interval = 1;
	connections.gripperStateServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.manipulatorEventServiceIn.initialConnect = false;
	connections.manipulatorEventServiceIn.wiringName = "ManipulatorEventServiceIn";
	connections.manipulatorEventServiceIn.serverName = "unknown";
	connections.manipulatorEventServiceIn.serviceName = "unknown";
	connections.manipulatorEventServiceIn.interval = 1;
	connections.manipulatorEventServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.mobileManipulatorStateQueryServiceReq.initialConnect = false;
	connections.mobileManipulatorStateQueryServiceReq.wiringName = "MobileManipulatorStateQueryServiceReq";
	connections.mobileManipulatorStateQueryServiceReq.serverName = "unknown";
	connections.mobileManipulatorStateQueryServiceReq.serviceName = "unknown";
	connections.mobileManipulatorStateQueryServiceReq.interval = 1;
	connections.mobileManipulatorStateQueryServiceReq.roboticMiddleware = "ACE_SmartSoft";
	connections.mobileManipulatorStateServiceIn.wiringName = "MobileManipulatorStateServiceIn";
	connections.mobileManipulatorStateServiceIn.serverName = "unknown";
	connections.mobileManipulatorStateServiceIn.serviceName = "unknown";
	connections.mobileManipulatorStateServiceIn.interval = 1;
	connections.mobileManipulatorStateServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.objectQueryServiceReq.initialConnect = false;
	connections.objectQueryServiceReq.wiringName = "ObjectQueryServiceReq";
	connections.objectQueryServiceReq.serverName = "unknown";
	connections.objectQueryServiceReq.serviceName = "unknown";
	connections.objectQueryServiceReq.interval = 1;
	connections.objectQueryServiceReq.roboticMiddleware = "ACE_SmartSoft";
	connections.sendPathTrajectoryOut.initialConnect = false;
	connections.sendPathTrajectoryOut.wiringName = "SendPathTrajectoryOut";
	connections.sendPathTrajectoryOut.serverName = "unknown";
	connections.sendPathTrajectoryOut.serviceName = "unknown";
	connections.sendPathTrajectoryOut.interval = 1;
	connections.sendPathTrajectoryOut.roboticMiddleware = "ACE_SmartSoft";
	connections.sendTaskTrajectoryOut.initialConnect = false;
	connections.sendTaskTrajectoryOut.wiringName = "SendTaskTrajectoryOut";
	connections.sendTaskTrajectoryOut.serverName = "unknown";
	connections.sendTaskTrajectoryOut.serviceName = "unknown";
	connections.sendTaskTrajectoryOut.interval = 1;
	connections.sendTaskTrajectoryOut.roboticMiddleware = "ACE_SmartSoft";
	connections.demonstrationTask.minActFreq = 0.0;
	connections.demonstrationTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.demonstrationTask.scheduler = "DEFAULT";
	connections.demonstrationTask.priority = -1;
	connections.demonstrationTask.cpuAffinity = -1;
	connections.eventActivity.minActFreq = 0.0;
	connections.eventActivity.maxActFreq = 0.0;
	// scheduling default parameters
	connections.eventActivity.scheduler = "DEFAULT";
	connections.eventActivity.priority = -1;
	connections.eventActivity.cpuAffinity = -1;
	connections.pathPlanning.minActFreq = 0.0;
	connections.pathPlanning.maxActFreq = 0.0;
	connections.pathPlanning.trigger = "DataTriggered";
	connections.pathPlanning.inPortRef = "PathPlanningRequestIn";	
	connections.pathPlanning.prescale = 1;
	// scheduling default parameters
	connections.pathPlanning.scheduler = "DEFAULT";
	connections.pathPlanning.priority = -1;
	connections.pathPlanning.cpuAffinity = -1;
	connections.taskPlanning.minActFreq = 0.0;
	connections.taskPlanning.maxActFreq = 0.0;
	// scheduling default parameters
	connections.taskPlanning.scheduler = "DEFAULT";
	connections.taskPlanning.priority = -1;
	connections.taskPlanning.cpuAffinity = -1;
	connections.manipulatorEventServiceInHandler.prescale = 1;
	
	// initialize members of SmartOpenRaveROSExtension
	
	// initialize members of PlainOpcUaSmartOpenRaveExtension
	
}

void SmartOpenRave::addPortFactory(const std::string &name, SmartOpenRavePortFactoryInterface *portFactory)
{
	portFactoryRegistry[name] = portFactory;
}

void SmartOpenRave::addExtension(SmartOpenRaveExtension *extension)
{
	componentExtensionRegistry[extension->getName()] = extension;
}

SmartACE::SmartComponent* SmartOpenRave::getComponentImpl()
{
	return dynamic_cast<SmartOpenRaveAcePortFactory*>(portFactoryRegistry["ACE_SmartSoft"])->getComponentImpl();
}

/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void SmartOpenRave::setStartupFinished() {
	stateSlave->setWaitState("Alive");
	std::cout << "ComponentDefinition initialization/startup finished." << std::endl;
}


Smart::StatusCode SmartOpenRave::connectEnvironmentQueryServiceReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.environmentQueryServiceReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = environmentQueryServiceReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->environmentQueryServiceReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartOpenRave::connectGripperStateQueryServiceReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.gripperStateQueryServiceReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = gripperStateQueryServiceReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->gripperStateQueryServiceReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartOpenRave::connectGripperStateServiceIn(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = gripperStateServiceIn->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->gripperStateServiceIn->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	gripperStateServiceIn->subscribe(connections.gripperStateServiceIn.interval);
	return status;
}
Smart::StatusCode SmartOpenRave::connectManipulatorEventServiceIn(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.manipulatorEventServiceIn.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = manipulatorEventServiceIn->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->manipulatorEventServiceIn->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartOpenRave::connectMobileManipulatorStateQueryServiceReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.mobileManipulatorStateQueryServiceReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = mobileManipulatorStateQueryServiceReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->mobileManipulatorStateQueryServiceReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartOpenRave::connectMobileManipulatorStateServiceIn(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = mobileManipulatorStateServiceIn->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->mobileManipulatorStateServiceIn->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	mobileManipulatorStateServiceIn->subscribe(connections.mobileManipulatorStateServiceIn.interval);
	return status;
}
Smart::StatusCode SmartOpenRave::connectObjectQueryServiceReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.objectQueryServiceReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = objectQueryServiceReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->objectQueryServiceReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartOpenRave::connectSendPathTrajectoryOut(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.sendPathTrajectoryOut.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = sendPathTrajectoryOut->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->sendPathTrajectoryOut->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartOpenRave::connectSendTaskTrajectoryOut(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.sendTaskTrajectoryOut.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = sendTaskTrajectoryOut->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->sendTaskTrajectoryOut->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}


/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
Smart::StatusCode SmartOpenRave::connectAndStartAllServices() {
	Smart::StatusCode status = Smart::SMART_OK;
	
	status = connectEnvironmentQueryServiceReq(connections.environmentQueryServiceReq.serverName, connections.environmentQueryServiceReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectGripperStateQueryServiceReq(connections.gripperStateQueryServiceReq.serverName, connections.gripperStateQueryServiceReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectGripperStateServiceIn(connections.gripperStateServiceIn.serverName, connections.gripperStateServiceIn.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectManipulatorEventServiceIn(connections.manipulatorEventServiceIn.serverName, connections.manipulatorEventServiceIn.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectMobileManipulatorStateQueryServiceReq(connections.mobileManipulatorStateQueryServiceReq.serverName, connections.mobileManipulatorStateQueryServiceReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectMobileManipulatorStateServiceIn(connections.mobileManipulatorStateServiceIn.serverName, connections.mobileManipulatorStateServiceIn.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectObjectQueryServiceReq(connections.objectQueryServiceReq.serverName, connections.objectQueryServiceReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectSendPathTrajectoryOut(connections.sendPathTrajectoryOut.serverName, connections.sendPathTrajectoryOut.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectSendTaskTrajectoryOut(connections.sendTaskTrajectoryOut.serverName, connections.sendTaskTrajectoryOut.serviceName);
	if(status != Smart::SMART_OK) return status;
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void SmartOpenRave::startAllTasks() {
	// start task DemonstrationTask
	if(connections.demonstrationTask.scheduler != "DEFAULT") {
		ACE_Sched_Params demonstrationTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.demonstrationTask.scheduler == "FIFO") {
			demonstrationTask_SchedParams.policy(ACE_SCHED_FIFO);
			demonstrationTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.demonstrationTask.scheduler == "RR") {
			demonstrationTask_SchedParams.policy(ACE_SCHED_RR);
			demonstrationTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		demonstrationTask->start(demonstrationTask_SchedParams, connections.demonstrationTask.cpuAffinity);
	} else {
		demonstrationTask->start();
	}
	// start task EventActivity
	if(connections.eventActivity.scheduler != "DEFAULT") {
		ACE_Sched_Params eventActivity_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.eventActivity.scheduler == "FIFO") {
			eventActivity_SchedParams.policy(ACE_SCHED_FIFO);
			eventActivity_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.eventActivity.scheduler == "RR") {
			eventActivity_SchedParams.policy(ACE_SCHED_RR);
			eventActivity_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		eventActivity->start(eventActivity_SchedParams, connections.eventActivity.cpuAffinity);
	} else {
		eventActivity->start();
	}
	// start task PathPlanning
	if(connections.pathPlanning.scheduler != "DEFAULT") {
		ACE_Sched_Params pathPlanning_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.pathPlanning.scheduler == "FIFO") {
			pathPlanning_SchedParams.policy(ACE_SCHED_FIFO);
			pathPlanning_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.pathPlanning.scheduler == "RR") {
			pathPlanning_SchedParams.policy(ACE_SCHED_RR);
			pathPlanning_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		pathPlanning->start(pathPlanning_SchedParams, connections.pathPlanning.cpuAffinity);
	} else {
		pathPlanning->start();
	}
	// start task TaskPlanning
	if(connections.taskPlanning.scheduler != "DEFAULT") {
		ACE_Sched_Params taskPlanning_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.taskPlanning.scheduler == "FIFO") {
			taskPlanning_SchedParams.policy(ACE_SCHED_FIFO);
			taskPlanning_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.taskPlanning.scheduler == "RR") {
			taskPlanning_SchedParams.policy(ACE_SCHED_RR);
			taskPlanning_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		taskPlanning->start(taskPlanning_SchedParams, connections.taskPlanning.cpuAffinity);
	} else {
		taskPlanning->start();
	}
}

/**
 * Start all timers contained in this component
 */
void SmartOpenRave::startAllTimers() {
}


Smart::TaskTriggerSubject* SmartOpenRave::getInputTaskTriggerFromString(const std::string &client)
{
	if(client == "GripperStateServiceIn") return gripperStateServiceInInputTaskTrigger;
	if(client == "ManipulatorEventServiceIn") return manipulatorEventServiceInInputTaskTrigger;
	if(client == "MobileManipulatorStateServiceIn") return mobileManipulatorStateServiceInInputTaskTrigger;
	if(client == "PathPlanningRequestIn") return pathPlanningRequestInInputTaskTrigger;
	
	return NULL;
}


void SmartOpenRave::init(int argc, char *argv[])
{
	try {
		Smart::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		// print out the actual parameters which are used to initialize the component
		std::cout << " \nComponentDefinition Initial-Parameters:\n" << COMP->getParameters() << std::endl;
		
		// initializations of SmartOpenRaveROSExtension
		
		// initializations of PlainOpcUaSmartOpenRaveExtension
		
		
		// initialize all registered port-factories
		for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
		{
			portFactory->second->initialize(this, argc, argv);
		}
		
		// initialize all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->initialize(this, argc, argv);
		}
		
		SmartOpenRavePortFactoryInterface *acePortFactory = portFactoryRegistry["ACE_SmartSoft"];
		if(acePortFactory == 0) {
			std::cerr << "ERROR: acePortFactory NOT instantiated -> exit(-1)" << std::endl;
			exit(-1);
		}
		
		// this pointer is used for backwards compatibility (deprecated: should be removed as soon as all patterns, including coordination, are moved to port-factory)
		SmartACE::SmartComponent *component = dynamic_cast<SmartOpenRaveAcePortFactory*>(acePortFactory)->getComponentImpl();
		
		std::cout << "ComponentDefinition SmartOpenRave is named " << connections.component.name << std::endl;
		
		if(connections.component.useLogger == true) {
			//FIXME: use logging
			//Smart::LOGGER->openLogFileInFolder("data/"+connections.component.name);
			//Smart::LOGGER->startLogging();
		}

		// create event-test handlers (if needed)
		eventServiceOutEventTestHandler = new EventServiceOutEventTestHandler();
		
		// create server ports
		// TODO: set minCycleTime from Ini-file
		eventServiceOut = portFactoryRegistry[connections.eventServiceOut.roboticMiddleware]->createEventServiceOut(connections.eventServiceOut.serviceName, eventServiceOutEventTestHandler);
		objectQueryServiceAnsw = portFactoryRegistry[connections.objectQueryServiceAnsw.roboticMiddleware]->createObjectQueryServiceAnsw(connections.objectQueryServiceAnsw.serviceName);
		objectQueryServiceAnswInputTaskTrigger = new Smart::QueryServerTaskTrigger<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties,SmartACE::QueryId>(objectQueryServiceAnsw);
		pathPlanningRequestIn = portFactoryRegistry[connections.pathPlanningRequestIn.roboticMiddleware]->createPathPlanningRequestIn(connections.pathPlanningRequestIn.serviceName);
		
		// create client ports
		environmentQueryServiceReq = portFactoryRegistry[connections.environmentQueryServiceReq.roboticMiddleware]->createEnvironmentQueryServiceReq();
		gripperStateQueryServiceReq = portFactoryRegistry[connections.gripperStateQueryServiceReq.roboticMiddleware]->createGripperStateQueryServiceReq();
		gripperStateServiceIn = portFactoryRegistry[connections.gripperStateServiceIn.roboticMiddleware]->createGripperStateServiceIn();
		manipulatorEventServiceIn = portFactoryRegistry[connections.manipulatorEventServiceIn.roboticMiddleware]->createManipulatorEventServiceIn();
		mobileManipulatorStateQueryServiceReq = portFactoryRegistry[connections.mobileManipulatorStateQueryServiceReq.roboticMiddleware]->createMobileManipulatorStateQueryServiceReq();
		mobileManipulatorStateServiceIn = portFactoryRegistry[connections.mobileManipulatorStateServiceIn.roboticMiddleware]->createMobileManipulatorStateServiceIn();
		objectQueryServiceReq = portFactoryRegistry[connections.objectQueryServiceReq.roboticMiddleware]->createObjectQueryServiceReq();
		sendPathTrajectoryOut = portFactoryRegistry[connections.sendPathTrajectoryOut.roboticMiddleware]->createSendPathTrajectoryOut();
		sendTaskTrajectoryOut = portFactoryRegistry[connections.sendTaskTrajectoryOut.roboticMiddleware]->createSendTaskTrajectoryOut();
		
		// create InputTaskTriggers and UpcallManagers
		gripperStateServiceInInputTaskTrigger = new Smart::InputTaskTrigger<CommManipulatorObjects::CommGripperState>(gripperStateServiceIn);
		gripperStateServiceInUpcallManager = new GripperStateServiceInUpcallManager(gripperStateServiceIn);
		manipulatorEventServiceInInputTaskTrigger = new Smart::InputTaskTrigger<Smart::EventInputType<CommManipulatorObjects::CommManipulatorEventResult,SmartACE::EventId>>(manipulatorEventServiceIn);
		manipulatorEventServiceInUpcallManager = new ManipulatorEventServiceInUpcallManager(manipulatorEventServiceIn);
		mobileManipulatorStateServiceInInputTaskTrigger = new Smart::InputTaskTrigger<CommManipulatorObjects::CommMobileManipulatorState>(mobileManipulatorStateServiceIn);
		mobileManipulatorStateServiceInUpcallManager = new MobileManipulatorStateServiceInUpcallManager(mobileManipulatorStateServiceIn);
		pathPlanningRequestInInputTaskTrigger = new Smart::InputTaskTrigger<CommManipulatorObjects::CommManipulatorTrajectory>(pathPlanningRequestIn);
		pathPlanningRequestInUpcallManager = new PathPlanningRequestInUpcallManager(pathPlanningRequestIn);
		
		// create input-handler
		manipulatorEventServiceInHandler = new ManipulatorEventServiceInHandler(manipulatorEventServiceIn, connections.manipulatorEventServiceInHandler.prescale);
		
		// create request-handlers
		objectQueryServiceAnswHandler = new ObjectQueryServiceAnswHandler(objectQueryServiceAnsw);
		
		// create state pattern
		stateChangeHandler = new SmartStateChangeHandler();
		stateSlave = new SmartACE::StateSlave(component, stateChangeHandler);
		if (stateSlave->defineStates("Trajectory" ,"trajectory") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion Trajectory.trajectory" << std::endl;
		if (stateSlave->defineStates("Demonstration" ,"demonstration") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion Demonstration.demonstration" << std::endl;
		if (stateSlave->defineStates("Simulation" ,"simulation") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion Simulation.simulation" << std::endl;
		status = stateSlave->setUpInitialState(connections.component.initialComponentMode);
		if (status != Smart::SMART_OK) std::cerr << status << "; failed setting initial ComponentMode: " << connections.component.initialComponentMode << std::endl;
		// activate state slave
		status = stateSlave->activate();
		if(status != Smart::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		wiringSlave = new SmartACE::WiringSlave(component);
		// add client port to wiring slave
		if(connections.environmentQueryServiceReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionEnvironment>*>(environmentQueryServiceReq)->add(wiringSlave, connections.environmentQueryServiceReq.wiringName);
		}
		if(connections.gripperStateQueryServiceReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommGripperState>*>(gripperStateQueryServiceReq)->add(wiringSlave, connections.gripperStateQueryServiceReq.wiringName);
		}
		if(connections.gripperStateServiceIn.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<CommManipulatorObjects::CommGripperState>*>(gripperStateServiceIn)->add(wiringSlave, connections.gripperStateServiceIn.wiringName);
		}
		if(connections.manipulatorEventServiceIn.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::EventClient<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult>*>(manipulatorEventServiceIn)->add(wiringSlave, connections.manipulatorEventServiceIn.wiringName);
		}
		if(connections.mobileManipulatorStateQueryServiceReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState>*>(mobileManipulatorStateQueryServiceReq)->add(wiringSlave, connections.mobileManipulatorStateQueryServiceReq.wiringName);
		}
		if(connections.mobileManipulatorStateServiceIn.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<CommManipulatorObjects::CommMobileManipulatorState>*>(mobileManipulatorStateServiceIn)->add(wiringSlave, connections.mobileManipulatorStateServiceIn.wiringName);
		}
		if(connections.objectQueryServiceReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>*>(objectQueryServiceReq)->add(wiringSlave, connections.objectQueryServiceReq.wiringName);
		}
		if(connections.sendPathTrajectoryOut.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::SendClient<CommManipulatorObjects::CommManipulatorTrajectory>*>(sendPathTrajectoryOut)->add(wiringSlave, connections.sendPathTrajectoryOut.wiringName);
		}
		if(connections.sendTaskTrajectoryOut.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::SendClient<CommManipulatorObjects::CommManipulatorTrajectory>*>(sendTaskTrajectoryOut)->add(wiringSlave, connections.sendTaskTrajectoryOut.wiringName);
		}
		
		// create parameter slave
		param = new SmartACE::ParameterSlave(component, &paramHandler);
		
		
		// create Task DemonstrationTask
		demonstrationTask = new DemonstrationTask(component);
		// configure input-links
		gripperStateServiceInUpcallManager->attach(demonstrationTask);
		mobileManipulatorStateServiceInUpcallManager->attach(demonstrationTask);
		// configure task-trigger (if task is configurable)
		if(connections.demonstrationTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.demonstrationTask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(demonstrationTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				demonstrationTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task DemonstrationTask" << std::endl;
			}
		} else if(connections.demonstrationTask.trigger == "DataTriggered") {
			demonstrationTaskTrigger = getInputTaskTriggerFromString(connections.demonstrationTask.inPortRef);
			if(demonstrationTaskTrigger != NULL) {
				demonstrationTaskTrigger->attach(demonstrationTask, connections.demonstrationTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.demonstrationTask.inPortRef << " as activation source for Task DemonstrationTask" << std::endl;
			}
		} 
		
		// create Task EventActivity
		eventActivity = new EventActivity(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.eventActivity.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.eventActivity.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(eventActivity);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				eventActivityTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task EventActivity" << std::endl;
			}
		} else if(connections.eventActivity.trigger == "DataTriggered") {
			eventActivityTrigger = getInputTaskTriggerFromString(connections.eventActivity.inPortRef);
			if(eventActivityTrigger != NULL) {
				eventActivityTrigger->attach(eventActivity, connections.eventActivity.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.eventActivity.inPortRef << " as activation source for Task EventActivity" << std::endl;
			}
		} 
		
		// create Task PathPlanning
		pathPlanning = new PathPlanning(component);
		// configure input-links
		pathPlanningRequestInUpcallManager->attach(pathPlanning);
		// configure task-trigger (if task is configurable)
		if(connections.pathPlanning.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.pathPlanning.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(pathPlanning);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				pathPlanningTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task PathPlanning" << std::endl;
			}
		} else if(connections.pathPlanning.trigger == "DataTriggered") {
			pathPlanningTrigger = getInputTaskTriggerFromString(connections.pathPlanning.inPortRef);
			if(pathPlanningTrigger != NULL) {
				pathPlanningTrigger->attach(pathPlanning, connections.pathPlanning.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.pathPlanning.inPortRef << " as activation source for Task PathPlanning" << std::endl;
			}
		} else
		{
			// setup default task-trigger as InputTrigger
			pathPlanningTrigger = getInputTaskTriggerFromString("PathPlanningRequestIn");
			if(pathPlanningTrigger != NULL) {
				pathPlanningTrigger->attach(pathPlanning, connections.pathPlanning.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort PathPlanningRequestIn as activation source for Task PathPlanning" << std::endl;
			}
		}
		
		// create Task TaskPlanning
		taskPlanning = new TaskPlanning(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.taskPlanning.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.taskPlanning.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(taskPlanning);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				taskPlanningTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task TaskPlanning" << std::endl;
			}
		} else if(connections.taskPlanning.trigger == "DataTriggered") {
			taskPlanningTrigger = getInputTaskTriggerFromString(connections.taskPlanning.inPortRef);
			if(taskPlanningTrigger != NULL) {
				taskPlanningTrigger->attach(taskPlanning, connections.taskPlanning.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.taskPlanning.inPortRef << " as activation source for Task TaskPlanning" << std::endl;
			}
		} 
		
		
		// link observers with subjects
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartOpenRave::run()
{
	stateSlave->acquire("init");
	// startup all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onStartup();
	}
	
	// startup all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onStartup();
	}
	stateSlave->release("init");
	
	// do not call this handler within the init state (see above) as this handler internally calls setStartupFinished() (this should be fixed in future)
	compHandler.onStartup();
	
	// this call blocks until the component is commanded to shutdown
	stateSlave->acquire("shutdown");
	
	// shutdown all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onShutdown();
	}
	
	// shutdown all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onShutdown();
	}
	
	if(connections.component.useLogger == true) {
		//FIXME: use logging
		//Smart::LOGGER->stopLogging();
	}
	
	compHandler.onShutdown();
	
	stateSlave->release("shutdown");
}

// clean-up component's resources
void SmartOpenRave::fini()
{
	// unlink all observers
	
	// destroy all task instances
	// unlink all UpcallManagers
	gripperStateServiceInUpcallManager->detach(demonstrationTask);
	mobileManipulatorStateServiceInUpcallManager->detach(demonstrationTask);
	// unlink the TaskTrigger
	if(demonstrationTaskTrigger != NULL){
		demonstrationTaskTrigger->detach(demonstrationTask);
		delete demonstrationTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(eventActivityTrigger != NULL){
		eventActivityTrigger->detach(eventActivity);
		delete eventActivity;
	}
	// unlink all UpcallManagers
	pathPlanningRequestInUpcallManager->detach(pathPlanning);
	// unlink the TaskTrigger
	if(pathPlanningTrigger != NULL){
		pathPlanningTrigger->detach(pathPlanning);
		delete pathPlanning;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(taskPlanningTrigger != NULL){
		taskPlanningTrigger->detach(taskPlanning);
		delete taskPlanning;
	}

	// destroy all input-handler
	delete manipulatorEventServiceInHandler;

	// destroy InputTaskTriggers and UpcallManagers
	delete gripperStateServiceInInputTaskTrigger;
	delete gripperStateServiceInUpcallManager;
	delete manipulatorEventServiceInInputTaskTrigger;
	delete manipulatorEventServiceInUpcallManager;
	delete mobileManipulatorStateServiceInInputTaskTrigger;
	delete mobileManipulatorStateServiceInUpcallManager;
	delete pathPlanningRequestInInputTaskTrigger;
	delete pathPlanningRequestInUpcallManager;

	// destroy client ports
	delete environmentQueryServiceReq;
	delete gripperStateQueryServiceReq;
	delete gripperStateServiceIn;
	delete manipulatorEventServiceIn;
	delete mobileManipulatorStateQueryServiceReq;
	delete mobileManipulatorStateServiceIn;
	delete objectQueryServiceReq;
	delete sendPathTrajectoryOut;
	delete sendTaskTrajectoryOut;

	// destroy server ports
	delete eventServiceOut;
	delete objectQueryServiceAnsw;
	delete objectQueryServiceAnswInputTaskTrigger;
	delete pathPlanningRequestIn;
	// destroy event-test handlers (if needed)
	delete eventServiceOutEventTestHandler;
	
	// destroy request-handlers
	delete objectQueryServiceAnswHandler;
	
	delete stateSlave;
	// destroy state-change-handler
	delete stateChangeHandler;
	
	// destroy all master/slave ports
	delete wiringSlave;
	delete param;
	

	// destroy all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->destroy();
	}

	// destroy all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->destroy();
	}
	
	// destruction of SmartOpenRaveROSExtension
	
	// destruction of PlainOpcUaSmartOpenRaveExtension
	
}

void SmartOpenRave::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	SmartACE::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("SmartOpenRave.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load SmartOpenRave.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: SmartOpenRave.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		SmartACE::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(SmartACE::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(SmartACE::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		parameter.getString("component", "initialComponentMode", connections.component.initialComponentMode);
		if(parameter.checkIfParameterExists("component", "defaultScheduler")) {
			parameter.getString("component", "defaultScheduler", connections.component.defaultScheduler);
		}
		if(parameter.checkIfParameterExists("component", "useLogger")) {
			parameter.getBoolean("component", "useLogger", connections.component.useLogger);
		}
		
		// load parameters for client EnvironmentQueryServiceReq
		parameter.getBoolean("EnvironmentQueryServiceReq", "initialConnect", connections.environmentQueryServiceReq.initialConnect);
		parameter.getString("EnvironmentQueryServiceReq", "serviceName", connections.environmentQueryServiceReq.serviceName);
		parameter.getString("EnvironmentQueryServiceReq", "serverName", connections.environmentQueryServiceReq.serverName);
		parameter.getString("EnvironmentQueryServiceReq", "wiringName", connections.environmentQueryServiceReq.wiringName);
		if(parameter.checkIfParameterExists("EnvironmentQueryServiceReq", "roboticMiddleware")) {
			parameter.getString("EnvironmentQueryServiceReq", "roboticMiddleware", connections.environmentQueryServiceReq.roboticMiddleware);
		}
		// load parameters for client GripperStateQueryServiceReq
		parameter.getBoolean("GripperStateQueryServiceReq", "initialConnect", connections.gripperStateQueryServiceReq.initialConnect);
		parameter.getString("GripperStateQueryServiceReq", "serviceName", connections.gripperStateQueryServiceReq.serviceName);
		parameter.getString("GripperStateQueryServiceReq", "serverName", connections.gripperStateQueryServiceReq.serverName);
		parameter.getString("GripperStateQueryServiceReq", "wiringName", connections.gripperStateQueryServiceReq.wiringName);
		if(parameter.checkIfParameterExists("GripperStateQueryServiceReq", "roboticMiddleware")) {
			parameter.getString("GripperStateQueryServiceReq", "roboticMiddleware", connections.gripperStateQueryServiceReq.roboticMiddleware);
		}
		// load parameters for client GripperStateServiceIn
		parameter.getString("GripperStateServiceIn", "serviceName", connections.gripperStateServiceIn.serviceName);
		parameter.getString("GripperStateServiceIn", "serverName", connections.gripperStateServiceIn.serverName);
		parameter.getString("GripperStateServiceIn", "wiringName", connections.gripperStateServiceIn.wiringName);
		parameter.getInteger("GripperStateServiceIn", "interval", connections.gripperStateServiceIn.interval);
		if(parameter.checkIfParameterExists("GripperStateServiceIn", "roboticMiddleware")) {
			parameter.getString("GripperStateServiceIn", "roboticMiddleware", connections.gripperStateServiceIn.roboticMiddleware);
		}
		// load parameters for client ManipulatorEventServiceIn
		parameter.getBoolean("ManipulatorEventServiceIn", "initialConnect", connections.manipulatorEventServiceIn.initialConnect);
		parameter.getString("ManipulatorEventServiceIn", "serviceName", connections.manipulatorEventServiceIn.serviceName);
		parameter.getString("ManipulatorEventServiceIn", "serverName", connections.manipulatorEventServiceIn.serverName);
		parameter.getString("ManipulatorEventServiceIn", "wiringName", connections.manipulatorEventServiceIn.wiringName);
		if(parameter.checkIfParameterExists("ManipulatorEventServiceIn", "roboticMiddleware")) {
			parameter.getString("ManipulatorEventServiceIn", "roboticMiddleware", connections.manipulatorEventServiceIn.roboticMiddleware);
		}
		// load parameters for client MobileManipulatorStateQueryServiceReq
		parameter.getBoolean("MobileManipulatorStateQueryServiceReq", "initialConnect", connections.mobileManipulatorStateQueryServiceReq.initialConnect);
		parameter.getString("MobileManipulatorStateQueryServiceReq", "serviceName", connections.mobileManipulatorStateQueryServiceReq.serviceName);
		parameter.getString("MobileManipulatorStateQueryServiceReq", "serverName", connections.mobileManipulatorStateQueryServiceReq.serverName);
		parameter.getString("MobileManipulatorStateQueryServiceReq", "wiringName", connections.mobileManipulatorStateQueryServiceReq.wiringName);
		if(parameter.checkIfParameterExists("MobileManipulatorStateQueryServiceReq", "roboticMiddleware")) {
			parameter.getString("MobileManipulatorStateQueryServiceReq", "roboticMiddleware", connections.mobileManipulatorStateQueryServiceReq.roboticMiddleware);
		}
		// load parameters for client MobileManipulatorStateServiceIn
		parameter.getString("MobileManipulatorStateServiceIn", "serviceName", connections.mobileManipulatorStateServiceIn.serviceName);
		parameter.getString("MobileManipulatorStateServiceIn", "serverName", connections.mobileManipulatorStateServiceIn.serverName);
		parameter.getString("MobileManipulatorStateServiceIn", "wiringName", connections.mobileManipulatorStateServiceIn.wiringName);
		parameter.getInteger("MobileManipulatorStateServiceIn", "interval", connections.mobileManipulatorStateServiceIn.interval);
		if(parameter.checkIfParameterExists("MobileManipulatorStateServiceIn", "roboticMiddleware")) {
			parameter.getString("MobileManipulatorStateServiceIn", "roboticMiddleware", connections.mobileManipulatorStateServiceIn.roboticMiddleware);
		}
		// load parameters for client ObjectQueryServiceReq
		parameter.getBoolean("ObjectQueryServiceReq", "initialConnect", connections.objectQueryServiceReq.initialConnect);
		parameter.getString("ObjectQueryServiceReq", "serviceName", connections.objectQueryServiceReq.serviceName);
		parameter.getString("ObjectQueryServiceReq", "serverName", connections.objectQueryServiceReq.serverName);
		parameter.getString("ObjectQueryServiceReq", "wiringName", connections.objectQueryServiceReq.wiringName);
		if(parameter.checkIfParameterExists("ObjectQueryServiceReq", "roboticMiddleware")) {
			parameter.getString("ObjectQueryServiceReq", "roboticMiddleware", connections.objectQueryServiceReq.roboticMiddleware);
		}
		// load parameters for client SendPathTrajectoryOut
		parameter.getBoolean("SendPathTrajectoryOut", "initialConnect", connections.sendPathTrajectoryOut.initialConnect);
		parameter.getString("SendPathTrajectoryOut", "serviceName", connections.sendPathTrajectoryOut.serviceName);
		parameter.getString("SendPathTrajectoryOut", "serverName", connections.sendPathTrajectoryOut.serverName);
		parameter.getString("SendPathTrajectoryOut", "wiringName", connections.sendPathTrajectoryOut.wiringName);
		if(parameter.checkIfParameterExists("SendPathTrajectoryOut", "roboticMiddleware")) {
			parameter.getString("SendPathTrajectoryOut", "roboticMiddleware", connections.sendPathTrajectoryOut.roboticMiddleware);
		}
		// load parameters for client SendTaskTrajectoryOut
		parameter.getBoolean("SendTaskTrajectoryOut", "initialConnect", connections.sendTaskTrajectoryOut.initialConnect);
		parameter.getString("SendTaskTrajectoryOut", "serviceName", connections.sendTaskTrajectoryOut.serviceName);
		parameter.getString("SendTaskTrajectoryOut", "serverName", connections.sendTaskTrajectoryOut.serverName);
		parameter.getString("SendTaskTrajectoryOut", "wiringName", connections.sendTaskTrajectoryOut.wiringName);
		if(parameter.checkIfParameterExists("SendTaskTrajectoryOut", "roboticMiddleware")) {
			parameter.getString("SendTaskTrajectoryOut", "roboticMiddleware", connections.sendTaskTrajectoryOut.roboticMiddleware);
		}
		
		// load parameters for server EventServiceOut
		parameter.getString("EventServiceOut", "serviceName", connections.eventServiceOut.serviceName);
		if(parameter.checkIfParameterExists("EventServiceOut", "roboticMiddleware")) {
			parameter.getString("EventServiceOut", "roboticMiddleware", connections.eventServiceOut.roboticMiddleware);
		}
		// load parameters for server ObjectQueryServiceAnsw
		parameter.getString("ObjectQueryServiceAnsw", "serviceName", connections.objectQueryServiceAnsw.serviceName);
		if(parameter.checkIfParameterExists("ObjectQueryServiceAnsw", "roboticMiddleware")) {
			parameter.getString("ObjectQueryServiceAnsw", "roboticMiddleware", connections.objectQueryServiceAnsw.roboticMiddleware);
		}
		// load parameters for server PathPlanningRequestIn
		parameter.getString("PathPlanningRequestIn", "serviceName", connections.pathPlanningRequestIn.serviceName);
		if(parameter.checkIfParameterExists("PathPlanningRequestIn", "roboticMiddleware")) {
			parameter.getString("PathPlanningRequestIn", "roboticMiddleware", connections.pathPlanningRequestIn.roboticMiddleware);
		}
		
		// load parameters for task DemonstrationTask
		parameter.getDouble("DemonstrationTask", "minActFreqHz", connections.demonstrationTask.minActFreq);
		parameter.getDouble("DemonstrationTask", "maxActFreqHz", connections.demonstrationTask.maxActFreq);
		parameter.getString("DemonstrationTask", "triggerType", connections.demonstrationTask.trigger);
		if(connections.demonstrationTask.trigger == "PeriodicTimer") {
			parameter.getDouble("DemonstrationTask", "periodicActFreqHz", connections.demonstrationTask.periodicActFreq);
		} else if(connections.demonstrationTask.trigger == "DataTriggered") {
			parameter.getString("DemonstrationTask", "inPortRef", connections.demonstrationTask.inPortRef);
			parameter.getInteger("DemonstrationTask", "prescale", connections.demonstrationTask.prescale);
		}
		if(parameter.checkIfParameterExists("DemonstrationTask", "scheduler")) {
			parameter.getString("DemonstrationTask", "scheduler", connections.demonstrationTask.scheduler);
		}
		if(parameter.checkIfParameterExists("DemonstrationTask", "priority")) {
			parameter.getInteger("DemonstrationTask", "priority", connections.demonstrationTask.priority);
		}
		if(parameter.checkIfParameterExists("DemonstrationTask", "cpuAffinity")) {
			parameter.getInteger("DemonstrationTask", "cpuAffinity", connections.demonstrationTask.cpuAffinity);
		}
		// load parameters for task EventActivity
		parameter.getDouble("EventActivity", "minActFreqHz", connections.eventActivity.minActFreq);
		parameter.getDouble("EventActivity", "maxActFreqHz", connections.eventActivity.maxActFreq);
		parameter.getString("EventActivity", "triggerType", connections.eventActivity.trigger);
		if(connections.eventActivity.trigger == "PeriodicTimer") {
			parameter.getDouble("EventActivity", "periodicActFreqHz", connections.eventActivity.periodicActFreq);
		} else if(connections.eventActivity.trigger == "DataTriggered") {
			parameter.getString("EventActivity", "inPortRef", connections.eventActivity.inPortRef);
			parameter.getInteger("EventActivity", "prescale", connections.eventActivity.prescale);
		}
		if(parameter.checkIfParameterExists("EventActivity", "scheduler")) {
			parameter.getString("EventActivity", "scheduler", connections.eventActivity.scheduler);
		}
		if(parameter.checkIfParameterExists("EventActivity", "priority")) {
			parameter.getInteger("EventActivity", "priority", connections.eventActivity.priority);
		}
		if(parameter.checkIfParameterExists("EventActivity", "cpuAffinity")) {
			parameter.getInteger("EventActivity", "cpuAffinity", connections.eventActivity.cpuAffinity);
		}
		// load parameters for task PathPlanning
		parameter.getDouble("PathPlanning", "minActFreqHz", connections.pathPlanning.minActFreq);
		parameter.getDouble("PathPlanning", "maxActFreqHz", connections.pathPlanning.maxActFreq);
		parameter.getString("PathPlanning", "triggerType", connections.pathPlanning.trigger);
		if(connections.pathPlanning.trigger == "PeriodicTimer") {
			parameter.getDouble("PathPlanning", "periodicActFreqHz", connections.pathPlanning.periodicActFreq);
		} else if(connections.pathPlanning.trigger == "DataTriggered") {
			parameter.getString("PathPlanning", "inPortRef", connections.pathPlanning.inPortRef);
			parameter.getInteger("PathPlanning", "prescale", connections.pathPlanning.prescale);
		}
		if(parameter.checkIfParameterExists("PathPlanning", "scheduler")) {
			parameter.getString("PathPlanning", "scheduler", connections.pathPlanning.scheduler);
		}
		if(parameter.checkIfParameterExists("PathPlanning", "priority")) {
			parameter.getInteger("PathPlanning", "priority", connections.pathPlanning.priority);
		}
		if(parameter.checkIfParameterExists("PathPlanning", "cpuAffinity")) {
			parameter.getInteger("PathPlanning", "cpuAffinity", connections.pathPlanning.cpuAffinity);
		}
		// load parameters for task TaskPlanning
		parameter.getDouble("TaskPlanning", "minActFreqHz", connections.taskPlanning.minActFreq);
		parameter.getDouble("TaskPlanning", "maxActFreqHz", connections.taskPlanning.maxActFreq);
		parameter.getString("TaskPlanning", "triggerType", connections.taskPlanning.trigger);
		if(connections.taskPlanning.trigger == "PeriodicTimer") {
			parameter.getDouble("TaskPlanning", "periodicActFreqHz", connections.taskPlanning.periodicActFreq);
		} else if(connections.taskPlanning.trigger == "DataTriggered") {
			parameter.getString("TaskPlanning", "inPortRef", connections.taskPlanning.inPortRef);
			parameter.getInteger("TaskPlanning", "prescale", connections.taskPlanning.prescale);
		}
		if(parameter.checkIfParameterExists("TaskPlanning", "scheduler")) {
			parameter.getString("TaskPlanning", "scheduler", connections.taskPlanning.scheduler);
		}
		if(parameter.checkIfParameterExists("TaskPlanning", "priority")) {
			parameter.getInteger("TaskPlanning", "priority", connections.taskPlanning.priority);
		}
		if(parameter.checkIfParameterExists("TaskPlanning", "cpuAffinity")) {
			parameter.getInteger("TaskPlanning", "cpuAffinity", connections.taskPlanning.cpuAffinity);
		}
		if(parameter.checkIfParameterExists("ManipulatorEventServiceInHandler", "prescale")) {
			parameter.getInteger("ManipulatorEventServiceInHandler", "prescale", connections.manipulatorEventServiceInHandler.prescale);
		}
		
		// load parameters for SmartOpenRaveROSExtension
		
		// load parameters for PlainOpcUaSmartOpenRaveExtension
		
		
		// load parameters for all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->loadParameters(parameter);
		}
		
		paramHandler.loadParameter(parameter);
	
	} catch (const SmartACE::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
