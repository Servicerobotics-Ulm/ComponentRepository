//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef SMARTOPENRAVE_ACE_PORTFACTORY_HH_
#define SMARTOPENRAVE_ACE_PORTFACTORY_HH_

// include ACE/SmartSoft component implementation
#include "SmartOpenRaveImpl.hh"

// include the main component-definition class
#include "SmartOpenRavePortFactoryInterface.hh"

class SmartOpenRaveAcePortFactory: public SmartOpenRavePortFactoryInterface
{
private:
	SmartOpenRaveImpl *componentImpl;
public:
	SmartOpenRaveAcePortFactory();
	virtual ~SmartOpenRaveAcePortFactory();

	virtual void initialize(SmartOpenRave *component, int argc, char* argv[]) override;
	virtual int onStartup() override;

	virtual Smart::IQueryClientPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionEnvironment,SmartACE::QueryId> * createEnvironmentQueryServiceReq() override;
	virtual Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommGripperState,SmartACE::QueryId> * createGripperStateQueryServiceReq() override;
	virtual Smart::IPushClientPattern<CommManipulatorObjects::CommGripperState> * createGripperStateServiceIn() override;
	virtual Smart::IEventClientPattern<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult,SmartACE::EventId> * createManipulatorEventServiceIn() override;
	virtual Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState,SmartACE::QueryId> * createMobileManipulatorStateQueryServiceReq() override;
	virtual Smart::IPushClientPattern<CommManipulatorObjects::CommMobileManipulatorState> * createMobileManipulatorStateServiceIn() override;
	virtual Smart::IQueryClientPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties,SmartACE::QueryId> * createObjectQueryServiceReq() override;
	virtual Smart::ISendClientPattern<CommManipulatorObjects::CommManipulatorTrajectory> * createSendPathTrajectoryOut() override;
	virtual Smart::ISendClientPattern<CommManipulatorObjects::CommManipulatorTrajectory> * createSendTaskTrajectoryOut() override;
	
	virtual Smart::IEventServerPattern<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState,SmartACE::EventId> * createEventServiceOut(const std::string &serviceName, Smart::IEventTestHandler<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState> *eventServiceOutEventTestHandler) override;
	virtual Smart::IQueryServerPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties,SmartACE::QueryId> * createObjectQueryServiceAnsw(const std::string &serviceName) override;
	virtual Smart::ISendServerPattern<CommManipulatorObjects::CommManipulatorTrajectory> * createPathPlanningRequestIn(const std::string &serviceName) override;
	
	// get a pointer to the internal component implementation
	SmartACE::SmartComponent* getComponentImpl();

	virtual int onShutdown(const std::chrono::steady_clock::duration &timeoutTime=std::chrono::seconds(2)) override;
	virtual void destroy() override;
};

#endif /* SMARTOPENRAVE_ACE_PORTFACTORY_HH_ */
