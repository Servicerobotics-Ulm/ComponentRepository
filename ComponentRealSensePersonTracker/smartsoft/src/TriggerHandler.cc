//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2009-2017 Andreas Steck, Matthias Lutz
//
//        lutz@hs-ulm.de
//        shaik@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "TriggerHandler.hh"

#include "ComponentRealSensePersonTracker.hh"
#include <mrpt/poses/CPose3D.h>
#include <mrpt/poses/CPoint3D.h>
//#include <mrpt/math.h>

// trigger user methods
void TriggerHandler::handleCommTrackingObjects_TrackingParam_FOLLOW_RESET(const double &initX, const double &initY)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	DomainVision::CommRGBDImage scan;
	Smart::StatusCode status;

	// to get current robot position
	status = COMP->realSenseClient->getUpdate(scan);
	if (status != Smart::SMART_OK)
	{
	  std::cout << "blocking wait  status " << Smart::StatusCodeConversion(status) << " not ok => retry ..." << std::endl;
	}
	else
	{

		SmartACE::SmartGuard g(COMP->personLock);
		std::cout << "Got trigger to follow person at with (x,y)=("<<initX/1000.0<<" , "<<initY/1000.0<<" )"<<std::endl;
		//Transform camera to robot frame
		CommBasicObjects::CommPose3d sensor_pose = scan.getSensor_pose();
		double sensor_yaw = sensor_pose.get_azimuth(), sensor_pitch = sensor_pose.get_elevation(), sensor_roll = sensor_pose.get_roll();
		double sensor_x = sensor_pose.getPosition().get_x(1.0), sensor_y = sensor_pose.getPosition().get_y(1.0), sensor_z = sensor_pose.getPosition().get_z(1.0);
		mrpt::poses::CPose3D sensorPose(sensor_x, sensor_y, sensor_z,sensor_yaw, sensor_pitch, sensor_roll);


		// mrpt::poses::CPoint3D point_in_camera =transormPointToCameraCoord(point_in_camera,sensor_pose);

		std::cout<<"size of: COMP->set_tracked_persons: "<<COMP->set_tracked_persons.size()<<std::endl;

		for(std::set<TrackedPerson>::iterator it = COMP->set_tracked_persons.begin(); it!=COMP->set_tracked_persons.end();++it)
		{
			TrackedPerson TP = *it;

			mrpt::poses::CPoint3D point_in_camera(TP.world.x, TP.world.y, TP.world.z);

			mrpt::poses::CPoint3D point_robot_frame =  sensorPose + point_in_camera;

			std::cout<<"Sensor Pose: "<<sensorPose<<std::endl;
			std::cout<<"point_in_camera: "<<point_in_camera<<std::endl;
			std::cout<<"point_robot_frame: "<<point_robot_frame<<std::endl;

			//if(TP.world.x==point_in_camera.x()&&TP.world.y==point_in_camera.y())
			std::cout<<"Person to match: "<<point_robot_frame.x()<<" | "<<point_robot_frame.y()<<std::endl;
			if( (abs(point_robot_frame.x()-initX/1000.0)<0.5)
				 &&(abs(point_robot_frame.y()-initY/1000.0)<0.5))
			{
				COMP->ptModule->QueryOutput()->StopTracking(COMP->currently_following_person_Id);
				COMP->currently_following_person_Id = TP.realsense_id;
				COMP->ptModule->QueryOutput()->StartTracking(COMP->currently_following_person_Id);
				std::cout << "Started following  person with Id=" << COMP->currently_following_person_Id<< std::endl;
				break;
			} else {
				std::cout<<"Person not matched!"<<std::endl;

			}
		}

	}
}
void TriggerHandler::handleCommTrackingObjects_TrackingParam_SET_MAX_COV(const double &sigma)
{

}

void TriggerHandler::handlePersonTofollow(const short &id_to_follow)
{
	COMP->ptModule->QueryOutput()->StopTracking(COMP->currently_following_person_Id);
	std::cout << "STOPPED Following the person with Id = " << COMP->currently_following_person_Id <<std::endl;
	COMP->currently_following_person_Id = id_to_follow;
	COMP->ptModule->QueryOutput()->StartTracking(COMP->currently_following_person_Id);
	std::cout << "STARTED Following the person with Id = " << COMP->currently_following_person_Id <<std::endl;

}
