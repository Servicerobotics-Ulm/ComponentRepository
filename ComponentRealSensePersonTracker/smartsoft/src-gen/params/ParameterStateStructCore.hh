//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter Settings
		 */
		class SettingsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool display_depth_image;
			std::string pt_data;
			bool withDebugWindow;
		
		public:
			// default constructor
			SettingsType() {
				display_depth_image = false;
				pt_data = "./data";
				withDebugWindow = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDisplay_depth_image() const { return display_depth_image; }
			inline std::string getPt_data() const { return pt_data; }
			inline bool getWithDebugWindow() const { return withDebugWindow; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Settings(";
				os << "display_depth_image = " << display_depth_image << ", ";
				os << "pt_data = " << pt_data << ", ";
				os << "withDebugWindow = " << withDebugWindow << ", ";
				os << ")\n";
			}
			
		}; // end class SettingsType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommTrackingObjects
		 */
		class CommTrackingObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet TrackingParam
			 */
			class TrackingParamType {
				friend class ParamUpdateHandler;
				public:
				protected:
					/**
					 * internal members
					 */
					
				public:
					/**
					 * public getter methods
					 */
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "TrackingParam(\n";
						os << ")";
					}
			}; // end of parameter-set class TrackingParamType
			
			protected:
				/**
				 * internal members
				 */
				TrackingParamType TrackingParam;
			
			public:
				/**
				 * public getter methods
				 */
				inline TrackingParamType getTrackingParam() const { return TrackingParam; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommTrackingObjects(\n";
					TrackingParam.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommTrackingObjectsType
	
protected:

	// Internal params
	SettingsType Settings;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommTrackingObjectsType CommTrackingObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommTrackingObjects = commit.getCommTrackingObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	SettingsType getSettings() const {
		return Settings;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommTrackingObjectsType getCommTrackingObjects() const {
		return CommTrackingObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		Settings.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommTrackingObjects.to_ostream(os);
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["Settings"] = nlohmann::json {
			{"display_depth_image" , getSettings().getDisplay_depth_image()},
			{"pt_data" , getSettings().getPt_data()},
			{"withDebugWindow" , getSettings().getWithDebugWindow()}
		};
	
		param["TrackingParam"] = nlohmann::json {
		};
		
		return param.dump();
	}
};

#endif
