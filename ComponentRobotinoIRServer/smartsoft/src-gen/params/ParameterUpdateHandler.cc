//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "ComponentRobotinoIRServer.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;

	std::string tag = request.getTag();
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter AdditionIRSensors
		if(parameter.getDouble("AdditionIRSensors", "S1_heading", commitState.AdditionIRSensors.S1_heading))
		{
			globalState.AdditionIRSensors.S1_heading = commitState.AdditionIRSensors.S1_heading;
		}
		if(parameter.getDouble("AdditionIRSensors", "S1_x", commitState.AdditionIRSensors.S1_x))
		{
			globalState.AdditionIRSensors.S1_x = commitState.AdditionIRSensors.S1_x;
		}
		if(parameter.getDouble("AdditionIRSensors", "S1_y", commitState.AdditionIRSensors.S1_y))
		{
			globalState.AdditionIRSensors.S1_y = commitState.AdditionIRSensors.S1_y;
		}
		if(parameter.getDouble("AdditionIRSensors", "S1_z", commitState.AdditionIRSensors.S1_z))
		{
			globalState.AdditionIRSensors.S1_z = commitState.AdditionIRSensors.S1_z;
		}
		if(parameter.getDouble("AdditionIRSensors", "S2_heading", commitState.AdditionIRSensors.S2_heading))
		{
			globalState.AdditionIRSensors.S2_heading = commitState.AdditionIRSensors.S2_heading;
		}
		if(parameter.getDouble("AdditionIRSensors", "S2_x", commitState.AdditionIRSensors.S2_x))
		{
			globalState.AdditionIRSensors.S2_x = commitState.AdditionIRSensors.S2_x;
		}
		if(parameter.getDouble("AdditionIRSensors", "S2_y", commitState.AdditionIRSensors.S2_y))
		{
			globalState.AdditionIRSensors.S2_y = commitState.AdditionIRSensors.S2_y;
		}
		if(parameter.getDouble("AdditionIRSensors", "S2_z", commitState.AdditionIRSensors.S2_z))
		{
			globalState.AdditionIRSensors.S2_z = commitState.AdditionIRSensors.S2_z;
		}
		if(parameter.getDouble("AdditionIRSensors", "S3_heading", commitState.AdditionIRSensors.S3_heading))
		{
			globalState.AdditionIRSensors.S3_heading = commitState.AdditionIRSensors.S3_heading;
		}
		if(parameter.getDouble("AdditionIRSensors", "S3_x", commitState.AdditionIRSensors.S3_x))
		{
			globalState.AdditionIRSensors.S3_x = commitState.AdditionIRSensors.S3_x;
		}
		if(parameter.getDouble("AdditionIRSensors", "S3_y", commitState.AdditionIRSensors.S3_y))
		{
			globalState.AdditionIRSensors.S3_y = commitState.AdditionIRSensors.S3_y;
		}
		if(parameter.getDouble("AdditionIRSensors", "S3_z", commitState.AdditionIRSensors.S3_z))
		{
			globalState.AdditionIRSensors.S3_z = commitState.AdditionIRSensors.S3_z;
		}
		if(parameter.getBoolean("AdditionIRSensors", "hasAdditionIRSensors", commitState.AdditionIRSensors.hasAdditionIRSensors))
		{
			globalState.AdditionIRSensors.hasAdditionIRSensors = commitState.AdditionIRSensors.hasAdditionIRSensors;
		}
		if(parameter.getInteger("AdditionIRSensors", "numberOfSensors", commitState.AdditionIRSensors.numberOfSensors))
		{
			globalState.AdditionIRSensors.numberOfSensors = commitState.AdditionIRSensors.numberOfSensors;
		}
		if(parameter.getInteger("AdditionIRSensors", "relayNumber", commitState.AdditionIRSensors.relayNumber))
		{
			globalState.AdditionIRSensors.relayNumber = commitState.AdditionIRSensors.relayNumber;
		}
		// parameter SensorPoses
		if(parameter.getDouble("SensorPoses", "S1_x", commitState.SensorPoses.S1_x))
		{
			globalState.SensorPoses.S1_x = commitState.SensorPoses.S1_x;
		}
		if(parameter.getDouble("SensorPoses", "S1_y", commitState.SensorPoses.S1_y))
		{
			globalState.SensorPoses.S1_y = commitState.SensorPoses.S1_y;
		}
		if(parameter.getDouble("SensorPoses", "S1_z", commitState.SensorPoses.S1_z))
		{
			globalState.SensorPoses.S1_z = commitState.SensorPoses.S1_z;
		}
		if(parameter.getDouble("SensorPoses", "S2_x", commitState.SensorPoses.S2_x))
		{
			globalState.SensorPoses.S2_x = commitState.SensorPoses.S2_x;
		}
		if(parameter.getDouble("SensorPoses", "S2_y", commitState.SensorPoses.S2_y))
		{
			globalState.SensorPoses.S2_y = commitState.SensorPoses.S2_y;
		}
		if(parameter.getDouble("SensorPoses", "S2_z", commitState.SensorPoses.S2_z))
		{
			globalState.SensorPoses.S2_z = commitState.SensorPoses.S2_z;
		}
		if(parameter.getDouble("SensorPoses", "S3_x", commitState.SensorPoses.S3_x))
		{
			globalState.SensorPoses.S3_x = commitState.SensorPoses.S3_x;
		}
		if(parameter.getDouble("SensorPoses", "S3_y", commitState.SensorPoses.S3_y))
		{
			globalState.SensorPoses.S3_y = commitState.SensorPoses.S3_y;
		}
		if(parameter.getDouble("SensorPoses", "S3_z", commitState.SensorPoses.S3_z))
		{
			globalState.SensorPoses.S3_z = commitState.SensorPoses.S3_z;
		}
		if(parameter.getDouble("SensorPoses", "S4_x", commitState.SensorPoses.S4_x))
		{
			globalState.SensorPoses.S4_x = commitState.SensorPoses.S4_x;
		}
		if(parameter.getDouble("SensorPoses", "S4_y", commitState.SensorPoses.S4_y))
		{
			globalState.SensorPoses.S4_y = commitState.SensorPoses.S4_y;
		}
		if(parameter.getDouble("SensorPoses", "S4_z", commitState.SensorPoses.S4_z))
		{
			globalState.SensorPoses.S4_z = commitState.SensorPoses.S4_z;
		}
		if(parameter.getDouble("SensorPoses", "S5_x", commitState.SensorPoses.S5_x))
		{
			globalState.SensorPoses.S5_x = commitState.SensorPoses.S5_x;
		}
		if(parameter.getDouble("SensorPoses", "S5_y", commitState.SensorPoses.S5_y))
		{
			globalState.SensorPoses.S5_y = commitState.SensorPoses.S5_y;
		}
		if(parameter.getDouble("SensorPoses", "S5_z", commitState.SensorPoses.S5_z))
		{
			globalState.SensorPoses.S5_z = commitState.SensorPoses.S5_z;
		}
		if(parameter.getDouble("SensorPoses", "S6_x", commitState.SensorPoses.S6_x))
		{
			globalState.SensorPoses.S6_x = commitState.SensorPoses.S6_x;
		}
		if(parameter.getDouble("SensorPoses", "S6_y", commitState.SensorPoses.S6_y))
		{
			globalState.SensorPoses.S6_y = commitState.SensorPoses.S6_y;
		}
		if(parameter.getDouble("SensorPoses", "S6_z", commitState.SensorPoses.S6_z))
		{
			globalState.SensorPoses.S6_z = commitState.SensorPoses.S6_z;
		}
		if(parameter.getDouble("SensorPoses", "S7_x", commitState.SensorPoses.S7_x))
		{
			globalState.SensorPoses.S7_x = commitState.SensorPoses.S7_x;
		}
		if(parameter.getDouble("SensorPoses", "S7_y", commitState.SensorPoses.S7_y))
		{
			globalState.SensorPoses.S7_y = commitState.SensorPoses.S7_y;
		}
		if(parameter.getDouble("SensorPoses", "S7_z", commitState.SensorPoses.S7_z))
		{
			globalState.SensorPoses.S7_z = commitState.SensorPoses.S7_z;
		}
		if(parameter.getDouble("SensorPoses", "S8_x", commitState.SensorPoses.S8_x))
		{
			globalState.SensorPoses.S8_x = commitState.SensorPoses.S8_x;
		}
		if(parameter.getDouble("SensorPoses", "S8_y", commitState.SensorPoses.S8_y))
		{
			globalState.SensorPoses.S8_y = commitState.SensorPoses.S8_y;
		}
		if(parameter.getDouble("SensorPoses", "S8_z", commitState.SensorPoses.S8_z))
		{
			globalState.SensorPoses.S8_z = commitState.SensorPoses.S8_z;
		}
		if(parameter.getDouble("SensorPoses", "S9_x", commitState.SensorPoses.S9_x))
		{
			globalState.SensorPoses.S9_x = commitState.SensorPoses.S9_x;
		}
		if(parameter.getDouble("SensorPoses", "S9_y", commitState.SensorPoses.S9_y))
		{
			globalState.SensorPoses.S9_y = commitState.SensorPoses.S9_y;
		}
		if(parameter.getDouble("SensorPoses", "S9_z", commitState.SensorPoses.S9_z))
		{
			globalState.SensorPoses.S9_z = commitState.SensorPoses.S9_z;
		}
		// parameter Settings
		if(parameter.getString("Settings", "daemonIP", commitState.Settings.daemonIP))
		{
			globalState.Settings.daemonIP = commitState.Settings.daemonIP;
		}
		if(parameter.getDouble("Settings", "maxDist", commitState.Settings.maxDist))
		{
			globalState.Settings.maxDist = commitState.Settings.maxDist;
		}
		if(parameter.getDouble("Settings", "minDist", commitState.Settings.minDist))
		{
			globalState.Settings.minDist = commitState.Settings.minDist;
		}
		if(parameter.getBoolean("Settings", "verbose", commitState.Settings.verbose))
		{
			globalState.Settings.verbose = commitState.Settings.verbose;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
