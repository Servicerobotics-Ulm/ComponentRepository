//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter Settings
		 */
		class SettingsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string daemonIP;
			double maxDist;
			double minDist;
			bool verbose;
		
		public:
			// default constructor
			SettingsType() {
				daemonIP = "192.168.31.124";
				maxDist = 0.4;
				minDist = 0.04;
				verbose = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getDaemonIP() const { return daemonIP; }
			inline double getMaxDist() const { return maxDist; }
			inline double getMinDist() const { return minDist; }
			inline bool getVerbose() const { return verbose; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Settings(";
				os << "daemonIP = " << daemonIP << ", ";
				os << "maxDist = " << maxDist << ", ";
				os << "minDist = " << minDist << ", ";
				os << "verbose = " << verbose << ", ";
				os << ")\n";
			}
			
		}; // end class SettingsType
		
		/**
		 * Definition of Parameter AdditionIRSensors
		 */
		class AdditionIRSensorsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double S1_heading;
			double S1_x;
			double S1_y;
			double S1_z;
			double S2_heading;
			double S2_x;
			double S2_y;
			double S2_z;
			double S3_heading;
			double S3_x;
			double S3_y;
			double S3_z;
			bool hasAdditionIRSensors;
			short numberOfSensors;
			unsigned int relayNumber;
		
		public:
			// default constructor
			AdditionIRSensorsType() {
				S1_heading = 0;
				S1_x = 0;
				S1_y = 0;
				S1_z = 0;
				S2_heading = 0;
				S2_x = 0;
				S2_y = 0;
				S2_z = 0;
				S3_heading = 0;
				S3_x = 0;
				S3_y = 0;
				S3_z = 0;
				hasAdditionIRSensors = false;
				numberOfSensors = 3;
				relayNumber = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getS1_heading() const { return S1_heading; }
			inline double getS1_x() const { return S1_x; }
			inline double getS1_y() const { return S1_y; }
			inline double getS1_z() const { return S1_z; }
			inline double getS2_heading() const { return S2_heading; }
			inline double getS2_x() const { return S2_x; }
			inline double getS2_y() const { return S2_y; }
			inline double getS2_z() const { return S2_z; }
			inline double getS3_heading() const { return S3_heading; }
			inline double getS3_x() const { return S3_x; }
			inline double getS3_y() const { return S3_y; }
			inline double getS3_z() const { return S3_z; }
			inline bool getHasAdditionIRSensors() const { return hasAdditionIRSensors; }
			inline short getNumberOfSensors() const { return numberOfSensors; }
			inline unsigned int getRelayNumber() const { return relayNumber; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "AdditionIRSensors(";
				os << "S1_heading = " << S1_heading << ", ";
				os << "S1_x = " << S1_x << ", ";
				os << "S1_y = " << S1_y << ", ";
				os << "S1_z = " << S1_z << ", ";
				os << "S2_heading = " << S2_heading << ", ";
				os << "S2_x = " << S2_x << ", ";
				os << "S2_y = " << S2_y << ", ";
				os << "S2_z = " << S2_z << ", ";
				os << "S3_heading = " << S3_heading << ", ";
				os << "S3_x = " << S3_x << ", ";
				os << "S3_y = " << S3_y << ", ";
				os << "S3_z = " << S3_z << ", ";
				os << "hasAdditionIRSensors = " << hasAdditionIRSensors << ", ";
				os << "numberOfSensors = " << numberOfSensors << ", ";
				os << "relayNumber = " << relayNumber << ", ";
				os << ")\n";
			}
			
		}; // end class AdditionIRSensorsType
		
		/**
		 * Definition of Parameter SensorPoses
		 */
		class SensorPosesType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double S1_x;
			double S1_y;
			double S1_z;
			double S2_x;
			double S2_y;
			double S2_z;
			double S3_x;
			double S3_y;
			double S3_z;
			double S4_x;
			double S4_y;
			double S4_z;
			double S5_x;
			double S5_y;
			double S5_z;
			double S6_x;
			double S6_y;
			double S6_z;
			double S7_x;
			double S7_y;
			double S7_z;
			double S8_x;
			double S8_y;
			double S8_z;
			double S9_x;
			double S9_y;
			double S9_z;
		
		public:
			// default constructor
			SensorPosesType() {
				S1_x = 0.22;
				S1_y = 0;
				S1_z = 0.045;
				S2_x = 0.16853;
				S2_y = 0.141413;
				S2_z = 0.045;
				S3_x = 0.0382026;
				S3_y = 0.216658;
				S3_z = 0.045;
				S4_x = -0.11;
				S4_y = 0.190526;
				S4_z = 0.045;
				S5_x = -0.206732;
				S5_y = 0.0752444;
				S5_z = 0.045;
				S6_x = -0.206732;
				S6_y = -0.0752444;
				S6_z = 0.045;
				S7_x = -0.11;
				S7_y = -0.190526;
				S7_z = 0.045;
				S8_x = 0.0382026;
				S8_y = -0.216658;
				S8_z = 0.045;
				S9_x = 0.16853;
				S9_y = -0.141413;
				S9_z = 0.045;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getS1_x() const { return S1_x; }
			inline double getS1_y() const { return S1_y; }
			inline double getS1_z() const { return S1_z; }
			inline double getS2_x() const { return S2_x; }
			inline double getS2_y() const { return S2_y; }
			inline double getS2_z() const { return S2_z; }
			inline double getS3_x() const { return S3_x; }
			inline double getS3_y() const { return S3_y; }
			inline double getS3_z() const { return S3_z; }
			inline double getS4_x() const { return S4_x; }
			inline double getS4_y() const { return S4_y; }
			inline double getS4_z() const { return S4_z; }
			inline double getS5_x() const { return S5_x; }
			inline double getS5_y() const { return S5_y; }
			inline double getS5_z() const { return S5_z; }
			inline double getS6_x() const { return S6_x; }
			inline double getS6_y() const { return S6_y; }
			inline double getS6_z() const { return S6_z; }
			inline double getS7_x() const { return S7_x; }
			inline double getS7_y() const { return S7_y; }
			inline double getS7_z() const { return S7_z; }
			inline double getS8_x() const { return S8_x; }
			inline double getS8_y() const { return S8_y; }
			inline double getS8_z() const { return S8_z; }
			inline double getS9_x() const { return S9_x; }
			inline double getS9_y() const { return S9_y; }
			inline double getS9_z() const { return S9_z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "SensorPoses(";
				os << "S1_x = " << S1_x << ", ";
				os << "S1_y = " << S1_y << ", ";
				os << "S1_z = " << S1_z << ", ";
				os << "S2_x = " << S2_x << ", ";
				os << "S2_y = " << S2_y << ", ";
				os << "S2_z = " << S2_z << ", ";
				os << "S3_x = " << S3_x << ", ";
				os << "S3_y = " << S3_y << ", ";
				os << "S3_z = " << S3_z << ", ";
				os << "S4_x = " << S4_x << ", ";
				os << "S4_y = " << S4_y << ", ";
				os << "S4_z = " << S4_z << ", ";
				os << "S5_x = " << S5_x << ", ";
				os << "S5_y = " << S5_y << ", ";
				os << "S5_z = " << S5_z << ", ";
				os << "S6_x = " << S6_x << ", ";
				os << "S6_y = " << S6_y << ", ";
				os << "S6_z = " << S6_z << ", ";
				os << "S7_x = " << S7_x << ", ";
				os << "S7_y = " << S7_y << ", ";
				os << "S7_z = " << S7_z << ", ";
				os << "S8_x = " << S8_x << ", ";
				os << "S8_y = " << S8_y << ", ";
				os << "S8_z = " << S8_z << ", ";
				os << "S9_x = " << S9_x << ", ";
				os << "S9_y = " << S9_y << ", ";
				os << "S9_z = " << S9_z << ", ";
				os << ")\n";
			}
			
		}; // end class SensorPosesType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	AdditionIRSensorsType AdditionIRSensors;
	SensorPosesType SensorPoses;
	SettingsType Settings;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	AdditionIRSensorsType getAdditionIRSensors() const {
		return AdditionIRSensors;
	}
	SensorPosesType getSensorPoses() const {
		return SensorPoses;
	}
	SettingsType getSettings() const {
		return Settings;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		AdditionIRSensors.to_ostream(os);
		SensorPoses.to_ostream(os);
		Settings.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
};

#endif
