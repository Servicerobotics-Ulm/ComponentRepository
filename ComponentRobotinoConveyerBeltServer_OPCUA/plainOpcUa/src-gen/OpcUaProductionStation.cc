//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "OpcUaProductionStation.hh"

using namespace OPCUA;

ProductionStation::ProductionStation()
{  }
ProductionStation::~ProductionStation()
{  }

bool ProductionStation::createClientSpace(const bool activateUpcalls)
{
	bool result = true;
	if(this->addVariableNode("isBoxPresent", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("LED_RED", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("LED_YELLOW", activateUpcalls) != true) {
		result = false;
	}
	if(this->addVariableNode("LED_GREEN", activateUpcalls) != true) {
		result = false;
	}
	if(this->addMethodNode("loadbox") != true) {
		result = false;
	}
	if(this->addMethodNode("start_unloading") != true) {
		result = false;
	}
	if(this->addMethodNode("stop_unloading") != true) {
		result = false;
	}
	return result;
}

void ProductionStation::handleVariableValueUpdate(const std::string &variableName, const OPCUA::Variant &value)
{
	if(variableName == "isBoxPresent") 
	{
		this->handleIsBoxPresent(value);
	}
	else if(variableName == "LED_RED") 
	{
		this->handleLED_RED(value);
	}
	else if(variableName == "LED_YELLOW") 
	{
		this->handleLED_YELLOW(value);
	}
	else if(variableName == "LED_GREEN") 
	{
		this->handleLED_GREEN(value);
	}
}

// specific method to handle value updates for isBoxPresent
void ProductionStation::handleIsBoxPresent(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleIsBoxPresent(): " << value << std::endl;
}

// specific method to handle value updates for LED_RED
void ProductionStation::handleLED_RED(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleLED_RED(): " << value << std::endl;
}

// specific method to handle value updates for LED_YELLOW
void ProductionStation::handleLED_YELLOW(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleLED_YELLOW(): " << value << std::endl;
}

// specific method to handle value updates for LED_GREEN
void ProductionStation::handleLED_GREEN(const bool &value)
{
	//implement your specific code here (if needed)
	std::cout << "handleLED_GREEN(): " << value << std::endl;
}


// generate xml-specific getters and setters
bool ProductionStation::getIsBoxPresent() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("isBoxPresent", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStation::getIsBoxPresent(bool &isBoxPresent) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("isBoxPresent", genericValue);
	isBoxPresent = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStation::getIsBoxPresentWait(bool &isBoxPresent) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("isBoxPresent", genericValue);
	isBoxPresent = genericValue;
	return status;
}

bool ProductionStation::getLED_RED() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_RED", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStation::getLED_RED(bool &lED_RED) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_RED", genericValue);
	lED_RED = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStation::getLED_REDWait(bool &lED_RED) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("LED_RED", genericValue);
	lED_RED = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStation::setLED_RED(const bool &value) {
	return setVariableValue("LED_RED", value);
}

bool ProductionStation::getLED_YELLOW() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_YELLOW", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStation::getLED_YELLOW(bool &lED_YELLOW) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_YELLOW", genericValue);
	lED_YELLOW = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStation::getLED_YELLOWWait(bool &lED_YELLOW) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("LED_YELLOW", genericValue);
	lED_YELLOW = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStation::setLED_YELLOW(const bool &value) {
	return setVariableValue("LED_YELLOW", value);
}

bool ProductionStation::getLED_GREEN() const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_GREEN", genericValue);
	if(status == OPCUA::StatusCode::ALL_OK) {
		return genericValue;
	}
	return false;
}
OPCUA::StatusCode ProductionStation::getLED_GREEN(bool &lED_GREEN) const {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableCurrentValue("LED_GREEN", genericValue);
	lED_GREEN = genericValue;
	return status;
}
OPCUA::StatusCode ProductionStation::getLED_GREENWait(bool &lED_GREEN) {
	OPCUA::Variant genericValue;
	OPCUA::StatusCode status = getVariableNextValue("LED_GREEN", genericValue);
	lED_GREEN = genericValue;
	return status;
}

OPCUA::StatusCode ProductionStation::setLED_GREEN(const bool &value) {
	return setVariableValue("LED_GREEN", value);
}


OPCUA::StatusCode ProductionStation::callLoadbox(const int &timeout, std::string &result)
{
	std::vector<OPCUA::Variant> inputArguments(1);
	inputArguments[0] = timeout;
	std::vector<OPCUA::Variant> outputArguments;
	OPCUA::StatusCode status = callMethod(std::string("loadbox"), inputArguments, outputArguments);
	if(status == OPCUA::StatusCode::ALL_OK)
	{
		result = outputArguments[0].toString();
	}
	return status;
}

OPCUA::StatusCode ProductionStation::callStart_unloading(const int &XtimeoutX, std::string &result)
{
	std::vector<OPCUA::Variant> inputArguments(1);
	inputArguments[0] = XtimeoutX;
	std::vector<OPCUA::Variant> outputArguments;
	OPCUA::StatusCode status = callMethod(std::string("start_unloading"), inputArguments, outputArguments);
	if(status == OPCUA::StatusCode::ALL_OK)
	{
		result = outputArguments[0].toString();
	}
	return status;
}

OPCUA::StatusCode ProductionStation::callStop_unloading(const int &XtimeoutX, std::string &result)
{
	std::vector<OPCUA::Variant> inputArguments(1);
	inputArguments[0] = XtimeoutX;
	std::vector<OPCUA::Variant> outputArguments;
	OPCUA::StatusCode status = callMethod(std::string("stop_unloading"), inputArguments, outputArguments);
	if(status == OPCUA::StatusCode::ALL_OK)
	{
		result = outputArguments[0].toString();
	}
	return status;
}

