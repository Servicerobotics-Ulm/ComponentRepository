//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2014 Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------
#include "ManualLoadTask.hh"
#include "ComponentRobotinoConveyerBeltServer_OPCUA.hh"

#include <iostream>

ManualLoadTask::ManualLoadTask(SmartACE::SmartComponent *comp) 
:	ManualLoadTaskCore(comp)
{
	std::cout << "constructor ManualLoadTask\n";

	load_signal_bit = COMP->getGlobalState().getRobot().getManual_load_dout();
	box_present_bit = COMP->getGlobalState().getRobot().getBox_present_din();
	ack_pressed_bit = COMP->getGlobalState().getRobot().getAck_pressed_din();
	first_run = true;

}
ManualLoadTask::~ManualLoadTask() 
{
	std::cout << "destructor ManualLoadTask\n";
}



int ManualLoadTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int ManualLoadTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status;
	CommRobotinoObjects::RobotinoConveyerBeltEventState eventState;

	//COMP->robotinoCom.processEvents();
	//std::cout<<"BOXp: "<<Box_present.value()<<" TransR: "<<Trans_ready.value()<<std::endl;

	ParameterStateStruct localState = COMP->getGlobalState();


	status = COMP->stateSlave->acquire("manualload");
	if (status == Smart::SMART_OK)
	{

		std::cout<<"ManualLoadTask "<<std::endl;
		if (first_run == true && queryDigitalInput(box_present_bit)==true){
			eventState.set(CommRobotinoObjects::RobotinoConveyerBeltEventType::CONVEYER_BELT_LOAD_ERROR_BOX_ADREADY_PRSESENT);
			COMP->robotinoConveyerBeltEventOut->put(eventState);
			std::cout<<"ERROR: loading triggered - box already on the belt!"<<std::endl;
		} else {

			SmartACE::SmartGuard guard(lock);
			queryDigitalOutput(load_signal_bit,true);
			if(queryDigitalInput(ack_pressed_bit) == true){
				while( queryDigitalInput(ack_pressed_bit) == true){
					ACE_OS::sleep(ACE_Time_Value(0,500000));
				}
				std::cout<<"ManualLoadTask: ACK - ";
				if(queryDigitalInput(box_present_bit) == true){
					std::cout<<"box present"<<std::endl;
					eventState.set(CommRobotinoObjects::RobotinoConveyerBeltEventType::CONVEYER_BELT_LOAD_DONE);
					COMP->robotinoConveyerBeltEventOut->put(eventState);

				} else {
					std::cout<<"no box present"<<std::endl;
					eventState.set(CommRobotinoObjects::RobotinoConveyerBeltEventType::CONVEYER_BELT_LOAD_ERROR_NO_BOX_LOADED);
					COMP->robotinoConveyerBeltEventOut->put(eventState);
				}
			}

		}
		first_run = false;

		COMP->stateSlave->release("manualload");
	}  else {
		std::cout<<" [ManualloadTask] acquire state: "<<Smart::StatusCodeConversion(status)<<std::endl;
	}

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}

void ManualLoadTask::disableLoadSignal(){
	SmartACE::SmartGuard guard(lock);
	queryDigitalOutput(load_signal_bit,false);
}

void ManualLoadTask::reset(){
	first_run = true;

}

int ManualLoadTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}

bool ManualLoadTask::queryDigitalInput(const unsigned int & bit){

	CommBasicObjects::CommIOValues inputQuery;
	CommBasicObjects::CommIOValues inputQueryResult;


	Smart::StatusCode status;
	status = COMP->commIOValuesQueryServiceReq->query(inputQuery,inputQueryResult);
	if(status != Smart::SMART_OK){
		std::cout<<__FUNCTION__<<" ERROR: query digital IO"<<std::endl;
		COMP->stateSlave->setWaitState("FatalError");
		return false;
	}
	if(bit>inputQueryResult.getDigitalInputValuesSize()){
		std::cout<<__FUNCTION__<<" ERROR: query bit: "<<bit<<" digital IO size: "<<inputQueryResult.getDigitalInputValuesSize()<<std::endl;
		COMP->stateSlave->setWaitState("FatalError");
		return false;
	}
	return inputQueryResult.getDigitalInputValuesElemAtPos(bit);

}

void ManualLoadTask::queryDigitalOutput(const unsigned int & bit, const bool & value){

	CommBasicObjects::CommIOValues outputQuery;
	CommBasicObjects::CommIOValues dummy;
	outputQuery.resizeDigitalOutputValues(1);

	Smart::StatusCode status;
	CommBasicObjects::CommDigitalOutputRequest digitalOutputRequest(bit,value);

	outputQuery.setDigitalOutputValuesElemAtPos(0,digitalOutputRequest);

	status = COMP->commIOValuesQueryServiceReq->query(outputQuery,dummy);
	if(status != Smart::SMART_OK){
		std::cout<<__FUNCTION__<<" ERROR: query digital IO"<<std::endl;
		COMP->stateSlave->setWaitState("FatalError");
	}

}
