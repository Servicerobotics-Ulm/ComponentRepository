//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ComponentRobotinoConveyerBeltServer_OPCUA.hh"
#include "smartTimedTaskTrigger.h"
//FIXME: implement logging
//#include "smartGlobalLogger.hh"

// the ace port-factory is used as a default port-mapping
#include "ComponentRobotinoConveyerBeltServer_OPCUAAcePortFactory.hh"

#include "RobotinoConveyerBeltEventOutEventTestHandler.hh"

// initialize static singleton pointer to zero
ComponentRobotinoConveyerBeltServer_OPCUA* ComponentRobotinoConveyerBeltServer_OPCUA::_componentRobotinoConveyerBeltServer_OPCUA = 0;

// constructor
ComponentRobotinoConveyerBeltServer_OPCUA::ComponentRobotinoConveyerBeltServer_OPCUA()
{
	std::cout << "constructor of ComponentRobotinoConveyerBeltServer_OPCUA\n";
	
	// set all pointer members to NULL
	commDigitalInputEventIn = NULL;
	commDigitalInputEventInInputTaskTrigger = NULL;
	commDigitalInputEventInUpcallManager = NULL;
	commDigitalInputEventInInputCollector = NULL;
	commIOValuesQueryServiceReq = NULL;
	commPowerOutputSendOut = NULL;
	commPowerOutputSendOutWrapper = NULL;
	//componentRobotinoConveyerBeltServer_OPCUA = NULL;
	//coordinationPort = NULL;
	digitalInputEventHandler = NULL;
	loadTask = NULL;
	loadTaskTrigger = NULL;
	manualLoadTask = NULL;
	manualLoadTaskTrigger = NULL;
	manualUnLoadTask = NULL;
	manualUnLoadTaskTrigger = NULL;
	productionStation = NULL;
	robotinoConveyerBeltEventOut = NULL;
	robotinoConveyerBeltEventOutWrapper = NULL;
	robotinoConveyerBeltEventOutEventTestHandler = nullptr; 
	signalErrorTask = NULL;
	signalErrorTaskTrigger = NULL;
	unLoadTask = NULL;
	unLoadTaskTrigger = NULL;
	stateChangeHandler = NULL;
	stateActivityManager = NULL;
	stateSlave = NULL;
	wiringSlave = NULL;
	param = NULL;
	
	// set default ini parameter values
	connections.component.name = "ComponentRobotinoConveyerBeltServer_OPCUA";
	connections.component.initialComponentMode = "Neutral";
	connections.component.defaultScheduler = "DEFAULT";
	connections.component.useLogger = false;
	
	connections.robotinoConveyerBeltEventOut.serviceName = "RobotinoConveyerBeltEventOut";
	connections.robotinoConveyerBeltEventOut.roboticMiddleware = "ACE_SmartSoft";
	connections.commDigitalInputEventIn.initialConnect = false;
	connections.commDigitalInputEventIn.wiringName = "CommDigitalInputEventIn";
	connections.commDigitalInputEventIn.serverName = "unknown";
	connections.commDigitalInputEventIn.serviceName = "unknown";
	connections.commDigitalInputEventIn.interval = 1;
	connections.commDigitalInputEventIn.roboticMiddleware = "ACE_SmartSoft";
	connections.commIOValuesQueryServiceReq.initialConnect = false;
	connections.commIOValuesQueryServiceReq.wiringName = "CommIOValuesQueryServiceReq";
	connections.commIOValuesQueryServiceReq.serverName = "unknown";
	connections.commIOValuesQueryServiceReq.serviceName = "unknown";
	connections.commIOValuesQueryServiceReq.interval = 1;
	connections.commIOValuesQueryServiceReq.roboticMiddleware = "ACE_SmartSoft";
	connections.commPowerOutputSendOut.initialConnect = false;
	connections.commPowerOutputSendOut.wiringName = "CommPowerOutputSendOut";
	connections.commPowerOutputSendOut.serverName = "unknown";
	connections.commPowerOutputSendOut.serviceName = "unknown";
	connections.commPowerOutputSendOut.interval = 1;
	connections.commPowerOutputSendOut.roboticMiddleware = "ACE_SmartSoft";
	connections.loadTask.minActFreq = 0.0;
	connections.loadTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.loadTask.scheduler = "DEFAULT";
	connections.loadTask.priority = -1;
	connections.loadTask.cpuAffinity = -1;
	connections.manualLoadTask.minActFreq = 0.0;
	connections.manualLoadTask.maxActFreq = 0.0;
	connections.manualLoadTask.trigger = "PeriodicTimer";
	connections.manualLoadTask.periodicActFreq = 10.0;
	// scheduling default parameters
	connections.manualLoadTask.scheduler = "DEFAULT";
	connections.manualLoadTask.priority = -1;
	connections.manualLoadTask.cpuAffinity = -1;
	connections.manualUnLoadTask.minActFreq = 0.0;
	connections.manualUnLoadTask.maxActFreq = 0.0;
	connections.manualUnLoadTask.trigger = "PeriodicTimer";
	connections.manualUnLoadTask.periodicActFreq = 10.0;
	// scheduling default parameters
	connections.manualUnLoadTask.scheduler = "DEFAULT";
	connections.manualUnLoadTask.priority = -1;
	connections.manualUnLoadTask.cpuAffinity = -1;
	connections.signalErrorTask.minActFreq = 0.0;
	connections.signalErrorTask.maxActFreq = 0.0;
	connections.signalErrorTask.trigger = "PeriodicTimer";
	connections.signalErrorTask.periodicActFreq = 2.0;
	// scheduling default parameters
	connections.signalErrorTask.scheduler = "DEFAULT";
	connections.signalErrorTask.priority = -1;
	connections.signalErrorTask.cpuAffinity = -1;
	connections.unLoadTask.minActFreq = 0.0;
	connections.unLoadTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.unLoadTask.scheduler = "DEFAULT";
	connections.unLoadTask.priority = -1;
	connections.unLoadTask.cpuAffinity = -1;
	connections.digitalInputEventHandler.prescale = 1;
	
}

void ComponentRobotinoConveyerBeltServer_OPCUA::addPortFactory(const std::string &name, ComponentRobotinoConveyerBeltServer_OPCUAPortFactoryInterface *portFactory)
{
	portFactoryRegistry[name] = portFactory;
}

void ComponentRobotinoConveyerBeltServer_OPCUA::addExtension(ComponentRobotinoConveyerBeltServer_OPCUAExtension *extension)
{
	componentExtensionRegistry[extension->getName()] = extension;
}

SmartACE::SmartComponent* ComponentRobotinoConveyerBeltServer_OPCUA::getComponentImpl()
{
	return dynamic_cast<ComponentRobotinoConveyerBeltServer_OPCUAAcePortFactory*>(portFactoryRegistry["ACE_SmartSoft"])->getComponentImpl();
}

/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void ComponentRobotinoConveyerBeltServer_OPCUA::setStartupFinished() {
	stateSlave->setWaitState("Alive");
	std::cout << "ComponentDefinition initialization/startup finished." << std::endl;
}


Smart::StatusCode ComponentRobotinoConveyerBeltServer_OPCUA::connectCommDigitalInputEventIn(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.commDigitalInputEventIn.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = commDigitalInputEventIn->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->commDigitalInputEventIn->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode ComponentRobotinoConveyerBeltServer_OPCUA::connectCommIOValuesQueryServiceReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.commIOValuesQueryServiceReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = commIOValuesQueryServiceReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->commIOValuesQueryServiceReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode ComponentRobotinoConveyerBeltServer_OPCUA::connectCommPowerOutputSendOut(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.commPowerOutputSendOut.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = commPowerOutputSendOut->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->commPowerOutputSendOut->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}


/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
Smart::StatusCode ComponentRobotinoConveyerBeltServer_OPCUA::connectAndStartAllServices() {
	Smart::StatusCode status = Smart::SMART_OK;
	
	status = connectCommDigitalInputEventIn(connections.commDigitalInputEventIn.serverName, connections.commDigitalInputEventIn.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectCommIOValuesQueryServiceReq(connections.commIOValuesQueryServiceReq.serverName, connections.commIOValuesQueryServiceReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectCommPowerOutputSendOut(connections.commPowerOutputSendOut.serverName, connections.commPowerOutputSendOut.serviceName);
	if(status != Smart::SMART_OK) return status;
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void ComponentRobotinoConveyerBeltServer_OPCUA::startAllTasks() {
	// start task LoadTask
	if(connections.loadTask.scheduler != "DEFAULT") {
		ACE_Sched_Params loadTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.loadTask.scheduler == "FIFO") {
			loadTask_SchedParams.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				loadTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				loadTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(connections.loadTask.scheduler == "RR") {
			loadTask_SchedParams.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				loadTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				loadTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		loadTask->start(loadTask_SchedParams, connections.loadTask.cpuAffinity);
	} else {
		loadTask->start();
	}
	// start task ManualLoadTask
	if(connections.manualLoadTask.scheduler != "DEFAULT") {
		ACE_Sched_Params manualLoadTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.manualLoadTask.scheduler == "FIFO") {
			manualLoadTask_SchedParams.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				manualLoadTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				manualLoadTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(connections.manualLoadTask.scheduler == "RR") {
			manualLoadTask_SchedParams.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				manualLoadTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				manualLoadTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		manualLoadTask->start(manualLoadTask_SchedParams, connections.manualLoadTask.cpuAffinity);
	} else {
		manualLoadTask->start();
	}
	// start task ManualUnLoadTask
	if(connections.manualUnLoadTask.scheduler != "DEFAULT") {
		ACE_Sched_Params manualUnLoadTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.manualUnLoadTask.scheduler == "FIFO") {
			manualUnLoadTask_SchedParams.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				manualUnLoadTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				manualUnLoadTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(connections.manualUnLoadTask.scheduler == "RR") {
			manualUnLoadTask_SchedParams.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				manualUnLoadTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				manualUnLoadTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		manualUnLoadTask->start(manualUnLoadTask_SchedParams, connections.manualUnLoadTask.cpuAffinity);
	} else {
		manualUnLoadTask->start();
	}
	// start task SignalErrorTask
	if(connections.signalErrorTask.scheduler != "DEFAULT") {
		ACE_Sched_Params signalErrorTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.signalErrorTask.scheduler == "FIFO") {
			signalErrorTask_SchedParams.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				signalErrorTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				signalErrorTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(connections.signalErrorTask.scheduler == "RR") {
			signalErrorTask_SchedParams.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				signalErrorTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				signalErrorTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		signalErrorTask->start(signalErrorTask_SchedParams, connections.signalErrorTask.cpuAffinity);
	} else {
		signalErrorTask->start();
	}
	// start task UnLoadTask
	if(connections.unLoadTask.scheduler != "DEFAULT") {
		ACE_Sched_Params unLoadTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.unLoadTask.scheduler == "FIFO") {
			unLoadTask_SchedParams.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				unLoadTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				unLoadTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(connections.unLoadTask.scheduler == "RR") {
			unLoadTask_SchedParams.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				unLoadTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				unLoadTask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		unLoadTask->start(unLoadTask_SchedParams, connections.unLoadTask.cpuAffinity);
	} else {
		unLoadTask->start();
	}
}

/**
 * Start all timers contained in this component
 */
void ComponentRobotinoConveyerBeltServer_OPCUA::startAllTimers() {
}


Smart::TaskTriggerSubject* ComponentRobotinoConveyerBeltServer_OPCUA::getInputTaskTriggerFromString(const std::string &client)
{
	if(client == "CommDigitalInputEventIn") return commDigitalInputEventInInputTaskTrigger;
	
	return NULL;
}


void ComponentRobotinoConveyerBeltServer_OPCUA::init(int argc, char *argv[])
{
	try {
		Smart::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		// print out the actual parameters which are used to initialize the component
		std::cout << " \nComponentDefinition Initial-Parameters:\n" << COMP->getParameters() << std::endl;
		
		
		// initialize all registered port-factories
		for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
		{
			portFactory->second->initialize(this, argc, argv);
		}
		
		// initialize all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->initialize(this, argc, argv);
		}
		
		ComponentRobotinoConveyerBeltServer_OPCUAPortFactoryInterface *acePortFactory = portFactoryRegistry["ACE_SmartSoft"];
		if(acePortFactory == 0) {
			std::cerr << "ERROR: acePortFactory NOT instantiated -> exit(-1)" << std::endl;
			exit(-1);
		}
		
		// this pointer is used for backwards compatibility (deprecated: should be removed as soon as all patterns, including coordination, are moved to port-factory)
		SmartACE::SmartComponent *component = dynamic_cast<ComponentRobotinoConveyerBeltServer_OPCUAAcePortFactory*>(acePortFactory)->getComponentImpl();
		
		std::cout << "ComponentDefinition ComponentRobotinoConveyerBeltServer_OPCUA is named " << connections.component.name << std::endl;
		
		if(connections.component.useLogger == true) {
			//FIXME: use logging
			//Smart::LOGGER->openLogFileInFolder("data/"+connections.component.name);
			//Smart::LOGGER->startLogging();
		}

		// create event-test handlers (if needed)
		robotinoConveyerBeltEventOutEventTestHandler = std::make_shared<RobotinoConveyerBeltEventOutEventTestHandler>();
		
		// create server ports
		// TODO: set minCycleTime from Ini-file
		robotinoConveyerBeltEventOutEventTestHandler = std::make_shared<RobotinoConveyerBeltEventOutEventTestHandler>();
		robotinoConveyerBeltEventOut = portFactoryRegistry[connections.robotinoConveyerBeltEventOut.roboticMiddleware]->createRobotinoConveyerBeltEventOut(connections.robotinoConveyerBeltEventOut.serviceName, robotinoConveyerBeltEventOutEventTestHandler);
		robotinoConveyerBeltEventOutWrapper = new RobotinoConveyerBeltEventOutWrapper(robotinoConveyerBeltEventOut);
		
		// create client ports
		commDigitalInputEventIn = portFactoryRegistry[connections.commDigitalInputEventIn.roboticMiddleware]->createCommDigitalInputEventIn();
		commIOValuesQueryServiceReq = portFactoryRegistry[connections.commIOValuesQueryServiceReq.roboticMiddleware]->createCommIOValuesQueryServiceReq();
		commPowerOutputSendOut = portFactoryRegistry[connections.commPowerOutputSendOut.roboticMiddleware]->createCommPowerOutputSendOut();
		commPowerOutputSendOutWrapper = new CommPowerOutputSendOutWrapper(commPowerOutputSendOut);
		
		// create InputTaskTriggers and UpcallManagers
		commDigitalInputEventInInputCollector = new CommDigitalInputEventInInputCollector(commDigitalInputEventIn);
		commDigitalInputEventInInputTaskTrigger = new Smart::InputTaskTrigger<Smart::EventInputType<CommBasicObjects::CommDigitalInputEventResult>>(commDigitalInputEventInInputCollector);
		commDigitalInputEventInUpcallManager = new CommDigitalInputEventInUpcallManager(commDigitalInputEventInInputCollector);
		
		// create input-handler
		digitalInputEventHandler = new DigitalInputEventHandler(commDigitalInputEventIn, connections.digitalInputEventHandler.prescale);
		
		// create request-handlers
		
		// create state pattern
		stateChangeHandler = new SmartStateChangeHandler();
		stateActivityManager = new StateActivityManager(stateChangeHandler);
		stateSlave = new SmartACE::StateSlave(component, stateActivityManager);
		if (stateSlave->defineStates("load" ,"load") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion load.load" << std::endl;
		if (stateSlave->defineStates("manualload" ,"manualload") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion manualload.manualload" << std::endl;
		if (stateSlave->defineStates("manualunload" ,"manualunload") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion manualunload.manualunload" << std::endl;
		if (stateSlave->defineStates("signalerror" ,"signalerror") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion signalerror.signalerror" << std::endl;
		if (stateSlave->defineStates("unload" ,"unload") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion unload.unload" << std::endl;
		status = stateSlave->setUpInitialState(connections.component.initialComponentMode);
		if (status != Smart::SMART_OK) std::cerr << status << "; failed setting initial ComponentMode: " << connections.component.initialComponentMode << std::endl;
		// activate state slave
		status = stateSlave->activate();
		if(status != Smart::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		wiringSlave = new SmartACE::WiringSlave(component);
		// add client port to wiring slave
		if(connections.commDigitalInputEventIn.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::EventClient<CommBasicObjects::CommDigitalInputEventParameter, CommBasicObjects::CommDigitalInputEventResult>*>(commDigitalInputEventIn)->add(wiringSlave, connections.commDigitalInputEventIn.wiringName);
		}
		if(connections.commIOValuesQueryServiceReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommBasicObjects::CommIOValues, CommBasicObjects::CommIOValues>*>(commIOValuesQueryServiceReq)->add(wiringSlave, connections.commIOValuesQueryServiceReq.wiringName);
		}
		if(connections.commPowerOutputSendOut.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::SendClient<CommRobotinoObjects::CommRobotinoPowerOutputValue>*>(commPowerOutputSendOut)->add(wiringSlave, connections.commPowerOutputSendOut.wiringName);
		}
		
		// create parameter slave
		param = new SmartACE::ParameterSlave(component, &paramHandler);
		
		
		// create Task LoadTask
		loadTask = new LoadTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.loadTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = (int)(1000.0*1000.0 / connections.loadTask.periodicActFreq);
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(loadTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				loadTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task LoadTask" << std::endl;
			}
		} else if(connections.loadTask.trigger == "DataTriggered") {
			loadTaskTrigger = getInputTaskTriggerFromString(connections.loadTask.inPortRef);
			if(loadTaskTrigger != NULL) {
				loadTaskTrigger->attach(loadTask, connections.loadTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.loadTask.inPortRef << " as activation source for Task LoadTask" << std::endl;
			}
		} 
		
		// create Task ManualLoadTask
		manualLoadTask = new ManualLoadTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.manualLoadTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = (int)(1000.0*1000.0 / connections.manualLoadTask.periodicActFreq);
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(manualLoadTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				manualLoadTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task ManualLoadTask" << std::endl;
			}
		} else if(connections.manualLoadTask.trigger == "DataTriggered") {
			manualLoadTaskTrigger = getInputTaskTriggerFromString(connections.manualLoadTask.inPortRef);
			if(manualLoadTaskTrigger != NULL) {
				manualLoadTaskTrigger->attach(manualLoadTask, connections.manualLoadTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.manualLoadTask.inPortRef << " as activation source for Task ManualLoadTask" << std::endl;
			}
		} else
		{
			// setup default task-trigger as PeriodicTimer
			Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
			int microseconds = (int)(1000.0*1000.0 / 10.0);
			if(microseconds > 0) {
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				triggerPtr->attach(manualLoadTask);
				// store trigger in class member
				manualLoadTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task ManualLoadTask" << std::endl;
			}
		}
		
		// create Task ManualUnLoadTask
		manualUnLoadTask = new ManualUnLoadTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.manualUnLoadTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = (int)(1000.0*1000.0 / connections.manualUnLoadTask.periodicActFreq);
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(manualUnLoadTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				manualUnLoadTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task ManualUnLoadTask" << std::endl;
			}
		} else if(connections.manualUnLoadTask.trigger == "DataTriggered") {
			manualUnLoadTaskTrigger = getInputTaskTriggerFromString(connections.manualUnLoadTask.inPortRef);
			if(manualUnLoadTaskTrigger != NULL) {
				manualUnLoadTaskTrigger->attach(manualUnLoadTask, connections.manualUnLoadTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.manualUnLoadTask.inPortRef << " as activation source for Task ManualUnLoadTask" << std::endl;
			}
		} else
		{
			// setup default task-trigger as PeriodicTimer
			Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
			int microseconds = (int)(1000.0*1000.0 / 10.0);
			if(microseconds > 0) {
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				triggerPtr->attach(manualUnLoadTask);
				// store trigger in class member
				manualUnLoadTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task ManualUnLoadTask" << std::endl;
			}
		}
		
		// create Task SignalErrorTask
		signalErrorTask = new SignalErrorTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.signalErrorTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = (int)(1000.0*1000.0 / connections.signalErrorTask.periodicActFreq);
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(signalErrorTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				signalErrorTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task SignalErrorTask" << std::endl;
			}
		} else if(connections.signalErrorTask.trigger == "DataTriggered") {
			signalErrorTaskTrigger = getInputTaskTriggerFromString(connections.signalErrorTask.inPortRef);
			if(signalErrorTaskTrigger != NULL) {
				signalErrorTaskTrigger->attach(signalErrorTask, connections.signalErrorTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.signalErrorTask.inPortRef << " as activation source for Task SignalErrorTask" << std::endl;
			}
		} else
		{
			// setup default task-trigger as PeriodicTimer
			Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
			int microseconds = (int)(1000.0*1000.0 / 2.0);
			if(microseconds > 0) {
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				triggerPtr->attach(signalErrorTask);
				// store trigger in class member
				signalErrorTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task SignalErrorTask" << std::endl;
			}
		}
		
		// create Task UnLoadTask
		unLoadTask = new UnLoadTask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.unLoadTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = (int)(1000.0*1000.0 / connections.unLoadTask.periodicActFreq);
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(unLoadTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				unLoadTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task UnLoadTask" << std::endl;
			}
		} else if(connections.unLoadTask.trigger == "DataTriggered") {
			unLoadTaskTrigger = getInputTaskTriggerFromString(connections.unLoadTask.inPortRef);
			if(unLoadTaskTrigger != NULL) {
				unLoadTaskTrigger->attach(unLoadTask, connections.unLoadTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.unLoadTask.inPortRef << " as activation source for Task UnLoadTask" << std::endl;
			}
		} 
		
		
		// link observers with subjects
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void ComponentRobotinoConveyerBeltServer_OPCUA::run()
{
	stateSlave->acquire("init");
	// startup all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onStartup();
	}
	
	// startup all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onStartup();
	}
	stateSlave->release("init");
	
	// do not call this handler within the init state (see above) as this handler internally calls setStartupFinished() (this should be fixed in future)
	compHandler.onStartup();
	
	// this call blocks until the component is commanded to shutdown
	stateSlave->acquire("shutdown");
	
	// shutdown all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onShutdown();
	}
	
	// shutdown all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onShutdown();
	}
	
	if(connections.component.useLogger == true) {
		//FIXME: use logging
		//Smart::LOGGER->stopLogging();
	}
	
	compHandler.onShutdown();
	
	stateSlave->release("shutdown");
}

// clean-up component's resources
void ComponentRobotinoConveyerBeltServer_OPCUA::fini()
{
	// unlink all observers
	
	// destroy all task instances
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(loadTaskTrigger != NULL){
		loadTaskTrigger->detach(loadTask);
		delete loadTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(manualLoadTaskTrigger != NULL){
		manualLoadTaskTrigger->detach(manualLoadTask);
		delete manualLoadTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(manualUnLoadTaskTrigger != NULL){
		manualUnLoadTaskTrigger->detach(manualUnLoadTask);
		delete manualUnLoadTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(signalErrorTaskTrigger != NULL){
		signalErrorTaskTrigger->detach(signalErrorTask);
		delete signalErrorTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(unLoadTaskTrigger != NULL){
		unLoadTaskTrigger->detach(unLoadTask);
		delete unLoadTask;
	}

	// destroy all input-handler
	delete digitalInputEventHandler;

	// destroy InputTaskTriggers and UpcallManagers
	delete commDigitalInputEventInInputTaskTrigger;
	delete commDigitalInputEventInUpcallManager;
	delete commDigitalInputEventInInputCollector;

	// destroy client ports
	delete commDigitalInputEventIn;
	delete commIOValuesQueryServiceReq;
	delete commPowerOutputSendOutWrapper;
	delete commPowerOutputSendOut;

	// destroy request-handlers

	// destroy server ports
	delete robotinoConveyerBeltEventOutWrapper;
	delete robotinoConveyerBeltEventOut;
	
	// destroy event-test handlers (if needed)
	robotinoConveyerBeltEventOutEventTestHandler;
	
	delete stateSlave;
	delete stateActivityManager;
	// destroy state-change-handler
	delete stateChangeHandler;
	
	// destroy all master/slave ports
	delete wiringSlave;
	delete param;
	

	// destroy all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->destroy();
	}

	// destroy all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->destroy();
	}
	
}

void ComponentRobotinoConveyerBeltServer_OPCUA::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	SmartACE::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("ComponentRobotinoConveyerBeltServer_OPCUA.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load ComponentRobotinoConveyerBeltServer_OPCUA.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: ComponentRobotinoConveyerBeltServer_OPCUA.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		SmartACE::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(SmartACE::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(SmartACE::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		parameter.getString("component", "initialComponentMode", connections.component.initialComponentMode);
		if(parameter.checkIfParameterExists("component", "defaultScheduler")) {
			parameter.getString("component", "defaultScheduler", connections.component.defaultScheduler);
		}
		if(parameter.checkIfParameterExists("component", "useLogger")) {
			parameter.getBoolean("component", "useLogger", connections.component.useLogger);
		}
		
		// load parameters for client CommDigitalInputEventIn
		parameter.getBoolean("CommDigitalInputEventIn", "initialConnect", connections.commDigitalInputEventIn.initialConnect);
		parameter.getString("CommDigitalInputEventIn", "serviceName", connections.commDigitalInputEventIn.serviceName);
		parameter.getString("CommDigitalInputEventIn", "serverName", connections.commDigitalInputEventIn.serverName);
		parameter.getString("CommDigitalInputEventIn", "wiringName", connections.commDigitalInputEventIn.wiringName);
		if(parameter.checkIfParameterExists("CommDigitalInputEventIn", "roboticMiddleware")) {
			parameter.getString("CommDigitalInputEventIn", "roboticMiddleware", connections.commDigitalInputEventIn.roboticMiddleware);
		}
		// load parameters for client CommIOValuesQueryServiceReq
		parameter.getBoolean("CommIOValuesQueryServiceReq", "initialConnect", connections.commIOValuesQueryServiceReq.initialConnect);
		parameter.getString("CommIOValuesQueryServiceReq", "serviceName", connections.commIOValuesQueryServiceReq.serviceName);
		parameter.getString("CommIOValuesQueryServiceReq", "serverName", connections.commIOValuesQueryServiceReq.serverName);
		parameter.getString("CommIOValuesQueryServiceReq", "wiringName", connections.commIOValuesQueryServiceReq.wiringName);
		if(parameter.checkIfParameterExists("CommIOValuesQueryServiceReq", "roboticMiddleware")) {
			parameter.getString("CommIOValuesQueryServiceReq", "roboticMiddleware", connections.commIOValuesQueryServiceReq.roboticMiddleware);
		}
		// load parameters for client CommPowerOutputSendOut
		parameter.getBoolean("CommPowerOutputSendOut", "initialConnect", connections.commPowerOutputSendOut.initialConnect);
		parameter.getString("CommPowerOutputSendOut", "serviceName", connections.commPowerOutputSendOut.serviceName);
		parameter.getString("CommPowerOutputSendOut", "serverName", connections.commPowerOutputSendOut.serverName);
		parameter.getString("CommPowerOutputSendOut", "wiringName", connections.commPowerOutputSendOut.wiringName);
		if(parameter.checkIfParameterExists("CommPowerOutputSendOut", "roboticMiddleware")) {
			parameter.getString("CommPowerOutputSendOut", "roboticMiddleware", connections.commPowerOutputSendOut.roboticMiddleware);
		}
		
		// load parameters for server RobotinoConveyerBeltEventOut
		parameter.getString("RobotinoConveyerBeltEventOut", "serviceName", connections.robotinoConveyerBeltEventOut.serviceName);
		if(parameter.checkIfParameterExists("RobotinoConveyerBeltEventOut", "roboticMiddleware")) {
			parameter.getString("RobotinoConveyerBeltEventOut", "roboticMiddleware", connections.robotinoConveyerBeltEventOut.roboticMiddleware);
		}
		
		// load parameters for task LoadTask
		parameter.getDouble("LoadTask", "minActFreqHz", connections.loadTask.minActFreq);
		parameter.getDouble("LoadTask", "maxActFreqHz", connections.loadTask.maxActFreq);
		parameter.getString("LoadTask", "triggerType", connections.loadTask.trigger);
		if(connections.loadTask.trigger == "PeriodicTimer") {
			parameter.getDouble("LoadTask", "periodicActFreqHz", connections.loadTask.periodicActFreq);
		} else if(connections.loadTask.trigger == "DataTriggered") {
			parameter.getString("LoadTask", "inPortRef", connections.loadTask.inPortRef);
			parameter.getInteger("LoadTask", "prescale", connections.loadTask.prescale);
		}
		if(parameter.checkIfParameterExists("LoadTask", "scheduler")) {
			parameter.getString("LoadTask", "scheduler", connections.loadTask.scheduler);
		}
		if(parameter.checkIfParameterExists("LoadTask", "priority")) {
			parameter.getInteger("LoadTask", "priority", connections.loadTask.priority);
		}
		if(parameter.checkIfParameterExists("LoadTask", "cpuAffinity")) {
			parameter.getInteger("LoadTask", "cpuAffinity", connections.loadTask.cpuAffinity);
		}
		// load parameters for task ManualLoadTask
		parameter.getDouble("ManualLoadTask", "minActFreqHz", connections.manualLoadTask.minActFreq);
		parameter.getDouble("ManualLoadTask", "maxActFreqHz", connections.manualLoadTask.maxActFreq);
		parameter.getString("ManualLoadTask", "triggerType", connections.manualLoadTask.trigger);
		if(connections.manualLoadTask.trigger == "PeriodicTimer") {
			parameter.getDouble("ManualLoadTask", "periodicActFreqHz", connections.manualLoadTask.periodicActFreq);
		} else if(connections.manualLoadTask.trigger == "DataTriggered") {
			parameter.getString("ManualLoadTask", "inPortRef", connections.manualLoadTask.inPortRef);
			parameter.getInteger("ManualLoadTask", "prescale", connections.manualLoadTask.prescale);
		}
		if(parameter.checkIfParameterExists("ManualLoadTask", "scheduler")) {
			parameter.getString("ManualLoadTask", "scheduler", connections.manualLoadTask.scheduler);
		}
		if(parameter.checkIfParameterExists("ManualLoadTask", "priority")) {
			parameter.getInteger("ManualLoadTask", "priority", connections.manualLoadTask.priority);
		}
		if(parameter.checkIfParameterExists("ManualLoadTask", "cpuAffinity")) {
			parameter.getInteger("ManualLoadTask", "cpuAffinity", connections.manualLoadTask.cpuAffinity);
		}
		// load parameters for task ManualUnLoadTask
		parameter.getDouble("ManualUnLoadTask", "minActFreqHz", connections.manualUnLoadTask.minActFreq);
		parameter.getDouble("ManualUnLoadTask", "maxActFreqHz", connections.manualUnLoadTask.maxActFreq);
		parameter.getString("ManualUnLoadTask", "triggerType", connections.manualUnLoadTask.trigger);
		if(connections.manualUnLoadTask.trigger == "PeriodicTimer") {
			parameter.getDouble("ManualUnLoadTask", "periodicActFreqHz", connections.manualUnLoadTask.periodicActFreq);
		} else if(connections.manualUnLoadTask.trigger == "DataTriggered") {
			parameter.getString("ManualUnLoadTask", "inPortRef", connections.manualUnLoadTask.inPortRef);
			parameter.getInteger("ManualUnLoadTask", "prescale", connections.manualUnLoadTask.prescale);
		}
		if(parameter.checkIfParameterExists("ManualUnLoadTask", "scheduler")) {
			parameter.getString("ManualUnLoadTask", "scheduler", connections.manualUnLoadTask.scheduler);
		}
		if(parameter.checkIfParameterExists("ManualUnLoadTask", "priority")) {
			parameter.getInteger("ManualUnLoadTask", "priority", connections.manualUnLoadTask.priority);
		}
		if(parameter.checkIfParameterExists("ManualUnLoadTask", "cpuAffinity")) {
			parameter.getInteger("ManualUnLoadTask", "cpuAffinity", connections.manualUnLoadTask.cpuAffinity);
		}
		// load parameters for task SignalErrorTask
		parameter.getDouble("SignalErrorTask", "minActFreqHz", connections.signalErrorTask.minActFreq);
		parameter.getDouble("SignalErrorTask", "maxActFreqHz", connections.signalErrorTask.maxActFreq);
		parameter.getString("SignalErrorTask", "triggerType", connections.signalErrorTask.trigger);
		if(connections.signalErrorTask.trigger == "PeriodicTimer") {
			parameter.getDouble("SignalErrorTask", "periodicActFreqHz", connections.signalErrorTask.periodicActFreq);
		} else if(connections.signalErrorTask.trigger == "DataTriggered") {
			parameter.getString("SignalErrorTask", "inPortRef", connections.signalErrorTask.inPortRef);
			parameter.getInteger("SignalErrorTask", "prescale", connections.signalErrorTask.prescale);
		}
		if(parameter.checkIfParameterExists("SignalErrorTask", "scheduler")) {
			parameter.getString("SignalErrorTask", "scheduler", connections.signalErrorTask.scheduler);
		}
		if(parameter.checkIfParameterExists("SignalErrorTask", "priority")) {
			parameter.getInteger("SignalErrorTask", "priority", connections.signalErrorTask.priority);
		}
		if(parameter.checkIfParameterExists("SignalErrorTask", "cpuAffinity")) {
			parameter.getInteger("SignalErrorTask", "cpuAffinity", connections.signalErrorTask.cpuAffinity);
		}
		// load parameters for task UnLoadTask
		parameter.getDouble("UnLoadTask", "minActFreqHz", connections.unLoadTask.minActFreq);
		parameter.getDouble("UnLoadTask", "maxActFreqHz", connections.unLoadTask.maxActFreq);
		parameter.getString("UnLoadTask", "triggerType", connections.unLoadTask.trigger);
		if(connections.unLoadTask.trigger == "PeriodicTimer") {
			parameter.getDouble("UnLoadTask", "periodicActFreqHz", connections.unLoadTask.periodicActFreq);
		} else if(connections.unLoadTask.trigger == "DataTriggered") {
			parameter.getString("UnLoadTask", "inPortRef", connections.unLoadTask.inPortRef);
			parameter.getInteger("UnLoadTask", "prescale", connections.unLoadTask.prescale);
		}
		if(parameter.checkIfParameterExists("UnLoadTask", "scheduler")) {
			parameter.getString("UnLoadTask", "scheduler", connections.unLoadTask.scheduler);
		}
		if(parameter.checkIfParameterExists("UnLoadTask", "priority")) {
			parameter.getInteger("UnLoadTask", "priority", connections.unLoadTask.priority);
		}
		if(parameter.checkIfParameterExists("UnLoadTask", "cpuAffinity")) {
			parameter.getInteger("UnLoadTask", "cpuAffinity", connections.unLoadTask.cpuAffinity);
		}
		if(parameter.checkIfParameterExists("DigitalInputEventHandler", "prescale")) {
			parameter.getInteger("DigitalInputEventHandler", "prescale", connections.digitalInputEventHandler.prescale);
		}
		
		// load parameters for PlainOpcUaComponentRobotinoConveyerBeltServer_OPCUAExtension
		// load parameteters for OpcUaDeviceClient ProductionStation
		if(parameter.checkIfParameterExists("ProductionStation", "autoConnect")) {
			parameter.getBoolean("ProductionStation", "autoConnect", connections.productionStation.autoConnect);
		}
		if(parameter.checkIfParameterExists("ProductionStation", "rootObjectPath")) {
			parameter.getString("ProductionStation", "rootObjectPath", connections.productionStation.rootObjectPath);
		}
		if(parameter.checkIfParameterExists("ProductionStation", "deviceURI")) {
			parameter.getString("ProductionStation", "deviceURI", connections.productionStation.deviceURI);
		}
		if(parameter.checkIfParameterExists("ProductionStation", "opcuaXmlFile")) {
			parameter.getString("ProductionStation", "opcuaXmlFile", connections.productionStation.opcuaXmlFile);
		}
		
		
		// load parameters for all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->loadParameters(parameter);
		}
		
		paramHandler.loadParameter(parameter);
	
	} catch (const SmartACE::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
