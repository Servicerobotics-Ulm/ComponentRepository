//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _COMPONENTROBOTINOCONVEYERBELTSERVER_OPCUA_HH
#define _COMPONENTROBOTINOCONVEYERBELTSERVER_OPCUA_HH

#include <map>
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "ComponentRobotinoConveyerBeltServer_OPCUACore.hh"

#include "ComponentRobotinoConveyerBeltServer_OPCUAPortFactoryInterface.hh"
#include "ComponentRobotinoConveyerBeltServer_OPCUAExtension.hh"

// forward declarations
class ComponentRobotinoConveyerBeltServer_OPCUAPortFactoryInterface;
class ComponentRobotinoConveyerBeltServer_OPCUAExtension;

// includes for ComponentRobotinoConveyerBeltServer_OPCUAROS1InterfacesExtension

// includes for ComponentRobotinoConveyerBeltServer_OPCUARestInterfacesExtension

// includes for PlainOpcUaComponentRobotinoConveyerBeltServer_OPCUAExtension
// include plain OPC UA device clients
#include "OpcUaProductionStation.hh"
// include plain OPC UA status servers


// include communication objects
#include <CommBasicObjects/CommDigitalInputEventParameter.hh>
#include <CommBasicObjects/CommDigitalInputEventParameterACE.hh>
#include <CommBasicObjects/CommDigitalInputEventResult.hh>
#include <CommBasicObjects/CommDigitalInputEventResultACE.hh>
#include <CommBasicObjects/CommDigitalInputEventState.hh>
#include <CommBasicObjects/CommDigitalInputEventStateACE.hh>
#include <CommBasicObjects/CommIOValues.hh>
#include <CommBasicObjects/CommIOValuesACE.hh>
#include <CommRobotinoObjects/CommRobotinoConveyerBeltEventParameter.hh>
#include <CommRobotinoObjects/CommRobotinoConveyerBeltEventParameterACE.hh>
#include <CommRobotinoObjects/CommRobotinoConveyerBeltEventResult.hh>
#include <CommRobotinoObjects/CommRobotinoConveyerBeltEventResultACE.hh>
#include <CommRobotinoObjects/CommRobotinoPowerOutputValue.hh>
#include <CommRobotinoObjects/CommRobotinoPowerOutputValueACE.hh>
#include <CommRobotinoObjects/RobotinoConveyerBeltEventState.hh>
#include <CommRobotinoObjects/RobotinoConveyerBeltEventStateACE.hh>

// include tasks
#include "LoadTask.hh"
#include "ManualLoadTask.hh"
#include "ManualUnLoadTask.hh"
#include "SignalErrorTask.hh"
#include "UnLoadTask.hh"
// include UpcallManagers and InputCollectors
#include "CommDigitalInputEventInUpcallManager.hh"
#include "CommDigitalInputEventInInputCollector.hh"

// include input-handler(s)
#include "DigitalInputEventHandler.hh"
// include request-handler(s)
// output port wrappers
#include "CommPowerOutputSendOutWrapper.hh"
#include "RobotinoConveyerBeltEventOutWrapper.hh"

// include handler
#include "CompHandler.hh"

#include "ParameterStateStruct.hh"
#include "ParameterUpdateHandler.hh"

#include "SmartStateChangeHandler.hh"

#define COMP ComponentRobotinoConveyerBeltServer_OPCUA::instance()

class ComponentRobotinoConveyerBeltServer_OPCUA : public ComponentRobotinoConveyerBeltServer_OPCUACore {
private:
	static ComponentRobotinoConveyerBeltServer_OPCUA *_componentRobotinoConveyerBeltServer_OPCUA;
	
	// constructor
	ComponentRobotinoConveyerBeltServer_OPCUA();
	
	// copy-constructor
	ComponentRobotinoConveyerBeltServer_OPCUA(const ComponentRobotinoConveyerBeltServer_OPCUA& cc);
	
	// destructor
	~ComponentRobotinoConveyerBeltServer_OPCUA() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	// helper method that maps a string-name to an according TaskTriggerSubject
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
	// internal map storing the different port-creation factories (that internally map to specific middleware implementations)
	std::map<std::string, ComponentRobotinoConveyerBeltServer_OPCUAPortFactoryInterface*> portFactoryRegistry;
	
	// internal map storing various extensions of this component class
	std::map<std::string, ComponentRobotinoConveyerBeltServer_OPCUAExtension*> componentExtensionRegistry;
	
public:
	ParameterStateStruct getGlobalState() const
	{
		return paramHandler.getGlobalState();
	}
	
	ParameterStateStruct getParameters() const
	{
		return paramHandler.getGlobalState();
	}
	
	// define tasks
	Smart::TaskTriggerSubject* loadTaskTrigger;
	LoadTask *loadTask;
	Smart::TaskTriggerSubject* manualLoadTaskTrigger;
	ManualLoadTask *manualLoadTask;
	Smart::TaskTriggerSubject* manualUnLoadTaskTrigger;
	ManualUnLoadTask *manualUnLoadTask;
	Smart::TaskTriggerSubject* signalErrorTaskTrigger;
	SignalErrorTask *signalErrorTask;
	Smart::TaskTriggerSubject* unLoadTaskTrigger;
	UnLoadTask *unLoadTask;
	
	// define input-ports
	// InputPort CommDigitalInputEventIn
	Smart::IEventClientPattern<CommBasicObjects::CommDigitalInputEventParameter, CommBasicObjects::CommDigitalInputEventResult> *commDigitalInputEventIn;
	Smart::InputTaskTrigger<Smart::EventInputType<CommBasicObjects::CommDigitalInputEventResult>> *commDigitalInputEventInInputTaskTrigger;
	CommDigitalInputEventInUpcallManager *commDigitalInputEventInUpcallManager;
	CommDigitalInputEventInInputCollector *commDigitalInputEventInInputCollector;
	
	// define request-ports
	Smart::IQueryClientPattern<CommBasicObjects::CommIOValues, CommBasicObjects::CommIOValues> *commIOValuesQueryServiceReq;
	
	// define input-handler
	DigitalInputEventHandler *digitalInputEventHandler;
	
	// define output-ports
	Smart::ISendClientPattern<CommRobotinoObjects::CommRobotinoPowerOutputValue> *commPowerOutputSendOut;
	CommPowerOutputSendOutWrapper *commPowerOutputSendOutWrapper;
	Smart::IEventServerPattern<CommRobotinoObjects::CommRobotinoConveyerBeltEventParameter, CommRobotinoObjects::CommRobotinoConveyerBeltEventResult, CommRobotinoObjects::RobotinoConveyerBeltEventState> *robotinoConveyerBeltEventOut;
	RobotinoConveyerBeltEventOutWrapper *robotinoConveyerBeltEventOutWrapper;
	std::shared_ptr<Smart::IEventTestHandler<CommRobotinoObjects::CommRobotinoConveyerBeltEventParameter, CommRobotinoObjects::CommRobotinoConveyerBeltEventResult, CommRobotinoObjects::RobotinoConveyerBeltEventState>> robotinoConveyerBeltEventOutEventTestHandler;
	
	// define answer-ports
	
	// define request-handlers
	
	// definitions of ComponentRobotinoConveyerBeltServer_OPCUAROS1InterfacesExtension
	
	// definitions of ComponentRobotinoConveyerBeltServer_OPCUARestInterfacesExtension
	
	// definitions of PlainOpcUaComponentRobotinoConveyerBeltServer_OPCUAExtension
	OPCUA::ProductionStation *productionStation;
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	ParamUpdateHandler paramHandler;
	SmartACE::ParameterSlave *param;
	
	
	/// this method is used to register different PortFactory classes (one for each supported middleware framework)
	void addPortFactory(const std::string &name, ComponentRobotinoConveyerBeltServer_OPCUAPortFactoryInterface *portFactory);
	
	SmartACE::SmartComponent* getComponentImpl();
	
	/// this method is used to register different component-extension classes
	void addExtension(ComponentRobotinoConveyerBeltServer_OPCUAExtension *extension);
	
	/// this method allows to access the registered component-extensions (automatically converting to the actuall implementation type)
	template <typename T>
	T* getExtension(const std::string &name) {
		auto it = componentExtensionRegistry.find(name);
		if(it != componentExtensionRegistry.end()) {
			return dynamic_cast<T*>(it->second);
		}
		return 0;
	}
	
	/// initialize component's internal members
	void init(int argc, char *argv[]);
	
	/// execute the component's infrastructure
	void run();
	
	/// clean-up component's resources
	void fini();
	
	/// call this method to set the overall component into the Alive state (i.e. component is then ready to operate)
	void setStartupFinished();
	
	/// connect all component's client ports
	Smart::StatusCode connectAndStartAllServices();
	
	/// start all assocuated Activities
	void startAllTasks();
	
	/// start all associated timers
	void startAllTimers();
	
	Smart::StatusCode connectCommDigitalInputEventIn(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectCommIOValuesQueryServiceReq(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectCommPowerOutputSendOut(const std::string &serverName, const std::string &serviceName);

	// return singleton instance
	static ComponentRobotinoConveyerBeltServer_OPCUA* instance()
	{
		if(_componentRobotinoConveyerBeltServer_OPCUA == 0) {
			_componentRobotinoConveyerBeltServer_OPCUA = new ComponentRobotinoConveyerBeltServer_OPCUA();
		}
		return _componentRobotinoConveyerBeltServer_OPCUA;
	}
	
	static void deleteInstance() {
		if(_componentRobotinoConveyerBeltServer_OPCUA != 0) {
			delete _componentRobotinoConveyerBeltServer_OPCUA;
		}
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct LoadTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} loadTask;
		struct ManualLoadTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} manualLoadTask;
		struct ManualUnLoadTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} manualUnLoadTask;
		struct SignalErrorTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} signalErrorTask;
		struct UnLoadTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} unLoadTask;
		
		//--- upcall parameter ---
		struct DigitalInputEventHandler_struct {
			int prescale;
		} digitalInputEventHandler;
		
		//--- server port parameter ---
		struct RobotinoConveyerBeltEventOut_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} robotinoConveyerBeltEventOut;
	
		//--- client port parameter ---
		struct CommDigitalInputEventIn_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} commDigitalInputEventIn;
		struct CommIOValuesQueryServiceReq_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} commIOValuesQueryServiceReq;
		struct CommPowerOutputSendOut_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} commPowerOutputSendOut;
		
		// -- parameters for ComponentRobotinoConveyerBeltServer_OPCUAROS1InterfacesExtension
		
		// -- parameters for ComponentRobotinoConveyerBeltServer_OPCUARestInterfacesExtension
		
		// -- parameters for PlainOpcUaComponentRobotinoConveyerBeltServer_OPCUAExtension
		struct ProductionStation_struct {
			bool autoConnect;
			std::string deviceURI;
			std::string rootObjectPath;
			std::string opcuaXmlFile;
		} productionStation;
		
		
	} connections;
};
#endif
