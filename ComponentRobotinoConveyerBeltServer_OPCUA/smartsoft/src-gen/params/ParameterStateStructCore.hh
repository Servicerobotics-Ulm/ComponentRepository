//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter OPCUAstatic
		 */
		class OPCUAstaticType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string object_name;
			std::list<std::string> server_address;
		
		public:
			// default constructor
			OPCUAstaticType() {
				object_name = "MPS";
				server_address.push_back("NULL_NOT_USED");
				server_address.push_back("opc.tcp://10.36.34.241:4840");
				server_address.push_back("opc.tcp://10.36.32.125:4840");
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getObject_name() const { return object_name; }
			inline std::list<std::string> getServer_address() const { return server_address; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "OPCUAstatic(";
				os << "object_name = " << object_name << ", ";
				std::list<std::string>::const_iterator server_addressIt;
				for(server_addressIt=server_address.begin(); server_addressIt!=server_address.end(); server_addressIt++)
				{
				os << "server_address = " << *server_addressIt << ", ";
				os << "server_address = " << *server_addressIt << ", ";
				os << "server_address = " << *server_addressIt << ", ";
				}
				os << ")\n";
			}
			
		}; // end class OPCUAstaticType
		
		/**
		 * Definition of Parameter Robot
		 */
		class RobotType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			unsigned int FallingEdge_PW_Load_mSec;
			unsigned int FallingEdge_PW_Unload_mSec;
			unsigned int LoadProcess_TimeOutSec;
			unsigned short NoOf_FallingEdge_Load;
			unsigned short NoOf_FallingEdge_Unload;
			unsigned int UnloadProcess_TimeOutSec;
			short ack_pressed_din;
			unsigned int belt_time_out_sec;
			unsigned short box_present_din;
			unsigned short dock_complete_dout;
			bool ignore_station_communication;
			int ignore_station_communication_unload_time_sec;
			float load_motor_direction;
			short manual_load_dout;
			short signal_error_dout;
			short signal_loading_dout;
			short signal_unloading_dout;
			unsigned int station_communication_delay_sec;
			unsigned int station_communication_delay_usec;
			unsigned short trans_read_din;
			float unload_motor_direction;
		
		public:
			// default constructor
			RobotType() {
				FallingEdge_PW_Load_mSec = 100;
				FallingEdge_PW_Unload_mSec = 100;
				LoadProcess_TimeOutSec = 60;
				NoOf_FallingEdge_Load = 8;
				NoOf_FallingEdge_Unload = 4;
				UnloadProcess_TimeOutSec = 60;
				ack_pressed_din = 4;
				belt_time_out_sec = 10;
				box_present_din = 2;
				dock_complete_dout = 0;
				ignore_station_communication = false;
				ignore_station_communication_unload_time_sec = 4;
				load_motor_direction = 1;
				manual_load_dout = 5;
				signal_error_dout = 5;
				signal_loading_dout = 6;
				signal_unloading_dout = 7;
				station_communication_delay_sec = 0;
				station_communication_delay_usec = 500000;
				trans_read_din = 3;
				unload_motor_direction = 1;
			}
		
			/**
			 * here are the public getters
			 */
			inline unsigned int getFallingEdge_PW_Load_mSec() const { return FallingEdge_PW_Load_mSec; }
			inline unsigned int getFallingEdge_PW_Unload_mSec() const { return FallingEdge_PW_Unload_mSec; }
			inline unsigned int getLoadProcess_TimeOutSec() const { return LoadProcess_TimeOutSec; }
			inline unsigned short getNoOf_FallingEdge_Load() const { return NoOf_FallingEdge_Load; }
			inline unsigned short getNoOf_FallingEdge_Unload() const { return NoOf_FallingEdge_Unload; }
			inline unsigned int getUnloadProcess_TimeOutSec() const { return UnloadProcess_TimeOutSec; }
			inline short getAck_pressed_din() const { return ack_pressed_din; }
			inline unsigned int getBelt_time_out_sec() const { return belt_time_out_sec; }
			inline unsigned short getBox_present_din() const { return box_present_din; }
			inline unsigned short getDock_complete_dout() const { return dock_complete_dout; }
			inline bool getIgnore_station_communication() const { return ignore_station_communication; }
			inline int getIgnore_station_communication_unload_time_sec() const { return ignore_station_communication_unload_time_sec; }
			inline float getLoad_motor_direction() const { return load_motor_direction; }
			inline short getManual_load_dout() const { return manual_load_dout; }
			inline short getSignal_error_dout() const { return signal_error_dout; }
			inline short getSignal_loading_dout() const { return signal_loading_dout; }
			inline short getSignal_unloading_dout() const { return signal_unloading_dout; }
			inline unsigned int getStation_communication_delay_sec() const { return station_communication_delay_sec; }
			inline unsigned int getStation_communication_delay_usec() const { return station_communication_delay_usec; }
			inline unsigned short getTrans_read_din() const { return trans_read_din; }
			inline float getUnload_motor_direction() const { return unload_motor_direction; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Robot(";
				os << "FallingEdge_PW_Load_mSec = " << FallingEdge_PW_Load_mSec << ", ";
				os << "FallingEdge_PW_Unload_mSec = " << FallingEdge_PW_Unload_mSec << ", ";
				os << "LoadProcess_TimeOutSec = " << LoadProcess_TimeOutSec << ", ";
				os << "NoOf_FallingEdge_Load = " << NoOf_FallingEdge_Load << ", ";
				os << "NoOf_FallingEdge_Unload = " << NoOf_FallingEdge_Unload << ", ";
				os << "UnloadProcess_TimeOutSec = " << UnloadProcess_TimeOutSec << ", ";
				os << "ack_pressed_din = " << ack_pressed_din << ", ";
				os << "belt_time_out_sec = " << belt_time_out_sec << ", ";
				os << "box_present_din = " << box_present_din << ", ";
				os << "dock_complete_dout = " << dock_complete_dout << ", ";
				os << "ignore_station_communication = " << ignore_station_communication << ", ";
				os << "ignore_station_communication_unload_time_sec = " << ignore_station_communication_unload_time_sec << ", ";
				os << "load_motor_direction = " << load_motor_direction << ", ";
				os << "manual_load_dout = " << manual_load_dout << ", ";
				os << "signal_error_dout = " << signal_error_dout << ", ";
				os << "signal_loading_dout = " << signal_loading_dout << ", ";
				os << "signal_unloading_dout = " << signal_unloading_dout << ", ";
				os << "station_communication_delay_sec = " << station_communication_delay_sec << ", ";
				os << "station_communication_delay_usec = " << station_communication_delay_usec << ", ";
				os << "trans_read_din = " << trans_read_din << ", ";
				os << "unload_motor_direction = " << unload_motor_direction << ", ";
				os << ")\n";
			}
			
		}; // end class RobotType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommRobotinoObjects
		 */
		class CommRobotinoObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet RobotinoConveyerParameter
			 */
			class RobotinoConveyerParameterType {
				friend class ParamUpdateHandler;
				public:
				/**
				 * Definition of Parameter SetStationID
				 */
				class SetStationIDType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					short id;
					
				public:
					// default constructor
					SetStationIDType() {
						id = 0;
					}
					
					/**
					 * here are the getter methods
					 */
					inline short getId() const { return id; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSetStationID(";
						os << "id = " << id << ", ";
						os << ")\n";
					}
					
				}; // end of parameter class SetStationIDType
				
				protected:
					/**
					 * internal members
					 */
					SetStationIDType SetStationID;
					
				public:
					/**
					 * public getter methods
					 */
					inline SetStationIDType getSetStationID() const { return SetStationID; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "RobotinoConveyerParameter(\n";
						SetStationID.to_ostream(os);
						os << ")";
					}
			}; // end of parameter-set class RobotinoConveyerParameterType
			
			protected:
				/**
				 * internal members
				 */
				RobotinoConveyerParameterType RobotinoConveyerParameter;
			
			public:
				/**
				 * public getter methods
				 */
				inline RobotinoConveyerParameterType getRobotinoConveyerParameter() const { return RobotinoConveyerParameter; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommRobotinoObjects(\n";
					RobotinoConveyerParameter.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommRobotinoObjectsType
	
protected:

	// Internal params
	OPCUAstaticType OPCUAstatic;
	RobotType Robot;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommRobotinoObjectsType CommRobotinoObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommRobotinoObjects = commit.getCommRobotinoObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	OPCUAstaticType getOPCUAstatic() const {
		return OPCUAstatic;
	}
	RobotType getRobot() const {
		return Robot;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommRobotinoObjectsType getCommRobotinoObjects() const {
		return CommRobotinoObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		OPCUAstatic.to_ostream(os);
		Robot.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommRobotinoObjects.to_ostream(os);
	}
};

#endif
