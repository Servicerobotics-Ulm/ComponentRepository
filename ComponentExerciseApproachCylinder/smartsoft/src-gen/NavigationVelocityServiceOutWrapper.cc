//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

// include wrapper header
#include "NavigationVelocityServiceOutWrapper.hh"

// include component's main class
#include "ComponentExerciseApproachCylinder.hh"

// other extensin includes

NavigationVelocityServiceOutWrapper::NavigationVelocityServiceOutWrapper(Smart::ISendClientPattern<CommBasicObjects::CommNavigationVelocity> *navigationVelocityServiceOut) {
	this->navigationVelocityServiceOut = navigationVelocityServiceOut;
	update_status = Smart::SMART_NODATA;
}

NavigationVelocityServiceOutWrapper::~NavigationVelocityServiceOutWrapper() {
}


Smart::StatusCode NavigationVelocityServiceOutWrapper::send(CommBasicObjects::CommNavigationVelocity &navigationVelocityServiceOutDataObject) {
	std::unique_lock<std::mutex> lock(update_mutex);
	updateData = navigationVelocityServiceOutDataObject;
	update_status = navigationVelocityServiceOut->send(navigationVelocityServiceOutDataObject);
	return update_status;
}

Smart::StatusCode NavigationVelocityServiceOutWrapper::getLatestUpdate(CommBasicObjects::CommNavigationVelocity &navigationVelocityServiceOutDataObject) {
	std::unique_lock<std::mutex> lock(update_mutex);
	navigationVelocityServiceOutDataObject = updateData;
	return update_status;
}
