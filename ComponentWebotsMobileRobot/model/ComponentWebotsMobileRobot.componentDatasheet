ComponentDatasheet ComponentWebotsMobileRobot
{
	BaseURI "http://www.servicerobotik-ulm.de"
	ShortDescription "

ComponentWebotsMobileRobot moves an mobile robot in the Webots simulator, with 2 differential wheels or 3 omni wheels or 4 mecanum wheels.

The robots coordinate system should be like this:
* x=front, y=left (x=y=0 is at the turning point of the robot (center between wheels))  
* z=up (z=0 is at floor level)

Set the robots controller, supervisor, name and the coordinate system like the following example:  

```
TiagoIron {
  controller \"&lt;extern&gt;\"
  supervisor TRUE
  name \"Tiago example\"
  lidarSlot [
    DEF CoordinateSystemTiago_example Transform {
      translation 0 -0.0913 0.202
      rotation -0.5773492691885823 0.5773502691890485 0.5773512691895147 2.09439
    }
    ...
  ]
}
```

### Example for 2 differential wheels:

distanceToRobotCentre is negative for left wheel, positive for the right

heading is 0 for all wheels

the second value for maxAcceleration is 0 (robot cannot move sideways)

```
  ParameterRefinement Webots { 
      robotName = \"Pioneer 3-DX\"
      motorName = [\"left wheel\", \"right wheel\"]
      radius = [0.0975, 0.0975]
      distanceToRobotCentre = [-0.165, 0.165]
      heading = [0, 0]
      maxAcceleration = [1.0, 0.0, 15.0]
  }
```

### Example for 3 omni wheels:

If clockwise rotation of the robot is done by clockwise rotation of the wheel, distanceToRobotCentre is positive, else negative.

heading is the orientation of the wheels relative to the front direction of the robot [degrees] 

```
  ParameterRefinement Webots { 
      robotName = \"Robotino 3\"
      motorName = [\"wheel0_joint\", \"wheel1_joint\", \"wheel2_joint\"]
      radius = [0.063, 0.063, 0.063]
      distanceToRobotCentre = [-0.1826, -0.1826, -0.1826]
      heading = [90.0, 210.0, 330.0]
      maxAcceleration = [3.0, 3.0, 20.0]
  }
```

Don't forget to add contactProperties in the world for the wheels to work: e.g. [Robotino](https://www.cyberbotics.com/doc/guide/robotino3#sample) 

### Example for 4 mecanum wheels:

distanceToRobotCentre = x-offset + y-offset of wheel relative to robot center = 0.228m + 0.158m = 0.386m

motorName must be in this order: front left, front right, back left, back right

```
ParameterRefinement Webots { 
	robotName = \"youBot\"
	motorName = [\"wheel2\", \"wheel1\", \"wheel4\", \"wheel3\"]
	radius = [0.05, 0.05, 0.05, 0.05]
	distanceToRobotCentre = [0.386, 0.386, 0.386, 0.386]
	heading = [0, 0, 0, 0]
	maxAcceleration = [2.0, 2.0, 8.0]
	keyboardControl = true	
}
```

The mecanum wheels must have an angle of 45 degrees (0.785398 radians) between the small wheels and the big wheel.

Add this to Worldinfo:

```
  contactProperties [
    ContactProperties {
      material1 \"InteriorWheelMat\"
      coulombFriction [
        0, 2, 0
      ]
      frictionRotation -0.785398 0
      bounce 0
    }
    ContactProperties {
      material1 \"ExteriorWheelMat\"
      coulombFriction [
        0, 2, 0
      ]
      frictionRotation 0.785398 0
      bounce 0
    }
  ] 
```

### Example program: 

```cpp
CommBasicObjects::CommNavigationVelocity navigationVelocity;
// vx: velocity front direction [mm/s]
// vy: velocity left direction [mm/s]
// omega: counterclockwise rotation [radians/s] 
navigationVelocity.setVX(vx).setVY(vy).setOmega(omega);
// set target movement speed of mobile robot
COMP->navigationVelocityServiceOut->send(navigationVelocity);



```

### other similar components:
- [ComponentRMPBaseServer](../ComponentRMPBaseServer)
- [ComponentRobotinoBaseServer](../ComponentRobotinoBaseServer)
- [SmartPioneerBaseServer](../SmartPioneerBaseServer)
- [SmartGazeboBaseServer](../SmartGazeboBaseServer)

"
	DatasheetProperty MarketName {
		value "Webots mobile robot"
	}
	DatasheetProperty Supplier {
		value "Servicerobotics Ulm"
	}
	DatasheetProperty Homepage {
		value "https://wiki.servicerobotik-ulm.de/directory:collection"
	}
	DatasheetProperty Purpose {
		value "Universal mobile robot in the Webots simulator, with 2 differential wheels or 3 omni wheels or 4 mecanum wheels"
	}
	ComponentPortDatasheet NavigationVelocityServiceIn {
	}
	ComponentPortDatasheet LocalizationEventServiceIn {
	}
	ComponentPortDatasheet BaseStateQueryServiceAnsw {
	}
	ComponentPortDatasheet BaseStateServiceOut {
	}
	ComponentPortDatasheet LocalizationUpdateServiceIn {
	}
}