//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck
//                2009 Andreas Steck
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------
#include "NavigationVelocityServiceInHandler.hh"
#include "ComponentWebotsMobileRobot.hh"
#include <iostream>

NavigationVelocityServiceInHandler::NavigationVelocityServiceInHandler(Smart::InputSubject<CommBasicObjects::CommNavigationVelocity> *subject, const int &prescaleFactor)
:	NavigationVelocityServiceInHandlerCore(subject, prescaleFactor)
{
	std::cout << "constructor NavigationVelocityServiceInHandler\n";
}
NavigationVelocityServiceInHandler::~NavigationVelocityServiceInHandler() 
{
	std::cout << "destructor NavigationVelocityServiceInHandler\n";
}

void NavigationVelocityServiceInHandler::on_NavigationVelocityServiceIn(const CommBasicObjects::CommNavigationVelocity &r)
{
	// implement business logic here
	// (do not use blocking calls here, otherwise this might block the InputPort NavigationVelocityServiceIn)
	double vX = r.get_vX(1); // meters
	double vY = r.get_vY(1); // meters
	double omega = r.get_omega(); //rad

	// set the robot's velocity
	//std::cout << "SetSpeed(" << vX<<","<<vY << ", " << omega << " )" << std::endl;


	Smart::StatusCode status = COMP->stateSlave->tryAcquire("eStop");
	if(status == Smart::SMART_OK)
	{
		std::cout<<__FUNCTION__<<": Robot in eStop, not sending vel command!"<<std::endl;
		COMP ->stateSlave->release("eStop");
	}
	else
	{
		if(COMP->robot!=NULL)
		{
			COMP->robot->setVxVyOmega(vX,vY,omega);
		}
		else
		{
			std::cout<<"Robot is not inizialized!"<<std::endl;
		}
	}
}
