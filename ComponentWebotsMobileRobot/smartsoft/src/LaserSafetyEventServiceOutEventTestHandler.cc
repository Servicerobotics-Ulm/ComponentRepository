//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2018 Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------

#include "LaserSafetyEventServiceOutEventTestHandler.hh"

bool LaserSafetyEventServiceOutEventTestHandler::testEvent(
	CommBasicObjects::CommLaserSafetyEventParam &p,
	CommBasicObjects::CommLaserSafetyField &r,
	const CommBasicObjects::CommLaserSafetyEventState &s
) throw() {
	bool changed = false;
	CommBasicObjects::SafetyFieldState changedState;
	//std::cout<<"Param: "<<p<<std::endl;
	//check if anything changed and remember the state it changed to
	//std::cout<<"State: "<<s<<std::endl;

	if(p.getWarningState() != s.getWarningState()){
		changed = true;
	}

	if(p.getProtectiveState() != s.getProtectiveState()){
		changed = true;
	}

	if(changed)
	{
		p.setProtectiveState(s.getProtectiveState());
		p.setWarningState(s.getWarningState());

		r.setProtectiveState(s.getProtectiveState());
		r.setWarningState(s.getWarningState());

		std::cout<<"LaserSaftyField fire event"<<std::endl;
	}

	// true --> send event
	// false --> don't send event
	return changed;

}
