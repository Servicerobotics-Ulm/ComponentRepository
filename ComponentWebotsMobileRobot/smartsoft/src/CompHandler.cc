//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck
//                2009 Andreas Steck
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------

#include "CompHandler.hh"
#include <iostream>
#include "aceSmartSoft.hh"

// include communication objects
#include "ComponentWebotsMobileRobot.hh"

void CompHandler::onStartup() {
	std::cout
			<< "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	Smart::StatusCode status;

	COMP->robot = new Robot();

//	while(COMP->robot->openSerial( COMP->getGlobalState().getRobot().getDaemonIP() )!=0)
//	{
//		std::cout<<"Retry..."<<std::endl;
//		sleep(1);
//	}

	COMP->robot->setParameters( COMP->getGlobalState().getRobot().getMaxVelX(),
	COMP->getGlobalState().getRobot().getMaxVelY(),
	COMP->getGlobalState().getRobot().getMaxRotVel());

	// Start all services. If you need manual control, use the content of this function to
	// connect and start each service individually, e.g:
	// COMP->connectMyPortName("SmartExampleComponent", "examplePort");

	//status = COMP->connectAndStartAllServices();

	if (COMP->getGlobalState().getGeneral().getUseLocalizationEvent()) {

		//status = COMP->connectLocalizationEventClient(COMP->connections.localizationEventClient.serverName, COMP->connections.localizationEventClient.serviceName);
		std::cout
				<< "if(COMP->getGlobalState().getGeneral().getUseLocalizationEvent())..."
				<< std::endl;

		COMP->connectLocalizationEventServiceIn(
				COMP->connections.localizationEventServiceIn.serverName,
				COMP->connections.localizationEventServiceIn.serviceName);

		//status = COMP->localizationEventServiceIn(COMP->connections.localizationEventServiceIn.serverName, COMP->connections.localizationEventServiceIn.serviceName);

	}

	// start push timed server
	//COMP->basePositionServer->start();

	// COMP->baseStateServiceOut->
	///COMP->baseStateServiceOut->

	// Start all tasks. If you need manual control, use the content of this function to
	// start each task individually.
	//COMP->startAllTasks();

	// start all tasks
	COMP->webotsAPITask->start();

	// Start all timers. If you need manual control, use the content of this function to
	// start each timer individually.
	COMP->startAllTimers();

	// Notify the component that setup/initialization is finished.
	// You may move this function to any other place.
	COMP->setStartupFinished();

	std::cout << "End of CompHandler onStartup!" << std::endl;
}

void CompHandler::onShutdown() {
	std::cout
			<< "shutdown - put your cleanup code in CompHandler::onShutdown()!!!\n";

	if (COMP->getGlobalState().getGeneral().getWritePoseFile() == true) {
		//if(COMP->signalStateTask->getLocalizationState() == true){
		if (true) {
			std::cout << "onShutdown-->Write last pose to file!" << std::endl;
			std::ofstream poseFile;
			poseFile.open(
					COMP->getGlobalState().getGeneral().getPoseFileName().c_str());
			if (poseFile.is_open()) {
				CommBasicObjects::CommBasePose pose =
						COMP->robot->getBasePosition();
				poseFile << pose.get_x(1) << ";" << pose.get_y(1) << ";"
						<< pose.get_base_azimuth() << ";";
				poseFile.close();
			} else {
				std::cout << "ERROR opening file: "
						<< COMP->getGlobalState().getGeneral().getPoseFileName()
						<< std::endl;
			}
		} else {
			std::cout << "Pose NOT saved, robot not localized!" << std::endl;
		}
	}

	//COMP->robot->closeSerial();
}

