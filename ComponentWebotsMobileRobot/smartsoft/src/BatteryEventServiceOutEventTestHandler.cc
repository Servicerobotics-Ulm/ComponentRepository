//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck
//                2009 Andreas Steck
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------

#include "BatteryEventServiceOutEventTestHandler.hh"

bool BatteryEventServiceOutEventTestHandler::testEvent(
	CommBasicObjects::CommBatteryParameter &p,
	CommBasicObjects::CommBatteryEvent &r,
	const CommBasicObjects::CommBatteryState &s
) throw() {

	bool result = false;

	double currentVoltage = s.getChargeValue();

	double upper, lower;
	upper = p.getUpperThreshold();
	lower = p.getLowerThreshold();

	CommBasicObjects::ComparisonState current, desired, state;
	current = p.getCurrentState();
	desired = p.getDesiredState();

	if(currentVoltage < lower) {
		state = CommBasicObjects::ComparisonState::LOWER;
	} else if(currentVoltage < upper) {
		state = CommBasicObjects::ComparisonState::INBETWEEN;
	} else {
		state = CommBasicObjects::ComparisonState::GREATER;
	}

	if(state != current) {
		p.setCurrentState(state);

		if(desired == CommBasicObjects::ComparisonState::UNKNOWN || desired == state) {
			r.setBatteryState(state);
			r.setVoltage(currentVoltage);
			result = true;
		}
	}

	return result;
	// fire all events (without filtering) in the default implementation
	// implement your own (specific) event-filtering code using the event-parameter as input
	// true means that the current event will be fired to the according client
	// false means that the current event is ignored (it will not be communicated to the according client)
	//return true;
}
