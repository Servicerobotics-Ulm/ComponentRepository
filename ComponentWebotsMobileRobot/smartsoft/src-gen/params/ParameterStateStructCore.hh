//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter OdometryRandomError
		 */
		class OdometryRandomErrorType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double varianceOfDistancePerMeter;
			double varianceOfHeadingPerMeter;
			double varianceOfHeadingPerRadians;
		
		public:
			// default constructor
			OdometryRandomErrorType() {
				varianceOfDistancePerMeter = 0.0025;
				varianceOfHeadingPerMeter = 0.001218;
				varianceOfHeadingPerRadians = 0.001212;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getVarianceOfDistancePerMeter() const { return varianceOfDistancePerMeter; }
			inline double getVarianceOfHeadingPerMeter() const { return varianceOfHeadingPerMeter; }
			inline double getVarianceOfHeadingPerRadians() const { return varianceOfHeadingPerRadians; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "OdometryRandomError(";
				os << "varianceOfDistancePerMeter = " << varianceOfDistancePerMeter << ", ";
				os << "varianceOfHeadingPerMeter = " << varianceOfHeadingPerMeter << ", ";
				os << "varianceOfHeadingPerRadians = " << varianceOfHeadingPerRadians << ", ";
				os << ")\n";
			}
			
		}; // end class OdometryRandomErrorType
		
		/**
		 * Definition of Parameter Webots
		 */
		class WebotsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::list<double> distanceToRobotCentre;
			std::list<double> heading;
			bool keyboardControl;
			std::list<double> maxAcceleration;
			std::list<std::string> motorName;
			std::list<double> radius;
			std::string robotName;
		
		public:
			// default constructor
			WebotsType() {
				distanceToRobotCentre.push_back(-0.1826);
				distanceToRobotCentre.push_back(-0.1826);
				distanceToRobotCentre.push_back(-0.1826);
				heading.push_back(90.0);
				heading.push_back(210.0);
				heading.push_back(330.0);
				keyboardControl = true;
				maxAcceleration.push_back(10.0);
				maxAcceleration.push_back(6.0);
				maxAcceleration.push_back(40.0);
				motorName.push_back("wheel0_joint");
				motorName.push_back("wheel1_joint");
				motorName.push_back("wheel2_joint");
				radius.push_back(0.063);
				radius.push_back(0.063);
				radius.push_back(0.063);
				robotName = "Robotino 3";
			}
		
			/**
			 * here are the public getters
			 */
			inline std::list<double> getDistanceToRobotCentre() const { return distanceToRobotCentre; }
			inline std::list<double> getHeading() const { return heading; }
			inline bool getKeyboardControl() const { return keyboardControl; }
			inline std::list<double> getMaxAcceleration() const { return maxAcceleration; }
			inline std::list<std::string> getMotorName() const { return motorName; }
			inline std::list<double> getRadius() const { return radius; }
			inline std::string getRobotName() const { return robotName; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Webots(";
				std::list<double>::const_iterator distanceToRobotCentreIt;
				for(distanceToRobotCentreIt=distanceToRobotCentre.begin(); distanceToRobotCentreIt!=distanceToRobotCentre.end(); distanceToRobotCentreIt++)
				{
				os << "distanceToRobotCentre = " << *distanceToRobotCentreIt << ", ";
				os << "distanceToRobotCentre = " << *distanceToRobotCentreIt << ", ";
				os << "distanceToRobotCentre = " << *distanceToRobotCentreIt << ", ";
				}
				std::list<double>::const_iterator headingIt;
				for(headingIt=heading.begin(); headingIt!=heading.end(); headingIt++)
				{
				os << "heading = " << *headingIt << ", ";
				os << "heading = " << *headingIt << ", ";
				os << "heading = " << *headingIt << ", ";
				}
				os << "keyboardControl = " << keyboardControl << ", ";
				std::list<double>::const_iterator maxAccelerationIt;
				for(maxAccelerationIt=maxAcceleration.begin(); maxAccelerationIt!=maxAcceleration.end(); maxAccelerationIt++)
				{
				os << "maxAcceleration = " << *maxAccelerationIt << ", ";
				os << "maxAcceleration = " << *maxAccelerationIt << ", ";
				os << "maxAcceleration = " << *maxAccelerationIt << ", ";
				}
				std::list<std::string>::const_iterator motorNameIt;
				for(motorNameIt=motorName.begin(); motorNameIt!=motorName.end(); motorNameIt++)
				{
				os << "motorName = " << *motorNameIt << ", ";
				os << "motorName = " << *motorNameIt << ", ";
				os << "motorName = " << *motorNameIt << ", ";
				}
				std::list<double>::const_iterator radiusIt;
				for(radiusIt=radius.begin(); radiusIt!=radius.end(); radiusIt++)
				{
				os << "radius = " << *radiusIt << ", ";
				os << "radius = " << *radiusIt << ", ";
				os << "radius = " << *radiusIt << ", ";
				}
				os << "robotName = " << robotName << ", ";
				os << ")\n";
			}
			
		}; // end class WebotsType
		
		/**
		 * Definition of Parameter Robot
		 */
		class RobotType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double maxRotVel;
			double maxVelX;
			double maxVelY;
		
		public:
			// default constructor
			RobotType() {
				maxRotVel = 4.0;
				maxVelX = 1.0;
				maxVelY = 1.0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getMaxRotVel() const { return maxRotVel; }
			inline double getMaxVelX() const { return maxVelX; }
			inline double getMaxVelY() const { return maxVelY; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Robot(";
				os << "maxRotVel = " << maxRotVel << ", ";
				os << "maxVelX = " << maxVelX << ", ";
				os << "maxVelY = " << maxVelY << ", ";
				os << ")\n";
			}
			
		}; // end class RobotType
		
		/**
		 * Definition of Parameter General
		 */
		class GeneralType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string poseFileName;
			bool useLocalizationEvent;
			bool verbose;
			bool writePoseFile;
		
		public:
			// default constructor
			GeneralType() {
				poseFileName = "/tmp/lastRobotPose.txt";
				useLocalizationEvent = true;
				verbose = false;
				writePoseFile = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getPoseFileName() const { return poseFileName; }
			inline bool getUseLocalizationEvent() const { return useLocalizationEvent; }
			inline bool getVerbose() const { return verbose; }
			inline bool getWritePoseFile() const { return writePoseFile; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "General(";
				os << "poseFileName = " << poseFileName << ", ";
				os << "useLocalizationEvent = " << useLocalizationEvent << ", ";
				os << "verbose = " << verbose << ", ";
				os << "writePoseFile = " << writePoseFile << ", ";
				os << ")\n";
			}
			
		}; // end class GeneralType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	GeneralType General;
	OdometryRandomErrorType OdometryRandomError;
	RobotType Robot;
	WebotsType Webots;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	GeneralType getGeneral() const {
		return General;
	}
	OdometryRandomErrorType getOdometryRandomError() const {
		return OdometryRandomError;
	}
	RobotType getRobot() const {
		return Robot;
	}
	WebotsType getWebots() const {
		return Webots;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		General.to_ostream(os);
		OdometryRandomError.to_ostream(os);
		Robot.to_ostream(os);
		Webots.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["General"] = nlohmann::json {
			{"poseFileName" , getGeneral().getPoseFileName()},
			{"useLocalizationEvent" , getGeneral().getUseLocalizationEvent()},
			{"verbose" , getGeneral().getVerbose()},
			{"writePoseFile" , getGeneral().getWritePoseFile()}
		};
		param["OdometryRandomError"] = nlohmann::json {
			{"varianceOfDistancePerMeter" , getOdometryRandomError().getVarianceOfDistancePerMeter()},
			{"varianceOfHeadingPerMeter" , getOdometryRandomError().getVarianceOfHeadingPerMeter()},
			{"varianceOfHeadingPerRadians" , getOdometryRandomError().getVarianceOfHeadingPerRadians()}
		};
		param["Robot"] = nlohmann::json {
			{"maxRotVel" , getRobot().getMaxRotVel()},
			{"maxVelX" , getRobot().getMaxVelX()},
			{"maxVelY" , getRobot().getMaxVelY()}
		};
		param["Webots"] = nlohmann::json {
			{"distanceToRobotCentre" , getWebots().getDistanceToRobotCentre()},
			{"heading" , getWebots().getHeading()},
			{"keyboardControl" , getWebots().getKeyboardControl()},
			{"maxAcceleration" , getWebots().getMaxAcceleration()},
			{"motorName" , getWebots().getMotorName()},
			{"radius" , getWebots().getRadius()},
			{"robotName" , getWebots().getRobotName()}
		};
	
		
		return param.dump();
	}
};

#endif
