//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ComponentWebotsMobileRobot.hh"
#include "smartTimedTaskTrigger.h"
//FIXME: implement logging
//#include "smartGlobalLogger.hh"

// the ace port-factory is used as a default port-mapping
#include "ComponentWebotsMobileRobotAcePortFactory.hh"


// initialize static singleton pointer to zero
ComponentWebotsMobileRobot* ComponentWebotsMobileRobot::_componentWebotsMobileRobot = 0;

// constructor
ComponentWebotsMobileRobot::ComponentWebotsMobileRobot()
{
	std::cout << "constructor of ComponentWebotsMobileRobot\n";
	
	// set all pointer members to NULL
	baseStateQueryServiceAnsw = NULL;
	baseStateQueryServiceAnswInputTaskTrigger = NULL;
	baseStateQueryServiceAnswHandler = NULL;
	baseStateServiceOut = NULL;
	baseStateServiceOutWrapper = NULL;
	//componentWebotsMobileRobotParams = NULL;
	//coordinationPort = NULL;
	localizationEventServiceIn = NULL;
	localizationEventServiceInInputTaskTrigger = NULL;
	localizationEventServiceInUpcallManager = NULL;
	localizationEventServiceInInputCollector = NULL;
	localizationEventServiceInHandler = NULL;
	localizationUpdateServiceIn = NULL;
	localizationUpdateServiceInInputTaskTrigger = NULL;
	localizationUpdateServiceInUpcallManager = NULL;
	localizationUpdateServiceInInputCollector = NULL;
	localizationUpdateServiceInHandler = NULL;
	navigationVelocityServiceIn = NULL;
	navigationVelocityServiceInInputTaskTrigger = NULL;
	navigationVelocityServiceInUpcallManager = NULL;
	navigationVelocityServiceInInputCollector = NULL;
	navigationVelocityServiceInHandler = NULL;
	webotsAPITask = NULL;
	webotsAPITaskTrigger = NULL;
	stateChangeHandler = NULL;
	stateActivityManager = NULL;
	stateSlave = NULL;
	wiringSlave = NULL;
	param = NULL;
	
	// set default ini parameter values
	connections.component.name = "ComponentWebotsMobileRobot";
	connections.component.initialComponentMode = "Neutral";
	connections.component.defaultScheduler = "DEFAULT";
	connections.component.useLogger = false;
	
	connections.baseStateQueryServiceAnsw.serviceName = "BaseStateQueryServiceAnsw";
	connections.baseStateQueryServiceAnsw.roboticMiddleware = "ACE_SmartSoft";
	connections.baseStateServiceOut.serviceName = "BaseStateServiceOut";
	connections.baseStateServiceOut.roboticMiddleware = "ACE_SmartSoft";
	connections.localizationUpdateServiceIn.serviceName = "LocalizationUpdateServiceIn";
	connections.localizationUpdateServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.navigationVelocityServiceIn.serviceName = "NavigationVelocityServiceIn";
	connections.navigationVelocityServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.localizationEventServiceIn.initialConnect = false;
	connections.localizationEventServiceIn.wiringName = "LocalizationEventServiceIn";
	connections.localizationEventServiceIn.serverName = "unknown";
	connections.localizationEventServiceIn.serviceName = "unknown";
	connections.localizationEventServiceIn.interval = 1;
	connections.localizationEventServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.webotsAPITask.minActFreq = 0.0;
	connections.webotsAPITask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.webotsAPITask.scheduler = "DEFAULT";
	connections.webotsAPITask.priority = -1;
	connections.webotsAPITask.cpuAffinity = -1;
	connections.localizationEventServiceInHandler.prescale = 1;
	connections.localizationUpdateServiceInHandler.prescale = 1;
	connections.navigationVelocityServiceInHandler.prescale = 1;
	
}

void ComponentWebotsMobileRobot::addPortFactory(const std::string &name, ComponentWebotsMobileRobotPortFactoryInterface *portFactory)
{
	portFactoryRegistry[name] = portFactory;
}

void ComponentWebotsMobileRobot::addExtension(ComponentWebotsMobileRobotExtension *extension)
{
	componentExtensionRegistry[extension->getName()] = extension;
}

SmartACE::SmartComponent* ComponentWebotsMobileRobot::getComponentImpl()
{
	return dynamic_cast<ComponentWebotsMobileRobotAcePortFactory*>(portFactoryRegistry["ACE_SmartSoft"])->getComponentImpl();
}

/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void ComponentWebotsMobileRobot::setStartupFinished() {
	stateSlave->setWaitState("Alive");
	std::cout << "ComponentDefinition initialization/startup finished." << std::endl;
}


Smart::StatusCode ComponentWebotsMobileRobot::connectLocalizationEventServiceIn(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.localizationEventServiceIn.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = localizationEventServiceIn->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->localizationEventServiceIn->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}


/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
Smart::StatusCode ComponentWebotsMobileRobot::connectAndStartAllServices() {
	Smart::StatusCode status = Smart::SMART_OK;
	
	status = connectLocalizationEventServiceIn(connections.localizationEventServiceIn.serverName, connections.localizationEventServiceIn.serviceName);
	if(status != Smart::SMART_OK) return status;
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void ComponentWebotsMobileRobot::startAllTasks() {
	// start task WebotsAPITask
	if(connections.webotsAPITask.scheduler != "DEFAULT") {
		ACE_Sched_Params webotsAPITask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.webotsAPITask.scheduler == "FIFO") {
			webotsAPITask_SchedParams.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				webotsAPITask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				webotsAPITask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(connections.webotsAPITask.scheduler == "RR") {
			webotsAPITask_SchedParams.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				webotsAPITask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				webotsAPITask_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		webotsAPITask->start(webotsAPITask_SchedParams, connections.webotsAPITask.cpuAffinity);
	} else {
		webotsAPITask->start();
	}
}

/**
 * Start all timers contained in this component
 */
void ComponentWebotsMobileRobot::startAllTimers() {
}


Smart::TaskTriggerSubject* ComponentWebotsMobileRobot::getInputTaskTriggerFromString(const std::string &client)
{
	if(client == "LocalizationEventServiceIn") return localizationEventServiceInInputTaskTrigger;
	if(client == "LocalizationUpdateServiceIn") return localizationUpdateServiceInInputTaskTrigger;
	if(client == "NavigationVelocityServiceIn") return navigationVelocityServiceInInputTaskTrigger;
	
	return NULL;
}


void ComponentWebotsMobileRobot::init(int argc, char *argv[])
{
	try {
		Smart::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		// print out the actual parameters which are used to initialize the component
		std::cout << " \nComponentDefinition Initial-Parameters:\n" << COMP->getParameters() << std::endl;
		
		
		// initialize all registered port-factories
		for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
		{
			portFactory->second->initialize(this, argc, argv);
		}
		
		// initialize all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->initialize(this, argc, argv);
		}
		
		ComponentWebotsMobileRobotPortFactoryInterface *acePortFactory = portFactoryRegistry["ACE_SmartSoft"];
		if(acePortFactory == 0) {
			std::cerr << "ERROR: acePortFactory NOT instantiated -> exit(-1)" << std::endl;
			exit(-1);
		}
		
		// this pointer is used for backwards compatibility (deprecated: should be removed as soon as all patterns, including coordination, are moved to port-factory)
		SmartACE::SmartComponent *component = dynamic_cast<ComponentWebotsMobileRobotAcePortFactory*>(acePortFactory)->getComponentImpl();
		
		std::cout << "ComponentDefinition ComponentWebotsMobileRobot is named " << connections.component.name << std::endl;
		
		if(connections.component.useLogger == true) {
			//FIXME: use logging
			//Smart::LOGGER->openLogFileInFolder("data/"+connections.component.name);
			//Smart::LOGGER->startLogging();
		}

		// create event-test handlers (if needed)
		
		// create server ports
		// TODO: set minCycleTime from Ini-file
		baseStateQueryServiceAnsw = portFactoryRegistry[connections.baseStateQueryServiceAnsw.roboticMiddleware]->createBaseStateQueryServiceAnsw(connections.baseStateQueryServiceAnsw.serviceName);
		baseStateQueryServiceAnswInputTaskTrigger = new Smart::QueryServerTaskTrigger<CommBasicObjects::CommVoid, CommBasicObjects::CommBaseState>(baseStateQueryServiceAnsw);
		baseStateServiceOut = portFactoryRegistry[connections.baseStateServiceOut.roboticMiddleware]->createBaseStateServiceOut(connections.baseStateServiceOut.serviceName);
		baseStateServiceOutWrapper = new BaseStateServiceOutWrapper(baseStateServiceOut);
		localizationUpdateServiceIn = portFactoryRegistry[connections.localizationUpdateServiceIn.roboticMiddleware]->createLocalizationUpdateServiceIn(connections.localizationUpdateServiceIn.serviceName);
		navigationVelocityServiceIn = portFactoryRegistry[connections.navigationVelocityServiceIn.roboticMiddleware]->createNavigationVelocityServiceIn(connections.navigationVelocityServiceIn.serviceName);
		
		// create client ports
		localizationEventServiceIn = portFactoryRegistry[connections.localizationEventServiceIn.roboticMiddleware]->createLocalizationEventServiceIn();
		
		// create InputTaskTriggers and UpcallManagers
		localizationEventServiceInInputCollector = new LocalizationEventServiceInInputCollector(localizationEventServiceIn);
		localizationEventServiceInInputTaskTrigger = new Smart::InputTaskTrigger<Smart::EventInputType<CommLocalizationObjects::CommLocalizationEventResult>>(localizationEventServiceInInputCollector);
		localizationEventServiceInUpcallManager = new LocalizationEventServiceInUpcallManager(localizationEventServiceInInputCollector);
		localizationUpdateServiceInInputCollector = new LocalizationUpdateServiceInInputCollector(localizationUpdateServiceIn);
		localizationUpdateServiceInInputTaskTrigger = new Smart::InputTaskTrigger<CommBasicObjects::CommBasePositionUpdate>(localizationUpdateServiceInInputCollector);
		localizationUpdateServiceInUpcallManager = new LocalizationUpdateServiceInUpcallManager(localizationUpdateServiceInInputCollector);
		navigationVelocityServiceInInputCollector = new NavigationVelocityServiceInInputCollector(navigationVelocityServiceIn);
		navigationVelocityServiceInInputTaskTrigger = new Smart::InputTaskTrigger<CommBasicObjects::CommNavigationVelocity>(navigationVelocityServiceInInputCollector);
		navigationVelocityServiceInUpcallManager = new NavigationVelocityServiceInUpcallManager(navigationVelocityServiceInInputCollector);
		
		// create input-handler
		localizationEventServiceInHandler = new LocalizationEventServiceInHandler(localizationEventServiceIn, connections.localizationEventServiceInHandler.prescale);
		localizationUpdateServiceInHandler = new LocalizationUpdateServiceInHandler(localizationUpdateServiceIn, connections.localizationUpdateServiceInHandler.prescale);
		navigationVelocityServiceInHandler = new NavigationVelocityServiceInHandler(navigationVelocityServiceIn, connections.navigationVelocityServiceInHandler.prescale);
		
		// create request-handlers
		baseStateQueryServiceAnswHandler = new BaseStateQueryServiceAnswHandler(baseStateQueryServiceAnsw);
		
		// create state pattern
		stateChangeHandler = new SmartStateChangeHandler();
		stateActivityManager = new StateActivityManager(stateChangeHandler);
		stateSlave = new SmartACE::StateSlave(component, stateActivityManager);
		if (stateSlave->defineStates("emergencyStop" ,"eStop") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion emergencyStop.eStop" << std::endl;
		status = stateSlave->setUpInitialState(connections.component.initialComponentMode);
		if (status != Smart::SMART_OK) std::cerr << status << "; failed setting initial ComponentMode: " << connections.component.initialComponentMode << std::endl;
		// activate state slave
		status = stateSlave->activate();
		if(status != Smart::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		wiringSlave = new SmartACE::WiringSlave(component);
		// add client port to wiring slave
		if(connections.localizationEventServiceIn.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::EventClient<CommLocalizationObjects::CommLocalizationEventParameter, CommLocalizationObjects::CommLocalizationEventResult>*>(localizationEventServiceIn)->add(wiringSlave, connections.localizationEventServiceIn.wiringName);
		}
		
		// create parameter slave
		param = new SmartACE::ParameterSlave(component, &paramHandler);
		
		
		// create Task WebotsAPITask
		webotsAPITask = new WebotsAPITask(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.webotsAPITask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = (int)(1000.0*1000.0 / connections.webotsAPITask.periodicActFreq);
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(webotsAPITask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				webotsAPITaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task WebotsAPITask" << std::endl;
			}
		} else if(connections.webotsAPITask.trigger == "DataTriggered") {
			webotsAPITaskTrigger = getInputTaskTriggerFromString(connections.webotsAPITask.inPortRef);
			if(webotsAPITaskTrigger != NULL) {
				webotsAPITaskTrigger->attach(webotsAPITask, connections.webotsAPITask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.webotsAPITask.inPortRef << " as activation source for Task WebotsAPITask" << std::endl;
			}
		} 
		
		
		// link observers with subjects
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void ComponentWebotsMobileRobot::run()
{
	stateSlave->acquire("init");
	// startup all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onStartup();
	}
	
	// startup all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onStartup();
	}
	stateSlave->release("init");
	
	// do not call this handler within the init state (see above) as this handler internally calls setStartupFinished() (this should be fixed in future)
	compHandler.onStartup();
	
	// this call blocks until the component is commanded to shutdown
	stateSlave->acquire("shutdown");
	
	// shutdown all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onShutdown();
	}
	
	// shutdown all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onShutdown();
	}
	
	if(connections.component.useLogger == true) {
		//FIXME: use logging
		//Smart::LOGGER->stopLogging();
	}
	
	compHandler.onShutdown();
	
	stateSlave->release("shutdown");
}

// clean-up component's resources
void ComponentWebotsMobileRobot::fini()
{
	// unlink all observers
	
	// destroy all task instances
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(webotsAPITaskTrigger != NULL){
		webotsAPITaskTrigger->detach(webotsAPITask);
		delete webotsAPITask;
	}

	// destroy all input-handler
	delete localizationEventServiceInHandler;
	delete localizationUpdateServiceInHandler;
	delete navigationVelocityServiceInHandler;

	// destroy InputTaskTriggers and UpcallManagers
	delete localizationEventServiceInInputTaskTrigger;
	delete localizationEventServiceInUpcallManager;
	delete localizationEventServiceInInputCollector;
	delete localizationUpdateServiceInInputTaskTrigger;
	delete localizationUpdateServiceInUpcallManager;
	delete localizationUpdateServiceInInputCollector;
	delete navigationVelocityServiceInInputTaskTrigger;
	delete navigationVelocityServiceInUpcallManager;
	delete navigationVelocityServiceInInputCollector;

	// destroy client ports
	delete localizationEventServiceIn;

	// destroy request-handlers
	delete baseStateQueryServiceAnswHandler;

	// destroy server ports
	delete baseStateQueryServiceAnswInputTaskTrigger;
	delete baseStateQueryServiceAnsw;
	delete baseStateServiceOutWrapper;
	delete baseStateServiceOut;
	delete localizationUpdateServiceIn;
	delete navigationVelocityServiceIn;
	
	// destroy event-test handlers (if needed)
	
	delete stateSlave;
	delete stateActivityManager;
	// destroy state-change-handler
	delete stateChangeHandler;
	
	// destroy all master/slave ports
	delete wiringSlave;
	delete param;
	

	// destroy all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->destroy();
	}

	// destroy all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->destroy();
	}
	
}

void ComponentWebotsMobileRobot::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	SmartACE::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("ComponentWebotsMobileRobot.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load ComponentWebotsMobileRobot.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: ComponentWebotsMobileRobot.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		SmartACE::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(SmartACE::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(SmartACE::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		parameter.getString("component", "initialComponentMode", connections.component.initialComponentMode);
		if(parameter.checkIfParameterExists("component", "defaultScheduler")) {
			parameter.getString("component", "defaultScheduler", connections.component.defaultScheduler);
		}
		if(parameter.checkIfParameterExists("component", "useLogger")) {
			parameter.getBoolean("component", "useLogger", connections.component.useLogger);
		}
		
		// load parameters for client LocalizationEventServiceIn
		parameter.getBoolean("LocalizationEventServiceIn", "initialConnect", connections.localizationEventServiceIn.initialConnect);
		parameter.getString("LocalizationEventServiceIn", "serviceName", connections.localizationEventServiceIn.serviceName);
		parameter.getString("LocalizationEventServiceIn", "serverName", connections.localizationEventServiceIn.serverName);
		parameter.getString("LocalizationEventServiceIn", "wiringName", connections.localizationEventServiceIn.wiringName);
		if(parameter.checkIfParameterExists("LocalizationEventServiceIn", "roboticMiddleware")) {
			parameter.getString("LocalizationEventServiceIn", "roboticMiddleware", connections.localizationEventServiceIn.roboticMiddleware);
		}
		
		// load parameters for server BaseStateQueryServiceAnsw
		parameter.getString("BaseStateQueryServiceAnsw", "serviceName", connections.baseStateQueryServiceAnsw.serviceName);
		if(parameter.checkIfParameterExists("BaseStateQueryServiceAnsw", "roboticMiddleware")) {
			parameter.getString("BaseStateQueryServiceAnsw", "roboticMiddleware", connections.baseStateQueryServiceAnsw.roboticMiddleware);
		}
		// load parameters for server BaseStateServiceOut
		parameter.getString("BaseStateServiceOut", "serviceName", connections.baseStateServiceOut.serviceName);
		if(parameter.checkIfParameterExists("BaseStateServiceOut", "roboticMiddleware")) {
			parameter.getString("BaseStateServiceOut", "roboticMiddleware", connections.baseStateServiceOut.roboticMiddleware);
		}
		// load parameters for server LocalizationUpdateServiceIn
		parameter.getString("LocalizationUpdateServiceIn", "serviceName", connections.localizationUpdateServiceIn.serviceName);
		if(parameter.checkIfParameterExists("LocalizationUpdateServiceIn", "roboticMiddleware")) {
			parameter.getString("LocalizationUpdateServiceIn", "roboticMiddleware", connections.localizationUpdateServiceIn.roboticMiddleware);
		}
		// load parameters for server NavigationVelocityServiceIn
		parameter.getString("NavigationVelocityServiceIn", "serviceName", connections.navigationVelocityServiceIn.serviceName);
		if(parameter.checkIfParameterExists("NavigationVelocityServiceIn", "roboticMiddleware")) {
			parameter.getString("NavigationVelocityServiceIn", "roboticMiddleware", connections.navigationVelocityServiceIn.roboticMiddleware);
		}
		
		// load parameters for task WebotsAPITask
		parameter.getDouble("WebotsAPITask", "minActFreqHz", connections.webotsAPITask.minActFreq);
		parameter.getDouble("WebotsAPITask", "maxActFreqHz", connections.webotsAPITask.maxActFreq);
		parameter.getString("WebotsAPITask", "triggerType", connections.webotsAPITask.trigger);
		if(connections.webotsAPITask.trigger == "PeriodicTimer") {
			parameter.getDouble("WebotsAPITask", "periodicActFreqHz", connections.webotsAPITask.periodicActFreq);
		} else if(connections.webotsAPITask.trigger == "DataTriggered") {
			parameter.getString("WebotsAPITask", "inPortRef", connections.webotsAPITask.inPortRef);
			parameter.getInteger("WebotsAPITask", "prescale", connections.webotsAPITask.prescale);
		}
		if(parameter.checkIfParameterExists("WebotsAPITask", "scheduler")) {
			parameter.getString("WebotsAPITask", "scheduler", connections.webotsAPITask.scheduler);
		}
		if(parameter.checkIfParameterExists("WebotsAPITask", "priority")) {
			parameter.getInteger("WebotsAPITask", "priority", connections.webotsAPITask.priority);
		}
		if(parameter.checkIfParameterExists("WebotsAPITask", "cpuAffinity")) {
			parameter.getInteger("WebotsAPITask", "cpuAffinity", connections.webotsAPITask.cpuAffinity);
		}
		if(parameter.checkIfParameterExists("LocalizationEventServiceInHandler", "prescale")) {
			parameter.getInteger("LocalizationEventServiceInHandler", "prescale", connections.localizationEventServiceInHandler.prescale);
		}
		if(parameter.checkIfParameterExists("LocalizationUpdateServiceInHandler", "prescale")) {
			parameter.getInteger("LocalizationUpdateServiceInHandler", "prescale", connections.localizationUpdateServiceInHandler.prescale);
		}
		if(parameter.checkIfParameterExists("NavigationVelocityServiceInHandler", "prescale")) {
			parameter.getInteger("NavigationVelocityServiceInHandler", "prescale", connections.navigationVelocityServiceInHandler.prescale);
		}
		
		
		// load parameters for all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->loadParameters(parameter);
		}
		
		paramHandler.loadParameter(parameter);
	
	} catch (const SmartACE::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
