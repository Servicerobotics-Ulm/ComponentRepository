(define-tcb (rackDetectionMovePtu ?location ?nmbr)
  (module "objRecognitionModule")
  (priority 99)
  (precondition  (equal '(ptu) (first (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a location) (name ?location))) 'obj-recog-poses))))
  (action (
            (format t "=========================>>> objRecognitionModule rackdetection: tcb-ptu-pose ~s ~d ~%" '?location '?nmbr)
            (let* ((location (tcl-kb-query :key '(is-a name) :value '((is-a location)(name ?location))))
                   (obj-recog-ptu-poses (second (get-value location 'obj-recog-poses)))
                   (obj-recog-ptu-pose (nth '?nmbr obj-recog-ptu-poses)))         
              (tcl-activate-event :name 'lala 
                                  :handler 'rackDetectionPtuHandler
                                  :server 'cs_ptu
                                  :service 'ptuevent 
                                  :mode 'continuous)
                                  
              (tcl-state :server 'cs_ptu :state "Move")
              (tcl-send :server 'cs_ptu
                        :service 'ptupose 
                        :param `(absolute ,(first obj-recog-ptu-pose) ,(second obj-recog-ptu-pose))))
            '(SUCCESS ()))))

(define-event-handler (rackDetectionPtuHandler)
  (module "objRecognitionModule")
  (action (
            (format t "=========================>>> detectionModule: HANDLER PTU: ~s ~%~%" (tcl-event-message))
            (cond                            
                ((equal (tcl-event-message) "(GOALREACHED)")
                  (format t "=========================>>> goal reached !!! ~%")   
                  (tcl-state :server 'cs_ptu :state "Neutral")
                  (tcl-abort)
                  )
                (T
                  (format t "=========================>>> other event !!! ~%")))
             )))
             
;(define-tcb (tcb-set-obj-type ?objType)
;  (module "objRecognitionModule")
;  (action (
;            (format t "=========================>>> tcb-obj-recog-set-obj-type ~s ~%" '?objType)
;            (tcl-param :server 'cs_rackDetection :slot 'COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.ADDOBJECT :value '?objType)
;            '(SUCCESS ()))))
            
(define-tcb (tcb-set-search-height-range ?min-height ?max-height)
   (module "objRecognitionModule")
   (action (
       (format t "=========================>>> tcb-set-search-height-range ~%")
       ;; TODO: How to send external param?
       (tcl-param :server 'objectrecognition :slot 'SETSEARCHHEIGHT :value '(?min-height ?max-height))
       (tcl-param :server 'objectrecognition :slot 'COMMIT))))
       
(define-tcb (tcb-set-query-image)
   (module "objRecognitionModule")
   (action (
	(tcl-state :server 'cs_camera :state "QueryImage")
       )
   )
)

(define-tcb (setNeutral)
   (module "objRecognitionModule")
   (action (
	(tcl-state :server 'cs_camera :state "Neutral")
       )
   )
)

;; If the moveptu block is not executed at least one time before executing this block the Camera 
;; component will get no valid ptu state => ptu component sends its state (pushNewest) for the first time only after it was moved (see DevicePoseStateTask)
(define-tcb (detectRack => ?envId ?objs)
  (module "objRecognitionModule")
  (action (
            (format t "=========================>>> tcb-detect-rack ID = ~s~%" '?envId)
            (tcl-activate-event :name 'evt-recog
                                :handler 'rackDetectionDetectionHandler
                                :server 'cs_rackDetection 
                                :service 'objectrecognitionevent
                                :mode 'continuous)
            ;(tcl-state :server 'cs_camera :state "QueryImage")
            (format t "after queryimage~%")
            ;(tcl-state :server 'cs_ptu :state "Move")
            (format t "after move~%")
            (tcl-param :server 'cs_rackDetection :slot 'COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.recognize)
            '(SUCCESS ()))))
            
(define-event-handler (rackDetectionDetectionHandler)
  (module "objRecognitionModule")
  (action (
            (format t "=========================>>> HANDLER OBJECT RECOGNIZED ~s ~%~%" (tcl-event-message))
            ;(tcl-bind-var :name '?envId :value (first (tcl-event-message)))
            (tcl-bind-var :name '?envId :value (first (read-from-string(tcl-event-message))))
            ;(tcl-bind-var :name '?objs :value (tcl-event-message))
            ;(tcl-state :server 'cs_camera :state "PushImage")
            (tcl-bind-var :name '?objs :value (read-from-string(tcl-event-message)))
            (tcl-state :server 'cs_ptu :state "Neutral")
            (tcl-abort)
           )
  )
)


(define-tcb (storeObjects-rd ?objects)
  (module "objRecognitionModule")
  (action (
            (let* ((objs '?objects)
                  (envId (first objs))
                  (obj nil))
              (format t "=========================>>> tcb-store-objects-in-kb -- envId = ~s  -- objs = ~s~%" envId objs)
              ;; iterate over objects
              (dolist (id (second objs))
                (setf obj (tcl-query :server 'cs_rackDetection
                                     :service 'objectquery
                                     :request id))
                ;; convert to meter !!!
                (setf (nth 1 obj) (/ (nth 1 obj) 1000)) ;x
                (setf (nth 2 obj) (/ (nth 2 obj) 1000)) ;y
                (setf (nth 3 obj) (/ (nth 3 obj) 1000)) ;z

                (format t "-- OBJ id: ~s   obj: ~s ~%" id obj)
                ;; store in KB
                (cond 
                  ;((equal (first obj) 'OBSTACLE-HULL)
                  ;  (format t "Skipping OBSTACLE-HULL ~%"))
                  ((equal (first obj) 'OBSTACLE-HULL)
                    (format t "Store OBSTACLE-HULL ~%")
                    (tcl-kb-update 
                        :key '(is-a id) 
                        :value `(
                                  (is-a OBJECT)
                                  (id ,id)
                                  (envid ,envId)
                                  (status NOT_GRASPABLE)
                                  (type OBSTACLE-HULL)
                                  (speech "obstacle hull")))) 
                  ((equal (first obj) 'OBSTACLE)
                    (format t "Skipping OBSTACLE ~%"))
                  ((equal (first obj) 'TABLE)
                    (format t "Skipping TABLE ~%"))
                  ((equal (first obj) 'FREE-SPACE)
                    (format t "Store FREE-SPACE ~%")
                    (setf (nth 8 obj) (/ (nth 8 obj) 1000)) ;x surface pose
                    (setf (nth 9 obj) (/ (nth 9 obj) 1000)) ;y surface pose
                    (setf (nth 10 obj) (/ (nth 10 obj) 1000)) ;z surface pose
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type FREE-SPACE)
                                (occupied false)
                                (pose ,(rest obj)))))
                  ((equal (first obj) 'ROBOTINO)
                    (format t "Store ROBOTINO ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type ROBOTINO)
                                (pose ,(rest obj))))) 
                  ((equal (first obj) 'RATIOPHARM-IBU)
                    (format t "Store RATIOPHARM-IBU ~%")
                    (setf (nth 8 obj) (/ (nth 8 obj) 1000)) ;x surface pose
                    (setf (nth 9 obj) (/ (nth 9 obj) 1000)) ;y surface pose
                    (setf (nth 10 obj) (/ (nth 10 obj) 1000)) ;z surface pose
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 140)
                                (type RATIOPHARM-IBU)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "RATIOPHARM IBU")))) 
                  
		  ((equal (first obj) 'RATIOPHARM-ASS)
                    (format t "Store RATIOPHARM-ASS ~%")
                    (setf (nth 8 obj) (/ (nth 8 obj) 1000)) ;x surface pose
                    (setf (nth 9 obj) (/ (nth 9 obj) 1000)) ;y surface pose
                    (setf (nth 10 obj) (/ (nth 10 obj) 1000)) ;z surface pose
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 140)
                                (type RATIOPHARM-ASS)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "RATIOPHARM ASS"))))   


	          ((equal (first obj) 'CHOCO)
                    (format t "Store CHOCO ~%")
                    (setf (nth 8 obj) (/ (nth 8 obj) 1000)) ;x surface pose
                    (setf (nth 9 obj) (/ (nth 9 obj) 1000)) ;y surface pose
                    (setf (nth 10 obj) (/ (nth 10 obj) 1000)) ;z surface pose
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 140)
                                (type CHOCO)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "CHOCO"))))

	          ((equal (first obj) 'SPECIAL)
                    (format t "Store SPECIAL ~%")
                    (setf (nth 8 obj) (/ (nth 8 obj) 1000)) ;x surface pose
                    (setf (nth 9 obj) (/ (nth 9 obj) 1000)) ;y surface pose
                    (setf (nth 10 obj) (/ (nth 10 obj) 1000)) ;z surface pose
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 140)
                                (type SPECIAL)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "SPECIAL"))))

                 ((equal (first obj) 'FROSTIES)
                    (format t "Store FROSTIES ~%")
                    (setf (nth 8 obj) (/ (nth 8 obj) 1000)) ;x surface pose
                    (setf (nth 9 obj) (/ (nth 9 obj) 1000)) ;y surface pose
                    (setf (nth 10 obj) (/ (nth 10 obj) 1000)) ;z surface pose
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 140)
                                (type FROSTIES)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "FROSTIES"))))

                  ((equal (first obj) 'CORN-FLAKES)
                    (format t "Store CORN-FLAKES ~%")
                    (setf (nth 8 obj) (/ (nth 8 obj) 1000)) ;x surface pose
                    (setf (nth 9 obj) (/ (nth 9 obj) 1000)) ;y surface pose
                    (setf (nth 10 obj) (/ (nth 10 obj) 1000)) ;z surface pose
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 140)
                                (type CORN-FLAKES)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "CORN-FLAKES"))))
		  ((equal (first obj) 'SMACKS)
                    (format t "Store SMACKS ~%")
                    (setf (nth 8 obj) (/ (nth 8 obj) 1000)) ;x surface pose
                    (setf (nth 9 obj) (/ (nth 9 obj) 1000)) ;y surface pose
                    (setf (nth 10 obj) (/ (nth 10 obj) 1000)) ;z surface pose
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 140)
                                (type SMACKS)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "SMACKS"))))
                  ((equal (first obj) 'REDBULL-250ML)
                    (format t "Store REDBULL-250ML ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 140)
                                (type REDBULL-250ML)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "red bull"))))
                  ((equal (first obj) 'REDBULL-60ML)
                    (format t "Store REDBULL-60ML ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId) 
                                (status GRASPABLE)
                                (capacity 0)
                                (contains 0)
                                (size-height 95)
                                (type REDBULL-60ML)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "red bull power shot"))))
                  ((equal (first obj) 'COCA-COLA-CAN-250ML)
                    (format t "Store COCA-COLA-CAN-250ML ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 115)
                                (type COCA-COLA-CAN-250ML)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "coke"))))
                  ((equal (first obj) 'PRINGLES-160G-SOURCREAMANDONION)
                    (format t "Store PRINGLES-160G-SOURCREAMANDONION ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 200)
                                (contains 0)
                                (size-height 0)
                                (type PRINGLES-160G-SOURCREAMANDONION)
                                (cleanup TRASH)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (fill-level ,(eighth obj)) 
                                (stacking-offset 0.21)
                                (stack-growing-offset 0)
                                (speech "prinles sour cream and onion"))))
                  ((equal (first obj) 'PRINGLES-160G-PAPRIKA)
                    (format t "Store PRINGLES-160G-PAPRIKA ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 200)
                                (contains 0)
                                (size-height 0)
                                (type PRINGLES-160G)
                                (cleanup TRASH)
                                (pose ,(second obj)(third obj)(fourth obj)(fifth obj)(sixth obj))
                                (stacking-offset 0.21)
                                (stack-growing-offset 0)
                                (speech "prinles paprika"))))
                  ((equal (first obj) 'PRINGLES-160G-HOTANDSPICY)
                    (format t "Store PRINGLES-160G-HOTANDSPICY ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 200)
                                (contains 0)
                                (size-height 0)
                                (type PRINGLES-160G-HOTANDSPICY)
                                (cleanup TRASH)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (fill-level ,(eighth obj)) 
                                (stacking-offset 0.21)
                                (stack-growing-offset 0)
                                (speech "prinles hot and spicy"))))
                 ; ((equal (first obj) 'PRINGLES-160G-HOTANDSPICY-FULL) ;; dennis aug/2012
                 ;   (format t "Store PRINGLES-160G-HOTANDSPICY-FULL ~%")
                 ;   (tcl-kb-update 
                 ;     :key '(is-a id) 
                 ;     :value `(
                 ;               (is-a OBJECT)
                 ;               (id ,id)
                 ;               (envid ,envId)
                 ;               (status GRASPABLE)
                 ;               (stacked-into nil)
                 ;               (capacity 200)
                 ;               (contains 0)
                 ;               (size-height 0)
                 ;               (type PRINGLES-160G)
                 ;               (cleanup TRASH)
                 ;               (pose ,(rest obj))
                 ;               (stacking-offset 0.21)
                 ;               (stack-growing-offset 0)
                 ;               (speech "prinles hot and spicy full with chips"))))
                  ((equal (first obj) 'SUN-SNACKS-120G)
                    (format t "Store SUN-SNACKS-120G ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 110)
                                (contains 0)
                                (size-height 0)
                                (type SUN-SNACKS-120G)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.14)
                                (stack-growing-offset 0)
                                (speech "potato sticks"))))
                  ((equal (first obj) 'IKEA-CUP-SOLBRAEND-BLUE)
                    (format t "Store IKEA-CUP-SOLBRAEND-BLUE ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 80)
                                (contains 0)
                                (size-height 20)
                                (type IKEA-CUP-SOLBRAEND)
                                (cleanup WASHABLE)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (fill-level ,(eighth obj)) 
                                (stacking-offset 0.09)
                                (stack-growing-offset 0.018)
                                (speech "blue cup"))))
                  ((equal (first obj) 'IKEA-CUP-SOLBRAEND-YELLOW)
                    (format t "Store IKEA-CUP-SOLBRAEND-YELLOW ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 80)
                                (contains 0)
                                (size-height 20)
                                (type IKEA-CUP-SOLBRAEND)
                                (cleanup WASHABLE)
                                (pose ,(rest obj))
                                (stacking-offset 0.09)
                                (stack-growing-offset 0.018)
                                (speech "yellow cup"))))
                  ((equal (first obj) 'KCLASSIC-H-VOLLMILCH)
                    (format t "Store KCLASSIC-H-VOLLMILCH ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type KCLASSIC-H-VOLLMILCH)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "k milk"))))
                  ((equal (first obj) 'FAIR-MILK)
                    (format t "Store FAIR-MILK ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type FAIR-MILK)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "fair milk"))))
                  ((equal (first obj) 'RIODORO-APPLEJUICE)
                    (format t "Store RIODORO-APPLEJUICE ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type RIODORO-APPLEJUICE)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "rio doro apple juice"))))
                  ((equal (first obj) 'RIOGRANDE-PINEAPPLE)
                    (format t "Store RIOGRANDE-PINEAPPLE ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type RIOGRANDE-PINEAPPLE)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "pineapple juice"))))
                  ((equal (first obj) 'RIOGRANDE-GRAPEFRUIT)
                    (format t "Store RIOGRANDE-GRAPEFRUIT ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type RIOGRANDE-GRAPEFRUIT)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "grapefuit juice"))))
                  ((equal (first obj) 'RIOGRANDE-APPLEJUICE)
                    (format t "Store RIOGRANDE-APPLEJUICE ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type RIOGRANDE-APPLEJUICE)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "apple juice"))))
                   ((equal (first obj) 'SWEET-KISS-TEA)
                    (format t "Store SWEET-KISS-TEA ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type SWEET-KISS-TEA)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "sweet kiss tea \\item=kiss"))))
                  ((equal (first obj) 'COFFEEMACHINE-DELONGHI-ESAM-3500)
                    (format t "Store COFFEEMACHINE-DELONGHI-ESAM-3500 ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type COFFEEMACHINE-DELONGHI-ESAM-3500)
                                (pose ,(rest obj))
                                (speech "coffee machine"))))
                  ((equal (first obj) 'KITCHEN-COUNTER)
                    (format t "Store KITCHEN-COUNTER ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type KITCHEN-COUNTER)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (speech "kitchen counter"))))
                  ((equal (first obj) 'SIDEBOARD-600)
                    (format t "Store SIDEBOARD-600 ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type SIDEBOARD-600)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (speech "sideboard"))))
                  ((equal (first obj) 'KITCHEN-DOOR-HANDLE-SILVER)
                    (format t "Store KITCHEN-DOOR-HANDLE-SILVER ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type KITCHEN-DOOR-HANDLE-SILVER)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (speech "door handle"))))
                  ((equal (first obj) 'SUGAR-DISPENSER)
                    (format t "Store SUGAR-DISPENSER ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type SUGAR-DISPENSER)
                                (pose ,(rest obj))
                                (ikea-cup-solbraend-offset ())
                                (speech "sugar dispenser"))))                   
                  ((equal (first obj) 'SUGAR-DISPENSER-SMALL)
                    (format t "Store SUGAR-DISPENSER-SMALL ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type SUGAR-DISPENSER-SMALL)
                                (pose ,(rest obj))
                                (ikea-cup-solbraend-offset ())
                                (speech "sugar dispenser"))))                   
                  (T
                    (format t "UNKNOWN OBJECT ~%")))))
            '(SUCCESS ()))))
