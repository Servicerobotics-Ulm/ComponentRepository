//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef _RACKDETECTIONTASK_HH
#define _RACKDETECTIONTASK_HH

#include "RackDetectionTaskCore.hh"

#include "utils/VisualizationHelper.hh"
#include "utils/PointManipulation.hh"

#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

class RackDetectionTask  : public RackDetectionTaskCore
{
public:
	RackDetectionTask(SmartACE::SmartComponent *comp);
	virtual ~RackDetectionTask();
	
	virtual int on_entry();
	virtual int on_execute();
	virtual int on_exit();

private:
	VisualizationHelper vHelper;
	PointManipulation _pointManipulator;

	std::string _model_file_path;
	std::string _model_file_save_path;
	bool _create_model;
	bool _send_obstacle_mesh;

	int _rgb_window_index;
	int _cloud_window_index;

	float _obj_height, _obj_width, _obj_depth;
	std::vector<std::string> _obj_types;

	float _max_detection_score;

	float _ptu_pan;

	enum Direction { front, left, right };
	Direction _pick_direction;

	pcl::PointCloud<pcl::PointXYZ>::Ptr loadRackModel(std::string filePath);
	void findPickDirection(pcl::PointCloud<pcl::PointXYZ>::Ptr env_cloud);
	void findPickDirection(mrpt::poses::CPose3D sensor_pose);
	Eigen::Matrix<float, 4, 4> doIcp(pcl::PointCloud<pcl::PointXYZ>::Ptr env_cloud, pcl::PointCloud<pcl::PointXYZ>::Ptr model_cloud);
	mrpt::poses::CPose3D getRackPoseFromTransfMat(Eigen::Matrix<float, 4, 4> transform_mat);
	pcl::PointCloud<pcl::PointXYZ>::Ptr distanceFilterCloud (pcl::PointCloud<pcl::PointXYZ>::Ptr cloud, float min_x, float max_x, float min_y, float max_y, float min_z, float max_z);
	pcl::PointCloud<pcl::PointXYZ>::Ptr downsampleCloud (pcl::PointCloud<pcl::PointXYZ>::Ptr cloud);
	void createRackModelCloud (pcl::PointCloud<pcl::PointXYZ>::Ptr cloud);
	void setGrippableObjects(mrpt::poses::CPose3D rackPose);
	void setGrippableObjectsEpmty();
	mrpt::poses::CPose3D calcObjectPose(mrpt::poses::CPose3D rackPose, int rackLaneNo);
	pcl::PointCloud<pcl::PointXYZ>::Ptr cutOutRack(pcl::PointCloud<pcl::PointXYZ>::Ptr env_cloud);
	pcl::PointCloud<pcl::PointXYZ>::Ptr cutOutObjects(pcl::PointCloud<pcl::PointXYZ>::Ptr env_cloud);
	void sendFinishedEvent();
	void setObstacleObject(pcl::PointCloud<pcl::PointXYZ>::Ptr obstacles_cloud);
	void errorQuit();
	void setEnvId();

	pcl::PointCloud<pcl::PointXYZ>::Ptr transformCloud(pcl::PointCloud<pcl::PointXYZ>::Ptr source_cloud);


};

#endif
