//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

// include wrapper header
#include "ObjectEventServerWrapper.hh"

// include component's main class
#include "ComponentRackDetection.hh"

// other extensin includes

ObjectEventServerWrapper::ObjectEventServerWrapper(Smart::IEventServerPattern<CommBasicObjects::CommVoid, CommObjectRecognitionObjects::CommObjectRecognitionEventResult, CommObjectRecognitionObjects::CommObjectRecognitionEventState> *objectEventServer) {
	this->objectEventServer = objectEventServer;
	update_status = Smart::SMART_NODATA;
}

ObjectEventServerWrapper::~ObjectEventServerWrapper() {
}


Smart::StatusCode ObjectEventServerWrapper::put(CommObjectRecognitionObjects::CommObjectRecognitionEventState &eventState) {
	std::unique_lock<std::mutex> lock(update_mutex);
	updateEventState = eventState;
	update_status = objectEventServer->put(eventState);
	return update_status;
}

Smart::StatusCode ObjectEventServerWrapper::getLatestUpdate(CommObjectRecognitionObjects::CommObjectRecognitionEventState &eventState) {
	std::unique_lock<std::mutex> lock(update_mutex);
	eventState = updateEventState;
	return update_status;
}
