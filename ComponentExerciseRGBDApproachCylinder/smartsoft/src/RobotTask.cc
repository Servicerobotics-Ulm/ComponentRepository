//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//------------------------------------------------------------------------
//
//  Copyright (C) 2021 Thomas Feldmeier
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#include <RobotTask.hh>
#include "ComponentExerciseRGBDApproachCylinder.hh"
#include <iostream>
#include "opencv2/opencv.hpp"

RobotTask::RobotTask(SmartACE::SmartComponent *comp) :
    RobotTaskCore(comp) {
    std::cout << "constructor RobotTask\n";
}
RobotTask::~RobotTask() {
    std::cout << "destructor RobotTask\n";
}

void RobotTask::on_RGBDImagePushServiceIn(const DomainVision::CommRGBDImage &input) {
}

int RobotTask::on_entry() {
    // do initialization procedures here, which are called once, each time the task is started
    // it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
    return 0;
}

int RobotTask::on_execute() {

    // create a RGB&Depth image communication object and read it from the input port
    DomainVision::CommRGBDImage images;
    Smart::StatusCode status = this->rGBDImagePushServiceInGetUpdate(images);
    if (status != Smart::SMART_OK) {
        std::cerr << "Getting images failed: " << status << std::endl;
        sleep(2);
        return 0;
    }
    DomainVision::CommVideoImage colorImage = images.getColor_image();
    DomainVision::CommDepthImage depthImage = images.getDepth_image();



    // convert CommVideoImage to OpenCV Mat
    cv::Mat rgb_mat(colorImage.get_height(), colorImage.get_width(), CV_8UC3, (void *)colorImage.get_data());
    cv::Mat bgr_mat;
    cv::cvtColor(rgb_mat, bgr_mat, cv::COLOR_RGB2BGR);

    // convert CommDepthImage to OpenCV Mat
    cv::Mat depth_mat;
    DomainVision::DepthFormatType depth_format = depthImage.getFormat();
    if (depth_format == DomainVision::DepthFormatType::UINT16) {
        cv::Mat int_mat(depthImage.getHeight(), depthImage.getWidth(), CV_16UC1, (void *)depthImage.get_distances_uint16());
        int_mat.convertTo(depth_mat, CV_32FC1, 0.001);
    } else if (depth_format == DomainVision::DepthFormatType::FLOAT) {
        cv::Mat float_mat(depthImage.getHeight(), depthImage.getWidth(), CV_32FC1, (void *)depthImage.get_distances_float());
        depth_mat = float_mat;
    }

    double vx = 0.0; // speed in x-axis direction (forward) [m/s]
    double v_rotate = 0.0; // turn speed (counterclockwise) [radians/s]

    //************************************************
    // use bgr_mat, depth_mat for processing.
    // calculate vx, v_rotate based on images using OpenCV 4 functions
    //************************************************
    // Start of your code



    // End of your code
    //******************************************************

    CommBasicObjects::CommNavigationVelocity comNavVel;
    comNavVel.set_vX(vx, 1); // meters per second
//    comNavVel.set_vY(0.0, 1); // meters per second
    comNavVel.set_omega(v_rotate);
    status = this->navigationVelocityServiceOutPut(comNavVel);
    if (status != Smart::SMART_OK) {
        std::cerr << "error navigationVelocityServiceOutPut " << status << std::endl;
        sleep(1);
    } else {
        std::cout << "Updating velocity " << comNavVel << std::endl;
    }
    return 0;
}

int RobotTask::on_exit() {
    // use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
    return 0;
}
