//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter settings
		 */
		class settingsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug_info;
		
		public:
			// default constructor
			settingsType() {
				debug_info = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug_info() const { return debug_info; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "settings(";
				os << "debug_info = " << debug_info << ", ";
				os << ")\n";
			}
			
		}; // end class settingsType
		
		/**
		 * Definition of Parameter hardware
		 */
		class hardwareType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string camera_type;
			bool debug_info;
			std::string device;
			std::string identifier;
		
		public:
			// default constructor
			hardwareType() {
				camera_type = "USB";
				debug_info = false;
				device = "/dev/video0";
				identifier = "HD Pro Webcam C920 (/dev/video0)";
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getCamera_type() const { return camera_type; }
			inline bool getDebug_info() const { return debug_info; }
			inline std::string getDevice() const { return device; }
			inline std::string getIdentifier() const { return identifier; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "hardware(";
				os << "camera_type = " << camera_type << ", ";
				os << "debug_info = " << debug_info << ", ";
				os << "device = " << device << ", ";
				os << "identifier = " << identifier << ", ";
				os << ")\n";
			}
			
		}; // end class hardwareType
		
		/**
		 * Definition of Parameter hardware_properties
		 */
		class hardware_propertiesType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double auto_exposure;
			bool autoflag_shutter;
			bool autoflag_white_balance_mode;
			double brightness;
			std::string format;
			double framerate;
			double gain;
			double gamma;
			unsigned int height;
			double hue;
			double saturation;
			double sharpness;
			double shutter;
			unsigned int trigger_mode;
			unsigned int trigger_polarity;
			double white_balance_mode;
			double white_balance_u;
			double white_balance_v;
			unsigned int width;
		
		public:
			// default constructor
			hardware_propertiesType() {
				auto_exposure = 100.0;
				autoflag_shutter = false;
				autoflag_white_balance_mode = true;
				brightness = 16.0;
				format = "YUV 4:2:2 (YUYV) ( YUYV )";
				framerate = 15;
				gain = 100;
				gamma = 128;
				height = 480;
				hue = 128;
				saturation = 128;
				sharpness = 3.0;
				shutter = 0.0143;
				trigger_mode = 0;
				trigger_polarity = 0;
				white_balance_mode = 3.0;
				white_balance_u = 2000.0;
				white_balance_v = 2000.0;
				width = 640;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAuto_exposure() const { return auto_exposure; }
			inline bool getAutoflag_shutter() const { return autoflag_shutter; }
			inline bool getAutoflag_white_balance_mode() const { return autoflag_white_balance_mode; }
			inline double getBrightness() const { return brightness; }
			inline std::string getFormat() const { return format; }
			inline double getFramerate() const { return framerate; }
			inline double getGain() const { return gain; }
			inline double getGamma() const { return gamma; }
			inline unsigned int getHeight() const { return height; }
			inline double getHue() const { return hue; }
			inline double getSaturation() const { return saturation; }
			inline double getSharpness() const { return sharpness; }
			inline double getShutter() const { return shutter; }
			inline unsigned int getTrigger_mode() const { return trigger_mode; }
			inline unsigned int getTrigger_polarity() const { return trigger_polarity; }
			inline double getWhite_balance_mode() const { return white_balance_mode; }
			inline double getWhite_balance_u() const { return white_balance_u; }
			inline double getWhite_balance_v() const { return white_balance_v; }
			inline unsigned int getWidth() const { return width; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "hardware_properties(";
				os << "auto_exposure = " << auto_exposure << ", ";
				os << "autoflag_shutter = " << autoflag_shutter << ", ";
				os << "autoflag_white_balance_mode = " << autoflag_white_balance_mode << ", ";
				os << "brightness = " << brightness << ", ";
				os << "format = " << format << ", ";
				os << "framerate = " << framerate << ", ";
				os << "gain = " << gain << ", ";
				os << "gamma = " << gamma << ", ";
				os << "height = " << height << ", ";
				os << "hue = " << hue << ", ";
				os << "saturation = " << saturation << ", ";
				os << "sharpness = " << sharpness << ", ";
				os << "shutter = " << shutter << ", ";
				os << "trigger_mode = " << trigger_mode << ", ";
				os << "trigger_polarity = " << trigger_polarity << ", ";
				os << "white_balance_mode = " << white_balance_mode << ", ";
				os << "white_balance_u = " << white_balance_u << ", ";
				os << "white_balance_v = " << white_balance_v << ", ";
				os << "width = " << width << ", ";
				os << ")\n";
			}
			
		}; // end class hardware_propertiesType
		
		/**
		 * Definition of Parameter push_newest
		 */
		class push_newestType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug_info;
		
		public:
			// default constructor
			push_newestType() {
				debug_info = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug_info() const { return debug_info; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "push_newest(";
				os << "debug_info = " << debug_info << ", ";
				os << ")\n";
			}
			
		}; // end class push_newestType
		
		/**
		 * Definition of Parameter push_timed
		 */
		class push_timedType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug_info;
		
		public:
			// default constructor
			push_timedType() {
				debug_info = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug_info() const { return debug_info; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "push_timed(";
				os << "debug_info = " << debug_info << ", ";
				os << ")\n";
			}
			
		}; // end class push_timedType
		
		/**
		 * Definition of Parameter sensor_pose
		 */
		class sensor_poseType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double azimuth;
			double elevation;
			double roll;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			sensor_poseType() {
				azimuth = 1.5707963;
				elevation = 3.14159265;
				roll = 1.5707963;
				x = 68;
				y = 0;
				z = 148;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAzimuth() const { return azimuth; }
			inline double getElevation() const { return elevation; }
			inline double getRoll() const { return roll; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "sensor_pose(";
				os << "azimuth = " << azimuth << ", ";
				os << "elevation = " << elevation << ", ";
				os << "roll = " << roll << ", ";
				os << "x = " << x << ", ";
				os << "y = " << y << ", ";
				os << "z = " << z << ", ";
				os << ")\n";
			}
			
		}; // end class sensor_poseType
		
		/**
		 * Definition of Parameter base
		 */
		class baseType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double azimuth;
			double elevation;
			bool on_base;
			bool on_ptu;
			double roll;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			baseType() {
				azimuth = 0;
				elevation = 0;
				on_base = false;
				on_ptu = false;
				roll = 0;
				x = 0;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAzimuth() const { return azimuth; }
			inline double getElevation() const { return elevation; }
			inline bool getOn_base() const { return on_base; }
			inline bool getOn_ptu() const { return on_ptu; }
			inline double getRoll() const { return roll; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "base(";
				os << "azimuth = " << azimuth << ", ";
				os << "elevation = " << elevation << ", ";
				os << "on_base = " << on_base << ", ";
				os << "on_ptu = " << on_ptu << ", ";
				os << "roll = " << roll << ", ";
				os << "x = " << x << ", ";
				os << "y = " << y << ", ";
				os << "z = " << z << ", ";
				os << ")\n";
			}
			
		}; // end class baseType
		
		/**
		 * Definition of Parameter Image
		 */
		class ImageType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug_info;
			std::string smart_format;
			float valid_time_in_sec;
		
		public:
			// default constructor
			ImageType() {
				debug_info = false;
				smart_format = "yuv422";
				valid_time_in_sec = 1.0;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug_info() const { return debug_info; }
			inline std::string getSmart_format() const { return smart_format; }
			inline float getValid_time_in_sec() const { return valid_time_in_sec; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Image(";
				os << "debug_info = " << debug_info << ", ";
				os << "smart_format = " << smart_format << ", ";
				os << "valid_time_in_sec = " << valid_time_in_sec << ", ";
				os << ")\n";
			}
			
		}; // end class ImageType
		
		/**
		 * Definition of Parameter IntrinsicParams
		 */
		class IntrinsicParamsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			unsigned short calib_height;
			unsigned short calib_width;
			double cx;
			double cy;
			std::list<double> distortion_coeffs;
			double fx;
			double fy;
		
		public:
			// default constructor
			IntrinsicParamsType() {
				calib_height = 480;
				calib_width = 640;
				cx = 326.70589;
				cy = 252.38709;
				distortion_coeffs.push_back(0.1241826);
				distortion_coeffs.push_back(-0.275755);
				distortion_coeffs.push_back(-6.637106E-4);
				distortion_coeffs.push_back(-0.003005441);
				distortion_coeffs.push_back(0.1270525);
				fx = 613.80156;
				fy = 617.75798;
			}
		
			/**
			 * here are the public getters
			 */
			inline unsigned short getCalib_height() const { return calib_height; }
			inline unsigned short getCalib_width() const { return calib_width; }
			inline double getCx() const { return cx; }
			inline double getCy() const { return cy; }
			inline std::list<double> getDistortion_coeffs() const { return distortion_coeffs; }
			inline double getFx() const { return fx; }
			inline double getFy() const { return fy; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "IntrinsicParams(";
				os << "calib_height = " << calib_height << ", ";
				os << "calib_width = " << calib_width << ", ";
				os << "cx = " << cx << ", ";
				os << "cy = " << cy << ", ";
				std::list<double>::const_iterator distortion_coeffsIt;
				for(distortion_coeffsIt=distortion_coeffs.begin(); distortion_coeffsIt!=distortion_coeffs.end(); distortion_coeffsIt++)
				{
				os << "distortion_coeffs = " << *distortion_coeffsIt << ", ";
				os << "distortion_coeffs = " << *distortion_coeffsIt << ", ";
				os << "distortion_coeffs = " << *distortion_coeffsIt << ", ";
				os << "distortion_coeffs = " << *distortion_coeffsIt << ", ";
				os << "distortion_coeffs = " << *distortion_coeffsIt << ", ";
				}
				os << "fx = " << fx << ", ";
				os << "fy = " << fy << ", ";
				os << ")\n";
			}
			
		}; // end class IntrinsicParamsType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	ImageType Image;
	IntrinsicParamsType IntrinsicParams;
	baseType base;
	hardwareType hardware;
	hardware_propertiesType hardware_properties;
	push_newestType push_newest;
	push_timedType push_timed;
	sensor_poseType sensor_pose;
	settingsType settings;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	ImageType getImage() const {
		return Image;
	}
	IntrinsicParamsType getIntrinsicParams() const {
		return IntrinsicParams;
	}
	baseType getBase() const {
		return base;
	}
	hardwareType getHardware() const {
		return hardware;
	}
	hardware_propertiesType getHardware_properties() const {
		return hardware_properties;
	}
	push_newestType getPush_newest() const {
		return push_newest;
	}
	push_timedType getPush_timed() const {
		return push_timed;
	}
	sensor_poseType getSensor_pose() const {
		return sensor_pose;
	}
	settingsType getSettings() const {
		return settings;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		Image.to_ostream(os);
		IntrinsicParams.to_ostream(os);
		base.to_ostream(os);
		hardware.to_ostream(os);
		hardware_properties.to_ostream(os);
		push_newest.to_ostream(os);
		push_timed.to_ostream(os);
		sensor_pose.to_ostream(os);
		settings.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
};

#endif
