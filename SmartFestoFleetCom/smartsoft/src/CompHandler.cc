//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "CompHandler.hh"
#include "SmartFestoFleetCom.hh"

#include <iostream>

// include communication objects
#include <CommBasicObjects/CommKBRequest.hh>
#include <CommBasicObjects/CommKBResponse.hh>
#include <CommBasicObjects/CommLaserSafetyEventParam.hh>
#include <CommBasicObjects/CommLaserSafetyEventState.hh>
#include <CommBasicObjects/CommLaserSafetyField.hh>
#include <CommBasicObjects/CommTaskEventState.hh>
#include <CommBasicObjects/CommTaskMessage.hh>


void CompHandler::onStartup() 
{
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	Smart::StatusCode status;

	//INIT the connection to the fleet manager!
	COMP->com.initConnection(false);

	COMP->statusDataLock.acquire();
		COMP->statusData = "\"NoJob\"";
		COMP->jobProgress = "0";
	COMP->statusDataLock.release();



	status =  COMP->connectTaskResultIn( COMP->connections.taskResultIn.serverName,  COMP->connections.taskResultIn.serviceName);
	status = COMP->connectKbQueryClient(COMP->connections.kbQueryClient.serverName, COMP->connections.kbQueryClient.serviceName);




	// Start all services. If you need manual control, use the content of this function to
	// connect and start each service individually, e.g:
	// COMP->connectMyPortName("SmartExampleComponent", "examplePort");
	//status = COMP->connectAndStartAllServices();
	
	// Start all tasks. If you need manual control, use the content of this function to
	// start each task individually.
//	COMP->startAllTasks();

	if(COMP->getGlobalState().getSettings().getPushCyclicSystemState()){
		// start task StatusSerialTask
		COMP->statusSerialTask->start();
	}
	COMP->readCommandTask->start();
	COMP->commandResultTask->start();
	
	// Start all timers. If you need manual control, use the content of this function to
	// start each timer individually.
	COMP->startAllTimers();
	
	// Notify the component that setup/initialization is finished.
	// You may move this function to any other place.
	COMP->setStartupFinished(); 
}

void CompHandler::onShutdown() 
{
	std::cout << "shutdown - put your cleanup code in CompHandler::onShutdown()!!!\n";
	
}
