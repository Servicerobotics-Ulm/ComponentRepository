//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2013 Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------

#ifndef _READCOMMANDTASK_HH
#define _READCOMMANDTASK_HH

#include "ReadCommandTaskCore.hh"

class ReadCommandTask  : public ReadCommandTaskCore
{
public:
	ReadCommandTask(SmartACE::SmartComponent *comp);
	virtual ~ReadCommandTask();
	
	virtual int on_entry();
	virtual int on_execute();
	virtual int on_exit();
	void getLaserState(std::string robotname, std::stringstream& statusMessage);
	void getRobotBoxLoaded(std::string robotname, std::stringstream& statusMessage);
	void getRobotState(std::string robotname, std::stringstream& statusMessage);
	void getRobotStateAndIP(std::string robotname, std::stringstream& statusMessage);

private:
	void removeMessagesWithNonePrintChars(std::deque <std::string> &result);
	std::string parseMsgToLisp(std::string message);
	std::string splitIntoLines(std::deque <std::string> &result, std::stringstream &ss);
	int separateQueryPlan(std::deque <std::string> &in, std::deque <std::string> &plan, std::deque <std::string> &query);
	void getBaseState(std::string robotname, std::stringstream& statusMessage);
	void getRobotFleetType(std::string robotname, std::stringstream& statusMessage);
	void getAllBasePoses(std::stringstream& statusMessage);
	std::string messageRest;
};

#endif
