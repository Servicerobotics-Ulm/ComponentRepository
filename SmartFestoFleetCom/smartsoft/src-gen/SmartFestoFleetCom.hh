//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _SMARTFESTOFLEETCOM_HH
#define _SMARTFESTOFLEETCOM_HH

#include <map>
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "SmartFestoFleetComCore.hh"

#include "SmartFestoFleetComPortFactoryInterface.hh"
#include "SmartFestoFleetComExtension.hh"

// forward declarations
class SmartFestoFleetComPortFactoryInterface;
class SmartFestoFleetComExtension;

// includes for PlainOpcUaSmartFestoFleetComExtension
// include plain OPC UA device clients
// include plain OPC UA status servers


// include communication objects
#include <CommBasicObjects/CommKBRequest.hh>
#include <CommBasicObjects/CommKBRequestACE.hh>
#include <CommBasicObjects/CommKBResponse.hh>
#include <CommBasicObjects/CommKBResponseACE.hh>
#include <CommBasicObjects/CommLaserSafetyEventParam.hh>
#include <CommBasicObjects/CommLaserSafetyEventParamACE.hh>
#include <CommBasicObjects/CommLaserSafetyEventState.hh>
#include <CommBasicObjects/CommLaserSafetyEventStateACE.hh>
#include <CommBasicObjects/CommLaserSafetyField.hh>
#include <CommBasicObjects/CommLaserSafetyFieldACE.hh>
#include <CommBasicObjects/CommTaskEventState.hh>
#include <CommBasicObjects/CommTaskEventStateACE.hh>
#include <CommBasicObjects/CommTaskMessage.hh>
#include <CommBasicObjects/CommTaskMessageACE.hh>

// include tasks
#include "CommandResultTask.hh"
#include "ReadCommandTask.hh"
#include "StatusSerialTask.hh"
// include UpcallManagers and InputCollectors
#include "LaserSafetyEventServiceInUpcallManager.hh"
#include "LaserSafetyEventServiceInInputCollector.hh"
#include "TaskResultInUpcallManager.hh"
#include "TaskResultInInputCollector.hh"

// include input-handler(s)
// include request-handler(s)
// output port wrappers
#include "TaskEventOutWrapper.hh"

// include handler
#include "CompHandler.hh"

#include "ParameterStateStruct.hh"
#include "ParameterUpdateHandler.hh"

#include "SmartStateChangeHandler.hh"
#include "StateActivityManager.hh"


#define COMP SmartFestoFleetCom::instance()

class SmartFestoFleetCom : public SmartFestoFleetComCore {
private:
	static SmartFestoFleetCom *_smartFestoFleetCom;
	
	// constructor
	SmartFestoFleetCom();
	
	// copy-constructor
	SmartFestoFleetCom(const SmartFestoFleetCom& cc);
	
	// destructor
	~SmartFestoFleetCom() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	// helper method that maps a string-name to an according TaskTriggerSubject
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
	// internal map storing the different port-creation factories (that internally map to specific middleware implementations)
	std::map<std::string, SmartFestoFleetComPortFactoryInterface*> portFactoryRegistry;
	
	// internal map storing various extensions of this component class
	std::map<std::string, SmartFestoFleetComExtension*> componentExtensionRegistry;
	
public:
	ParameterStateStruct getGlobalState() const
	{
		return paramHandler.getGlobalState();
	}
	
	ParameterStateStruct getParameters() const
	{
		return paramHandler.getGlobalState();
	}
	
	// define tasks
	Smart::TaskTriggerSubject* commandResultTaskTrigger;
	CommandResultTask *commandResultTask;
	Smart::TaskTriggerSubject* readCommandTaskTrigger;
	ReadCommandTask *readCommandTask;
	Smart::TaskTriggerSubject* statusSerialTaskTrigger;
	StatusSerialTask *statusSerialTask;
	
	// define input-ports
	// InputPort LaserSafetyEventServiceIn
	Smart::IEventClientPattern<CommBasicObjects::CommLaserSafetyEventParam, CommBasicObjects::CommLaserSafetyField> *laserSafetyEventServiceIn;
	Smart::InputTaskTrigger<Smart::EventInputType<CommBasicObjects::CommLaserSafetyField>> *laserSafetyEventServiceInInputTaskTrigger;
	LaserSafetyEventServiceInUpcallManager *laserSafetyEventServiceInUpcallManager;
	LaserSafetyEventServiceInInputCollector *laserSafetyEventServiceInInputCollector;
	// InputPort TaskResultIn
	Smart::IPushClientPattern<CommBasicObjects::CommTaskMessage> *taskResultIn;
	Smart::InputTaskTrigger<CommBasicObjects::CommTaskMessage> *taskResultInInputTaskTrigger;
	TaskResultInUpcallManager *taskResultInUpcallManager;
	TaskResultInInputCollector *taskResultInInputCollector;
	
	// define request-ports
	Smart::IQueryClientPattern<CommBasicObjects::CommKBRequest, CommBasicObjects::CommKBResponse> *kbQueryClient;
	
	// define input-handler
	
	// define output-ports
	Smart::IEventServerPattern<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskEventState> *taskEventOut;
	TaskEventOutWrapper *taskEventOutWrapper;
	std::shared_ptr<Smart::IEventTestHandler<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskEventState>> taskEventOutEventTestHandler;
	
	// define answer-ports
	
	// define request-handlers
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	StateActivityManager *stateActivityManager;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	ParamUpdateHandler paramHandler;
	SmartACE::ParameterSlave *param;
	
	
	/// this method is used to register different PortFactory classes (one for each supported middleware framework)
	void addPortFactory(const std::string &name, SmartFestoFleetComPortFactoryInterface *portFactory);
	
	SmartACE::SmartComponent* getComponentImpl();
	
	/// this method is used to register different component-extension classes
	void addExtension(SmartFestoFleetComExtension *extension);
	
	/// this method allows to access the registered component-extensions (automatically converting to the actuall implementation type)
	template <typename T>
	T* getExtension(const std::string &name) {
		auto it = componentExtensionRegistry.find(name);
		if(it != componentExtensionRegistry.end()) {
			return dynamic_cast<T*>(it->second);
		}
		return 0;
	}
	
	/// initialize component's internal members
	void init(int argc, char *argv[]);
	
	/// execute the component's infrastructure
	void run();
	
	/// clean-up component's resources
	void fini();
	
	/// call this method to set the overall component into the Alive state (i.e. component is then ready to operate)
	void setStartupFinished();
	
	/// connect all component's client ports
	Smart::StatusCode connectAndStartAllServices();
	
	/// start all assocuated Activities
	void startAllTasks();
	
	/// start all associated timers
	void startAllTimers();
	
	Smart::StatusCode connectLaserSafetyEventServiceIn(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectTaskResultIn(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectKbQueryClient(const std::string &serverName, const std::string &serviceName);

	// return singleton instance
	static SmartFestoFleetCom* instance()
	{
		if(_smartFestoFleetCom == 0) {
			_smartFestoFleetCom = new SmartFestoFleetCom();
		}
		return _smartFestoFleetCom;
	}
	
	static void deleteInstance() {
		if(_smartFestoFleetCom != 0) {
			delete _smartFestoFleetCom;
		}
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct CommandResultTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} commandResultTask;
		struct ReadCommandTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} readCommandTask;
		struct StatusSerialTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} statusSerialTask;
		
		//--- upcall parameter ---
		
		//--- server port parameter ---
		struct TaskEventOut_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} taskEventOut;
	
		//--- client port parameter ---
		struct LaserSafetyEventServiceIn_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} laserSafetyEventServiceIn;
		struct TaskResultIn_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} taskResultIn;
		struct KbQueryClient_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} kbQueryClient;
		
	} connections;
};
#endif
