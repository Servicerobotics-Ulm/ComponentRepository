//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "SmartFestoFleetCom.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	if(request.getParameterDataMode() == SmartACE::ParameterDataMode::NAME){
		answer = handleParametersNamed(request);
	} else {
		answer = handleParametersSequence(request);
	}
	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersNamed(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "DOMAINROBOTFLEET.FLEETMANAGERPARAMETER.ADDROBOT")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_robotName = "";
		if(request.getString("robotName", temp_robotName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: robotName request: "<<request<<std::endl;
		}
		std::string temp_baseComponentName = "";
		if(request.getString("baseComponentName", temp_baseComponentName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: baseComponentName request: "<<request<<std::endl;
		}
		std::string temp_baseServiceName = "";
		if(request.getString("baseServiceName", temp_baseServiceName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: baseServiceName request: "<<request<<std::endl;
		}
		std::string temp_baseriOQueryServerName = "";
		if(request.getString("baseriOQueryServerName", temp_baseriOQueryServerName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: baseriOQueryServerName request: "<<request<<std::endl;
		}
		std::string temp_laserComponentName = "";
		if(request.getString("laserComponentName", temp_laserComponentName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: laserComponentName request: "<<request<<std::endl;
		}
		std::string temp_laserServiceName = "";
		if(request.getString("laserServiceName", temp_laserServiceName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: laserServiceName request: "<<request<<std::endl;
		}
		std::string temp_pathNavClientComponentName = "";
		if(request.getString("pathNavClientComponentName", temp_pathNavClientComponentName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: pathNavClientComponentName request: "<<request<<std::endl;
		}
		std::string temp_pathNavClientServiceName = "";
		if(request.getString("pathNavClientServiceName", temp_pathNavClientServiceName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: pathNavClientServiceName request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleDomainRobotFleet_FleetManagerParameter_ADDROBOTCore(
			temp_robotName, 
			temp_baseComponentName, 
			temp_baseServiceName, 
			temp_baseriOQueryServerName, 
			temp_laserComponentName, 
			temp_laserServiceName, 
			temp_pathNavClientComponentName, 
			temp_pathNavClientServiceName
			);
		}
	}
	else if (tag == "DOMAINROBOTFLEET.FLEETMANAGERPARAMETER.RMROBOT")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_robotName = "";
		if(request.getString("robotName", temp_robotName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: robotName request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleDomainRobotFleet_FleetManagerParameter_RMROBOTCore(
			temp_robotName
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersSequence(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "DOMAINROBOTFLEET.FLEETMANAGERPARAMETER.ADDROBOT")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_robotName = "";
		if(request.getString("1", temp_robotName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: robotName request: "<<request<<std::endl;
		}
		std::string temp_baseComponentName = "";
		if(request.getString("2", temp_baseComponentName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: baseComponentName request: "<<request<<std::endl;
		}
		std::string temp_baseServiceName = "";
		if(request.getString("3", temp_baseServiceName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: baseServiceName request: "<<request<<std::endl;
		}
		std::string temp_baseriOQueryServerName = "";
		if(request.getString("4", temp_baseriOQueryServerName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: baseriOQueryServerName request: "<<request<<std::endl;
		}
		std::string temp_laserComponentName = "";
		if(request.getString("5", temp_laserComponentName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: laserComponentName request: "<<request<<std::endl;
		}
		std::string temp_laserServiceName = "";
		if(request.getString("6", temp_laserServiceName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: laserServiceName request: "<<request<<std::endl;
		}
		std::string temp_pathNavClientComponentName = "";
		if(request.getString("7", temp_pathNavClientComponentName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: pathNavClientComponentName request: "<<request<<std::endl;
		}
		std::string temp_pathNavClientServiceName = "";
		if(request.getString("8", temp_pathNavClientServiceName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: pathNavClientServiceName request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleDomainRobotFleet_FleetManagerParameter_ADDROBOTCore(
			temp_robotName, 
			temp_baseComponentName, 
			temp_baseServiceName, 
			temp_baseriOQueryServerName, 
			temp_laserComponentName, 
			temp_laserServiceName, 
			temp_pathNavClientComponentName, 
			temp_pathNavClientServiceName
			);
		}
	}
	else if (tag == "DOMAINROBOTFLEET.FLEETMANAGERPARAMETER.RMROBOT")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_robotName = "";
		if(request.getString("1", temp_robotName) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: robotName request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleDomainRobotFleet_FleetManagerParameter_RMROBOTCore(
			temp_robotName
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter RobotinoIO
		if(parameter.getInteger("RobotinoIO", "conveyerBelt_BoxPresentDIn", commitState.RobotinoIO.conveyerBelt_BoxPresentDIn))
		{
			globalState.RobotinoIO.conveyerBelt_BoxPresentDIn = commitState.RobotinoIO.conveyerBelt_BoxPresentDIn;
		}
		if(parameter.getInteger("RobotinoIO", "laser_SafteyFieldDIn", commitState.RobotinoIO.laser_SafteyFieldDIn))
		{
			globalState.RobotinoIO.laser_SafteyFieldDIn = commitState.RobotinoIO.laser_SafteyFieldDIn;
		}
		if(parameter.getInteger("RobotinoIO", "laser_WarningFieldDIn", commitState.RobotinoIO.laser_WarningFieldDIn))
		{
			globalState.RobotinoIO.laser_WarningFieldDIn = commitState.RobotinoIO.laser_WarningFieldDIn;
		}
		// parameter Settings
		if(parameter.getInteger("Settings", "basePortsSubcriptionInterval", commitState.Settings.basePortsSubcriptionInterval))
		{
			globalState.Settings.basePortsSubcriptionInterval = commitState.Settings.basePortsSubcriptionInterval;
		}
		if(parameter.getString("Settings", "ip", commitState.Settings.ip))
		{
			globalState.Settings.ip = commitState.Settings.ip;
		}
		if(parameter.getString("Settings", "port", commitState.Settings.port))
		{
			globalState.Settings.port = commitState.Settings.port;
		}
		if(parameter.getBoolean("Settings", "pushCyclicSystemState", commitState.Settings.pushCyclicSystemState))
		{
			globalState.Settings.pushCyclicSystemState = commitState.Settings.pushCyclicSystemState;
		}
		if(parameter.getString("Settings", "robotname", commitState.Settings.robotname))
		{
			globalState.Settings.robotname = commitState.Settings.robotname;
		}
		if(parameter.getInteger("Settings", "socket_timeout_s", commitState.Settings.socket_timeout_s))
		{
			globalState.Settings.socket_timeout_s = commitState.Settings.socket_timeout_s;
		}
		if(parameter.getBoolean("Settings", "use_socket_timeout", commitState.Settings.use_socket_timeout))
		{
			globalState.Settings.use_socket_timeout = commitState.Settings.use_socket_timeout;
		}
		if(parameter.getBoolean("Settings", "verbose", commitState.Settings.verbose))
		{
			globalState.Settings.verbose = commitState.Settings.verbose;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
