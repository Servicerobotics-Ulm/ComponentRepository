//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter Laser
		 */
		class LaserType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double azimuth;
			int baudrate;
			std::string device;
			int length_unit;
			int resolution;
			std::string sick_type;
			bool verbose;
			double x;
			double y;
			double z;
		
		public:
			// default constructor
			LaserType() {
				azimuth = 0.0;
				baudrate = 500000;
				device = "/dev/sick";
				length_unit = 1;
				resolution = 50;
				sick_type = "LMS";
				verbose = false;
				x = 70.0;
				y = 0.0;
				z = 0.0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAzimuth() const { return azimuth; }
			inline int getBaudrate() const { return baudrate; }
			inline std::string getDevice() const { return device; }
			inline int getLength_unit() const { return length_unit; }
			inline int getResolution() const { return resolution; }
			inline std::string getSick_type() const { return sick_type; }
			inline bool getVerbose() const { return verbose; }
			inline double getX() const { return x; }
			inline double getY() const { return y; }
			inline double getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Laser(";
				os << "azimuth = " << azimuth << ", ";
				os << "baudrate = " << baudrate << ", ";
				os << "device = " << device << ", ";
				os << "length_unit = " << length_unit << ", ";
				os << "resolution = " << resolution << ", ";
				os << "sick_type = " << sick_type << ", ";
				os << "verbose = " << verbose << ", ";
				os << "x = " << x << ", ";
				os << "y = " << y << ", ";
				os << "z = " << z << ", ";
				os << ")\n";
			}
			
		}; // end class LaserType
		
		/**
		 * Definition of Parameter Base
		 */
		class BaseType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double base_a;
			bool subscribe;
			double x;
			double y;
			double z;
		
		public:
			// default constructor
			BaseType() {
				base_a = 0.0;
				subscribe = true;
				x = 0.0;
				y = 0.0;
				z = 0.0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getBase_a() const { return base_a; }
			inline bool getSubscribe() const { return subscribe; }
			inline double getX() const { return x; }
			inline double getY() const { return y; }
			inline double getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Base(";
				os << "base_a = " << base_a << ", ";
				os << "subscribe = " << subscribe << ", ";
				os << "x = " << x << ", ";
				os << "y = " << y << ", ";
				os << "z = " << z << ", ";
				os << ")\n";
			}
			
		}; // end class BaseType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	BaseType Base;
	LaserType Laser;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	BaseType getBase() const {
		return Base;
	}
	LaserType getLaser() const {
		return Laser;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		Base.to_ostream(os);
		Laser.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["Base"] = nlohmann::json {
			{"base_a" , getBase().getBase_a()},
			{"subscribe" , getBase().getSubscribe()},
			{"x" , getBase().getX()},
			{"y" , getBase().getY()},
			{"z" , getBase().getZ()}
		};
		param["Laser"] = nlohmann::json {
			{"azimuth" , getLaser().getAzimuth()},
			{"baudrate" , getLaser().getBaudrate()},
			{"device" , getLaser().getDevice()},
			{"length_unit" , getLaser().getLength_unit()},
			{"resolution" , getLaser().getResolution()},
			{"sick_type" , getLaser().getSick_type()},
			{"verbose" , getLaser().getVerbose()},
			{"x" , getLaser().getX()},
			{"y" , getLaser().getY()},
			{"z" , getLaser().getZ()}
		};
	
		
		return param.dump();
	}
};

#endif
