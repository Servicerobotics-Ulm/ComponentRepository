//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "MarkerListTask.hh"
#include "ComponentVisualization.hh"

#include <iostream>

MarkerListTask::MarkerListTask(SmartACE::SmartComponent *comp) 
:	MarkerListTaskCore(comp)
{
	std::cout << "constructor MarkerListTask\n";
}
MarkerListTask::~MarkerListTask() 
{
	std::cout << "destructor MarkerListTask\n";
}



int MarkerListTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	mlv = new MarkerListVisualization(COMP->getWindow3d(), "mlv");
	COMP->markerListDetectionServiceIn->subscribe(COMP->connections.markerListDetectionServiceIn.interval);

	return (mlv !=0)? 0 : 1;
}
int MarkerListTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	CommTrackingObjects::CommDetectedMarkerList marker_list;
	Smart::StatusCode status = COMP->markerListDetectionServiceIn->getUpdateWait(marker_list);
	if (status == Smart::SMART_OK) {
		mlv->displayMarkerList(marker_list);
	} else {
		if(COMP->getGlobalState().getSettings().getVerbose() == true){
			std::cout<<"Error getting CommDetectedMarkerList : "<<Smart::StatusCodeConversion(status)<<std::endl;
		}
		mlv->clear();
	}
	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int MarkerListTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	delete mlv;
	COMP->markerListDetectionServiceIn->unsubscribe();
	return 0;
}

int MarkerListTask::connectServices()
{
	std::cout << "connecting to: "
			  << COMP->connections.markerListDetectionServiceIn.serverName << "; "
			  << COMP->connections.markerListDetectionServiceIn.serviceName << std::endl;

	Smart::StatusCode status = COMP->markerListDetectionServiceIn->connect(COMP->connections.markerListDetectionServiceIn.serverName,
			                                                               COMP->connections.markerListDetectionServiceIn.serviceName);
	while (status != Smart::SMART_OK) {
		usleep(500000);
		status = COMP->markerListDetectionServiceIn->connect(COMP->connections.markerListDetectionServiceIn.serverName,
				                                             COMP->connections.markerListDetectionServiceIn.serviceName);	}
	std::cout << COMP->connections.markerListDetectionServiceIn.serverName << "; "
			  << COMP->connections.markerListDetectionServiceIn.serviceName << " connected.\n";
	return 0;

}

int MarkerListTask::disconnectServices()
{
	COMP->markerListDetectionServiceIn->disconnect();
	return 0;
}
