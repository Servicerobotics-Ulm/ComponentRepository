//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "LtmMapTask.hh"
#include "ComponentVisualization.hh"

#include <iostream>

using namespace std::chrono_literals;
LtmMapTask::LtmMapTask(SmartACE::SmartComponent *comp) 
:	LtmMapTaskCore(comp)
{
	std::cout << "constructor LtmMapTask\n";
}
LtmMapTask::~LtmMapTask() 
{
	std::cout << "destructor LtmMapTask\n";
}

int LtmMapTask::connectServices(){
	std::cout << "connecting to: " << COMP->connections.ltmQueryClient.serverName << "; " << COMP->connections.ltmQueryClient.serviceName << std::endl;
	Smart::StatusCode status = COMP->ltmQueryClient->connect(COMP->connections.ltmQueryClient.serverName, COMP->connections.ltmQueryClient.serviceName);
	while (status != Smart::SMART_OK) {
		usleep(500000);
		status = COMP->curPushClient->connect(COMP->connections.ltmQueryClient.serverName, COMP->connections.ltmQueryClient.serviceName);
	}
	std::cout << COMP->connections.ltmQueryClient.serverName << "; " << COMP->connections.ltmQueryClient.serviceName << " connected.\n";
	return 0;
}


int LtmMapTask::disconnectServices(){
	COMP->ltmQueryClient->disconnect();
	return 0;
}

int LtmMapTask::on_entry()
{
	GridMapVisualization::VizConfig config;
	config.identifier = "LTMMap";
	config.mapType = GridMapVisualization::MapType::LTM_MAP;
	config.activateTransparency = false;
	config.showAxis = false;

	gridMap = new GridMapVisualization(COMP->getWindow3d(), config);
	mapRequest.set_parameter(0, 0, 0, 10000, 10000, true, 30);

	return (gridMap !=0)?0:1;
}
int LtmMapTask::on_execute()
{
	Smart::StatusCode status = COMP->ltmQueryClient->query(mapRequest, map);
	if (status == Smart::SMART_OK) {
		gridMap->displayGridMap(map);
	} else {
		gridMap->clear();
	}

	return 0;
}
int LtmMapTask::on_exit()
{
	delete gridMap;
	return 0;
}
