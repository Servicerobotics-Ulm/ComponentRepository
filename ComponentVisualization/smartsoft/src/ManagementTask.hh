//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef _MANAGEMENTTASK_HH
#define _MANAGEMENTTASK_HH
#include <memory>
#include "ManagementTaskCore.hh"
#include "visualization/DefaultVisualization.hh"

enum service_ports {
	port_base_push_timed = 0,
	port_grid_push_newest = 1,
	port_laser1_push_newest = 2,
	port_laser2_push_newest = 3,
	port_laser3_push_newest = 4,
	port_person_detection_query = 5,
	port_uSAr_push_newest = 6,
	port_iRTask_push_newest = 7,
	port_ltm_query = 8,
	port_video_image_push_newest = 9,
	port_rgbd_image_push_newest = 10,
	port_depth_image_client=11,
	port_marker_detection_list_client=12,
	port_max};

enum port_types{
	port_push_type =0,
	port_query_type,
	port_type_max
};

class ManagementTask  : public ManagementTaskCore
{
private:
	std::unique_ptr<DefaultVisualization> default_visualization;
	std::map<std::string, std::list<SmartACE::NSKeyType> > components;
	std::map<int, std::pair<std::string, std::string> > con;
	service_ports service_port;
	int connected[port_max];
	const std::string display_names[service_ports::port_max] = {
			"BasePose_push_client",
			"GridMap_push_client",
			"Laser1_push_client",
			"Laser2_push_client",
			"Laser3_push_client",
			"PersonDetection_query_client",
			"UltraSonic_push_client",
			"Infrared_push_client",
			"LTM_query_client",
			"RGB_image_push_client",
			"RGBD_push_client",
			"Depth_image_push_client",
			"MarkerDetectionList_client"
	};

	const char* port_type_name[port_types::port_type_max] = {
			"Push",
			"Query"
	};

	void printPorts();
	void printFormattedLine();
public:
	ManagementTask(SmartACE::SmartComponent *comp);
	virtual ~ManagementTask();
	
	virtual int on_entry();
	virtual int on_execute();
	virtual int on_exit();
};

#endif
