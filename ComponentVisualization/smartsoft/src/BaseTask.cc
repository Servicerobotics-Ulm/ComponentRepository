//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2011 Manuel Wopfner
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------


#include "BaseTask.hh"
#include "ComponentVisualization.hh"

#include <iostream>

BaseTask::BaseTask(SmartACE::SmartComponent *comp) 
:	BaseTaskCore(comp)
{
	std::cout << "constructor BaseTask\n";
}
BaseTask::~BaseTask() 
{
	std::cout << "destructor BaseTask\n";
}


int BaseTask::connectServices(){
	std::cout << "connecting to: " << COMP->connections.baseClient.serverName << "; " << COMP->connections.baseClient.serviceName << std::endl;
	Smart::StatusCode status = COMP->baseClient->connect(COMP->connections.baseClient.serverName, COMP->connections.baseClient.serviceName);
	while (status != Smart::SMART_OK) {
		usleep(500000);
		status = COMP->baseClient->connect(COMP->connections.baseClient.serverName, COMP->connections.baseClient.serviceName);
	}
	std::cout << COMP->connections.baseClient.serverName << "; " << COMP->connections.baseClient.serviceName << " connected.\n";
	return 0;
}

int BaseTask::disconnectServices(){
	COMP->baseClient->disconnect();
	return 0;
}


int BaseTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further

#ifdef WITH_MRPT_2_0_VERSION
    bool show_traj = COMP->getGlobalState().getServices().getShow_trajectory();
    base = new BaseVisualization(COMP->getWindow3d(), "Base", show_traj);
#else
    base = new BaseVisualization(COMP->getWindow3d(), "Base");
#endif
	COMP->baseClient->subscribe(COMP->connections.baseClient.interval);

	return (base !=0)? 0 : 1;
}
int BaseTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel

	CommBasicObjects::CommBaseState baseState;
	Smart::StatusCode status = COMP->baseClient->getUpdateWait(baseState);
	if (status == Smart::SMART_OK) {
		base->displayBase(baseState);
	} else {
		if(COMP->getGlobalState().getSettings().getVerbose() == true){
		std::cout<<"Error getting base state: "<<Smart::StatusCodeConversion(status)<<std::endl;
		}
		base->clear();
	}

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int BaseTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again

	delete base;
	COMP->baseClient->unsubscribe();
	return 0;
}
