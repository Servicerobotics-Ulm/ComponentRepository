//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "PlannerGoalTask.hh"
#include "ComponentVisualization.hh"

#include <iostream>

PlannerGoalTask::PlannerGoalTask(SmartACE::SmartComponent *comp) 
:	PlannerGoalTaskCore(comp)
{
	std::cout << "constructor PlannerGoalTask\n";
}
PlannerGoalTask::~PlannerGoalTask() 
{
	std::cout << "destructor PlannerGoalTask\n";
}


int PlannerGoalTask::on_entry()
{
	pose_viz = new PoseVisualization(COMP->getWindow3d(), "pose");

	wayPointConfig.color[0] = 0.5;
	wayPointConfig.color[1] = 0.5;
	wayPointConfig.color[2] = 0.0;
	wayPointConfig.label_prefix = "way point: ";

	goalPointConfig.color[0] = 0.0;
	goalPointConfig.color[1] = 0.5;
	goalPointConfig.color[2] = 0.5;
	goalPointConfig.label_prefix = "goal : ";

	COMP->plannerGoalPushClient->subscribe(COMP->connections.plannerGoalPushClient.interval);
	return (pose_viz !=0)? 0 : 1;
}
int PlannerGoalTask::on_execute()
{
	CommNavigationObjects::CommPlannerGoal plannerGoal;
	Smart::StatusCode status = COMP->plannerGoalPushClient->getUpdateWait(plannerGoal);
	CommBasicObjects::CommPose3d comm_way_point_pose(plannerGoal.getXWayPoint(), plannerGoal.getYWayPoint(), 0.0, plannerGoal.getHWayPoint(), 0.0, 0.0);
	CommBasicObjects::CommPose3d comm_goal_point_pose(plannerGoal.getXGoalPoint(), plannerGoal.getYGoalPoint(), 0.0, plannerGoal.getHGoalPoint(), 0.0, 0.0);

	
	if (status == Smart::SMART_OK) {
		pose_viz->displayPose(comm_goal_point_pose, goalPointConfig);
		pose_viz->displayPose(comm_way_point_pose, wayPointConfig);
	} else {
		if(COMP->getGlobalState().getSettings().getVerbose() == true){
			std::cout<<"Error getting planner goal : "<<Smart::StatusCodeConversion(status)<<std::endl;
		}
		pose_viz->clear();
	}

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int PlannerGoalTask::on_exit()
{
	delete pose_viz;
	COMP->plannerGoalPushClient->unsubscribe();
	return 0;
}
int PlannerGoalTask::connectServices(){
	std::cout << "connecting to: " << COMP->connections.plannerGoalPushClient.serverName << " :: " << COMP->connections.plannerGoalPushClient.serviceName << std::endl;
	Smart::StatusCode status = COMP->baseClient->connect(COMP->connections.plannerGoalPushClient.serverName, COMP->connections.plannerGoalPushClient.serviceName);
	while (status != Smart::SMART_OK) {
		usleep(500000);
		std::cout << "connecting to: " << COMP->connections.plannerGoalPushClient.serverName << " :: " << COMP->connections.plannerGoalPushClient.serviceName << std::endl;
		status = COMP->plannerGoalPushClient->connect(COMP->connections.plannerGoalPushClient.serverName, COMP->connections.plannerGoalPushClient.serviceName);
	}
	std::cout << COMP->connections.plannerGoalPushClient.serverName << " :: " << COMP->connections.plannerGoalPushClient.serviceName << " connected.\n";
	return 0;
}

int PlannerGoalTask::disconnectServices(){
	COMP->plannerGoalPushClient->disconnect();
	return 0;
}
