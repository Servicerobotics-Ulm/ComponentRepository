//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter Services
		 */
		class ServicesType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool show_base;
			bool show_cur_map;
			bool show_ir;
			bool show_kinect_image;
			bool show_laser_1;
			bool show_laser_2;
			bool show_laser_3;
			bool show_ltm;
			bool show_person_detection;
			bool show_tof_image;
			bool show_trajectory;
			bool show_ultrasonic_point_cloud;
			bool simple_laser_visualization;
		
		public:
			// default constructor
			ServicesType() {
				show_base = true;
				show_cur_map = true;
				show_ir = false;
				show_kinect_image = false;
				show_laser_1 = true;
				show_laser_2 = true;
				show_laser_3 = true;
				show_ltm = true;
				show_person_detection = false;
				show_tof_image = false;
				show_trajectory = true;
				show_ultrasonic_point_cloud = false;
				simple_laser_visualization = true;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getShow_base() const { return show_base; }
			inline bool getShow_cur_map() const { return show_cur_map; }
			inline bool getShow_ir() const { return show_ir; }
			inline bool getShow_kinect_image() const { return show_kinect_image; }
			inline bool getShow_laser_1() const { return show_laser_1; }
			inline bool getShow_laser_2() const { return show_laser_2; }
			inline bool getShow_laser_3() const { return show_laser_3; }
			inline bool getShow_ltm() const { return show_ltm; }
			inline bool getShow_person_detection() const { return show_person_detection; }
			inline bool getShow_tof_image() const { return show_tof_image; }
			inline bool getShow_trajectory() const { return show_trajectory; }
			inline bool getShow_ultrasonic_point_cloud() const { return show_ultrasonic_point_cloud; }
			inline bool getSimple_laser_visualization() const { return simple_laser_visualization; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Services(";
				os << "show_base = " << show_base << ", ";
				os << "show_cur_map = " << show_cur_map << ", ";
				os << "show_ir = " << show_ir << ", ";
				os << "show_kinect_image = " << show_kinect_image << ", ";
				os << "show_laser_1 = " << show_laser_1 << ", ";
				os << "show_laser_2 = " << show_laser_2 << ", ";
				os << "show_laser_3 = " << show_laser_3 << ", ";
				os << "show_ltm = " << show_ltm << ", ";
				os << "show_person_detection = " << show_person_detection << ", ";
				os << "show_tof_image = " << show_tof_image << ", ";
				os << "show_trajectory = " << show_trajectory << ", ";
				os << "show_ultrasonic_point_cloud = " << show_ultrasonic_point_cloud << ", ";
				os << "simple_laser_visualization = " << simple_laser_visualization << ", ";
				os << ")\n";
			}
			
		}; // end class ServicesType
		
		/**
		 * Definition of Parameter Settings
		 */
		class SettingsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool verbose;
		
		public:
			// default constructor
			SettingsType() {
				verbose = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getVerbose() const { return verbose; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Settings(";
				os << "verbose = " << verbose << ", ";
				os << ")\n";
			}
			
		}; // end class SettingsType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommBasicObjects
		 */
		class CommBasicObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet VisualizationParams
			 */
			class VisualizationParamsType {
				friend class ParamUpdateHandler;
				public:
				protected:
					/**
					 * internal members
					 */
					
				public:
					/**
					 * public getter methods
					 */
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "VisualizationParams(\n";
						os << ")";
					}
			}; // end of parameter-set class VisualizationParamsType
			
			protected:
				/**
				 * internal members
				 */
				VisualizationParamsType VisualizationParams;
			
			public:
				/**
				 * public getter methods
				 */
				inline VisualizationParamsType getVisualizationParams() const { return VisualizationParams; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommBasicObjects(\n";
					VisualizationParams.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommBasicObjectsType
	
protected:

	// Internal params
	ServicesType Services;
	SettingsType Settings;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommBasicObjectsType CommBasicObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommBasicObjects = commit.getCommBasicObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	ServicesType getServices() const {
		return Services;
	}
	SettingsType getSettings() const {
		return Settings;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommBasicObjectsType getCommBasicObjects() const {
		return CommBasicObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		Services.to_ostream(os);
		Settings.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommBasicObjects.to_ostream(os);
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["Services"] = nlohmann::json {
			{"show_base" , getServices().getShow_base()},
			{"show_cur_map" , getServices().getShow_cur_map()},
			{"show_ir" , getServices().getShow_ir()},
			{"show_kinect_image" , getServices().getShow_kinect_image()},
			{"show_laser_1" , getServices().getShow_laser_1()},
			{"show_laser_2" , getServices().getShow_laser_2()},
			{"show_laser_3" , getServices().getShow_laser_3()},
			{"show_ltm" , getServices().getShow_ltm()},
			{"show_person_detection" , getServices().getShow_person_detection()},
			{"show_tof_image" , getServices().getShow_tof_image()},
			{"show_trajectory" , getServices().getShow_trajectory()},
			{"show_ultrasonic_point_cloud" , getServices().getShow_ultrasonic_point_cloud()},
			{"simple_laser_visualization" , getServices().getSimple_laser_visualization()}
		};
		param["Settings"] = nlohmann::json {
			{"verbose" , getSettings().getVerbose()}
		};
	
		param["VisualizationParams"] = nlohmann::json {
		};
		
		return param.dump();
	}
};

#endif
