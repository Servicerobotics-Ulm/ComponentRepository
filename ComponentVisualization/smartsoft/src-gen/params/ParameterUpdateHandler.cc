//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "ComponentVisualization.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	if(request.getParameterDataMode() == SmartACE::ParameterDataMode::NAME){
		answer = handleParametersNamed(request);
	} else {
		answer = handleParametersSequence(request);
	}
	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersNamed(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_BASE1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_BASE1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_DEPTHIMAGE1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_DEPTHIMAGE1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_IR1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_IR1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_LASER1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_LASER1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_LASER2")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_LASER2Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_LASER3")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_LASER3Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_MAP1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_MAP1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_RGB1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_RGB1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_RGBD1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_RGBD1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_BASE1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_BASE1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_DEPTHIMAGE1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_DEPTHIMAGE1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_IR1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_IR1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_LASER1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_LASER1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_LASER2")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_LASER2Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_LASER3")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_LASER3Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_MAP1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_MAP1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_RGB1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_RGB1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_RGBD1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_RGBD1Core(
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersSequence(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_BASE1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_BASE1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_DEPTHIMAGE1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_DEPTHIMAGE1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_IR1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_IR1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_LASER1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_LASER1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_LASER2")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_LASER2Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_LASER3")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_LASER3Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_MAP1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_MAP1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_RGB1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_RGB1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.SHOW_RGBD1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_SHOW_RGBD1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_BASE1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_BASE1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_DEPTHIMAGE1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_DEPTHIMAGE1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_IR1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_IR1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_LASER1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_LASER1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_LASER2")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_LASER2Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_LASER3")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_LASER3Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_MAP1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_MAP1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_RGB1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_RGB1Core(
			);
		}
	}
	else if (tag == "COMMBASICOBJECTS.VISUALIZATIONPARAMS.STOP_RGBD1")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommBasicObjects_VisualizationParams_STOP_RGBD1Core(
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter Services
		if(parameter.getBoolean("Services", "show_base", commitState.Services.show_base))
		{
			globalState.Services.show_base = commitState.Services.show_base;
		}
		if(parameter.getBoolean("Services", "show_cur_map", commitState.Services.show_cur_map))
		{
			globalState.Services.show_cur_map = commitState.Services.show_cur_map;
		}
		if(parameter.getBoolean("Services", "show_ir", commitState.Services.show_ir))
		{
			globalState.Services.show_ir = commitState.Services.show_ir;
		}
		if(parameter.getBoolean("Services", "show_kinect_image", commitState.Services.show_kinect_image))
		{
			globalState.Services.show_kinect_image = commitState.Services.show_kinect_image;
		}
		if(parameter.getBoolean("Services", "show_laser_1", commitState.Services.show_laser_1))
		{
			globalState.Services.show_laser_1 = commitState.Services.show_laser_1;
		}
		if(parameter.getBoolean("Services", "show_laser_2", commitState.Services.show_laser_2))
		{
			globalState.Services.show_laser_2 = commitState.Services.show_laser_2;
		}
		if(parameter.getBoolean("Services", "show_laser_3", commitState.Services.show_laser_3))
		{
			globalState.Services.show_laser_3 = commitState.Services.show_laser_3;
		}
		if(parameter.getBoolean("Services", "show_ltm", commitState.Services.show_ltm))
		{
			globalState.Services.show_ltm = commitState.Services.show_ltm;
		}
		if(parameter.getBoolean("Services", "show_person_detection", commitState.Services.show_person_detection))
		{
			globalState.Services.show_person_detection = commitState.Services.show_person_detection;
		}
		if(parameter.getBoolean("Services", "show_tof_image", commitState.Services.show_tof_image))
		{
			globalState.Services.show_tof_image = commitState.Services.show_tof_image;
		}
		if(parameter.getBoolean("Services", "show_trajectory", commitState.Services.show_trajectory))
		{
			globalState.Services.show_trajectory = commitState.Services.show_trajectory;
		}
		if(parameter.getBoolean("Services", "show_ultrasonic_point_cloud", commitState.Services.show_ultrasonic_point_cloud))
		{
			globalState.Services.show_ultrasonic_point_cloud = commitState.Services.show_ultrasonic_point_cloud;
		}
		if(parameter.getBoolean("Services", "simple_laser_visualization", commitState.Services.simple_laser_visualization))
		{
			globalState.Services.simple_laser_visualization = commitState.Services.simple_laser_visualization;
		}
		// parameter Settings
		if(parameter.getBoolean("Settings", "verbose", commitState.Settings.verbose))
		{
			globalState.Settings.verbose = commitState.Settings.verbose;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
