//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "TriggerHandler.hh"

#include "ComponentKinectBoxDetection.hh"

// trigger user methods
void TriggerHandler::handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDALGORITHM(const std::string &algorithm)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDOBJECT(const std::string &type)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	std::cout<<"[TriggerHandler]: Parameter ADDOBJECT: "<<type<<std::endl;
	COMP->searched_obj_type = type;
	std::cout<<"[TriggerHandler]: Searched object type has been set to "<<type<<std::endl;
}
void TriggerHandler::handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDSENSOR(const ADDSENSORType::sensorType &sensor)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommObjectRecognitionObjects_ObjectRecognitionParameter_BEHAVIOR(const BEHAVIORType::typeType &type)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommObjectRecognitionObjects_ObjectRecognitionParameter_CAPTURE()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELALGORITHMS()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELOBJECTS()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELSENSORS()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
}
void TriggerHandler::handleCommObjectRecognitionObjects_ObjectRecognitionParameter_RECOGNIZE(const std::string &viewPointID)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	std::cout<<"[TriggerHandler]: Parameter RECOGNIZE: "<<std::endl;
	// start object recognition
	//	COMP->ObjectRecognitionGlobalLock.acquire();
	//		COMP->globalState.viewpointIdToSaveFile = viewPointID;
	//	COMP->ObjectRecognitionGlobalLock.release();

	COMP->start_recognition.release();
	std::cout<<"[TriggerHandler]: PAST Parameter RECOGNIZE: "<<std::endl;
}
