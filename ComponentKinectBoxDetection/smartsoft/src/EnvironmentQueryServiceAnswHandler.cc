//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "EnvironmentQueryServiceAnswHandler.hh"
#include "ComponentKinectBoxDetection.hh"

EnvironmentQueryServiceAnswHandler::EnvironmentQueryServiceAnswHandler(IQueryServer *server)
:	EnvironmentQueryServiceAnswHandlerCore(server)
{
	
}


void EnvironmentQueryServiceAnswHandler::handleQuery(const Smart::QueryIdPtr &id, const CommObjectRecognitionObjects::CommObjectRecognitionId& request) 
{
	CommObjectRecognitionObjects::CommObjectRecognitionEnvironment answer;

	answer.set_valid(false);


	std::cout << "[EnvironmentQueryHandler] Requested Environment Id : " <<request.get_id() << std::endl;
	if (request.get_id() == COMP->environmentIdCounter) {
		CommBasicObjects::CommPose3d pose;
		CommBasicObjects::CommPose3d surface_pose;

		answer.set_size(COMP->concreteObjects.size());

		uint32_t counter = 0;
		for (std::list<ConcreteObject>::const_iterator iter = COMP->concreteObjects.begin(); iter != COMP->concreteObjects.end(); iter++) {
			CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties properties;
			std::cout << "Environment with Id = " << request.get_id() << " has an object of type = " << iter->getObjectClass() << " and Id = " << iter->getId() <<std::endl;
			properties.set_id(iter->getId());
			properties.set_type(iter->getObjectClass());

			const CPose3D& p = iter->getPose();
			pose.set_x(p.x(), 1);
			pose.set_y(p.y(), 1);
			pose.set_z(p.z(), 1);
			pose.set_azimuth(p.yaw());
			pose.set_elevation(p.pitch());
			pose.set_roll(p.roll());
			properties.set_pose(pose);

			const CPose3D& surface_p = iter->getSurfacePose();
			surface_pose.set_x(surface_p.x(), 1);
			surface_pose.set_y(surface_p.y(), 1);
			surface_pose.set_z(surface_p.z(), 1);
			surface_pose.set_azimuth(surface_p.yaw());
			surface_pose.set_elevation(surface_p.pitch());
			surface_pose.set_roll(surface_p.roll());
			std::vector<CommBasicObjects::CommPose3d> surface_poses;
			surface_poses.push_back(surface_pose);
			properties.setObjectSurfacePoses(surface_poses);

			properties.setDimension(iter->getDimension());

			if(iter->getObjectClass() == "OBSTACLE-HULL"){
				std::cout<<"[EnvironmentQueryHandler] found ObstacleHullPointCloud.size(): "<<iter->getObstacleHullPointCloud().getAsStdVector().size()<<std::endl;
				std::cout<<"[EnvironmentQueryHandler] found vertices.size(): "<<iter->getObstacleHullvertices().size()<<std::endl;
				properties.set_triMesh( iter->getObstacleHullvertices(), iter->getObstacleHullPointCloud().getAsStdVector());
			}

			answer.set_object_properties(counter, properties);
			counter++;

		}
		std::cout << "[EnvironmentQueryHandler] Environment query called. Sent " << counter << " objects" << std::endl;
		answer.set_valid(true);
	} else {
		std::cout << "[EnvironmentQueryHandler] Sending invalid answer. ids don't match." << std::endl;
	}

	server->answer(id, answer);
}
