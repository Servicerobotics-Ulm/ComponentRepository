//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _KBQUERYHANDLER_CORE_HH
#define _KBQUERYHANDLER_CORE_HH
		
#include "aceSmartSoft.hh"

#include <list>
#include <memory>
#include <mutex>
#include <atomic>
#include <condition_variable>

#include <CommBasicObjects/CommKBRequest.hh>
#include <CommBasicObjects/CommKBResponse.hh>

// include the input interfaces (if any)

// include all interaction-observer interfaces
#include <KbQueryHandlerObserverInterface.hh>

class KbQueryHandlerCore 
:	public Smart::IInputHandler<std::pair<Smart::QueryIdPtr,CommBasicObjects::CommKBRequest>>
,	public Smart::TaskTriggerSubject
,	public SmartACE::Task
{
private:
	// implementing active-queue handler
	std::atomic<bool> signalled_to_stop;
	std::mutex handler_mutex;
	std::condition_variable handler_cond_var;
	std::list<std::pair<Smart::QueryIdPtr,CommBasicObjects::CommKBRequest>> request_queue;
	// inputs are pushed to the request_queue
	virtual void handle_input(const std::pair<Smart::QueryIdPtr,CommBasicObjects::CommKBRequest> &input) override;
	// inputs are processed from within the thread, thus implementing an active FIFO request-queue
	virtual int task_execution() override;
	// override the default stop behavior to also release the active request queue
	virtual int stop(const bool wait_till_stopped=true) override
	{
		signalled_to_stop = true;
		handler_cond_var.notify_all();
		return SmartACE::Task::stop();
	}


	virtual void updateAllCommObjects();

/**
 * Implementation of the Subject part of an InteractionObserver
 */
private:
	std::mutex interaction_observers_mutex;
	std::list<KbQueryHandlerObserverInterface*> interaction_observers;
protected:
	void notify_all_interaction_observers();
public:
	void attach_interaction_observer(KbQueryHandlerObserverInterface *observer);
	void detach_interaction_observer(KbQueryHandlerObserverInterface *observer);

protected:
	
public:
	using IQueryServer = Smart::IQueryServerPattern<CommBasicObjects::CommKBRequest, CommBasicObjects::CommKBResponse>;
	using QueryId = Smart::QueryIdPtr;
	KbQueryHandlerCore(IQueryServer *server);
	virtual ~KbQueryHandlerCore();
	
protected:
	IQueryServer *server;
	//this user-method has to be implemented in derived classes
	virtual void handleQuery(const QueryId &id, const CommBasicObjects::CommKBRequest& request) = 0;
};
#endif
