//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef _KBQUERYHANDLER_USER_HH
#define _KBQUERYHANDLER_USER_HH
		
#include "KbQueryHandlerCore.hh"

class KbQueryHandler : public KbQueryHandlerCore
{

	struct internal_KB_query {
		long id;
		CommBasicObjects::CommKBRequest msg;
		SmartACE::SmartConditionMutex* cond;
		bool requires_answ;
	};

	struct internal_KB_queryAnswer {
		CommBasicObjects::CommKBResponse answ;
		SmartACE::SmartConditionMutex* cond;
		bool requires_answ;
	};

	mutable SmartACE::SmartMutex lock;
	mutable SmartACE::SmartSemaphore sema;

	std::list< internal_KB_query > request_list;
	std::map<long, internal_KB_queryAnswer > ans_list;



protected:
public:
	KbQueryHandler(Smart::IQueryServerPattern<CommBasicObjects::CommKBRequest, CommBasicObjects::CommKBResponse>* server);
	virtual ~KbQueryHandler();
	virtual void handleQuery(const Smart::QueryIdPtr &id, const CommBasicObjects::CommKBRequest& request);

	int getQuery(CommBasicObjects::CommKBRequest &request, long &req_id);
	void answerQuery(const CommBasicObjects::CommKBResponse &answer, const long &req_id);

	void insertChainedQueryFromComponent(std::string request);
	void insertCompShutdownQuery();
};
#endif
