//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------


//--------------------------------------------------------------------------
//BSD 3-Clause License
//
//  Copyright (C) Servicerobotics Ulm
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm
//  Germany
//  All rights reserved.
//
//  Author: Nayabrasul Shaik
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions are met:
//
//* Redistributions of source code must retain the above copyright notice, this
//  list of conditions and the following disclaimer.
//
//* Redistributions in binary form must reproduce the above copyright notice,
//  this list of conditions and the following disclaimer in the documentation
//  and/or other materials provided with the distribution.
//
//* Neither the name of the copyright holder nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef _LIVEPREVIEWTASK_HH
#define _LIVEPREVIEWTASK_HH

#include "LivePreviewTaskCore.hh"
#include "ParameterStateStruct.hh"
#include <opencv2/opencv.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/core.hpp>
#include <opencv2/aruco.hpp>
#include <opencv2/aruco/charuco.hpp>


class LivePreviewTask  : public LivePreviewTaskCore
{
private:
	unsigned long int image_counter;
	std::string data_dir;


	std::vector<cv::Mat> R_gripper2base, t_gripper2base;
	std::vector<cv::Mat> R_base2gripper, t_base2gripper;
	std::vector<cv::Mat> R_target2cam, t_target2cam;

	cv::Mat R_cam2gripper;
	cv::Mat t_cam2gripper;

	cv::Mat R_cam2base;
	cv::Mat t_cam2base;

	cv::Mat camera_matrix;
	cv::Mat distortion_coeffs;
	bool init;
	cv::FileStorage log_file;

	struct ChArUcoBoard{
	cv::Size size;
	double square_length;
	double marker_length;
	std::vector<cv::Point3d> points_3d;
	cv::aruco::PREDEFINED_DICTIONARY_NAME dictionary;
	}charuco_board;
	enum class CalibrationType{
		HAND_TO_EYE,
		HAND_IN_EYE
	}calibration_type;

public:
	LivePreviewTask(SmartACE::SmartComponent *comp);
	virtual ~LivePreviewTask();
	virtual int on_entry();
	virtual int on_execute();
	virtual int on_exit();
	void to_homogeneous_tf_matrix(const cv::Mat& rotation_matrix, const cv::Mat& translation_matrix, cv::Mat& homogeneous_mat);
	void rmat_from_homogeneous_tf_matrix(const cv::Mat homogeneous_mat, cv::Mat& rotation_matrix);
	void tmat_from_homogeneous_tf_matrix(const cv::Mat homogeneous_mat, cv::Mat& translation_matrix);
	void get_camera_matrix_nd_distortion_coeffs(DomainVision::CommVideoImage& comm_rgb_image, cv::Mat& camera_matrix, cv::Mat& distortion_coeffs);
	void CommVideoImage2CVMat(DomainVision::CommVideoImage& comm_rgb_image, cv::Mat& rgb_mat);
	void detect_charuco_board_corners_3d(const cv::Mat& bgr_mat,  ChArUcoBoard& charuco_board, cv::Mat& rotation_vector, cv::Mat& translation_matrix);
	bool get_gripper2base_pose(cv::Mat& rotation_matrix, cv::Mat& translation_matrix);
	void calibrate();
	cv::aruco::PREDEFINED_DICTIONARY_NAME get_dictionary_type(ParameterStateStruct::ChArUcoBoardType::dictionaryTypeType dictionary_type);
};

#endif
