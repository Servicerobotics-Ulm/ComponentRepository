//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "ClosestFreeNodeServiceAnswHandler.hh"
#include "ComponentNavigationGraph.hh"

ClosestFreeNodeServiceAnswHandler::ClosestFreeNodeServiceAnswHandler(IQueryServer *server)
:	ClosestFreeNodeServiceAnswHandlerCore(server)
{
	
}


void ClosestFreeNodeServiceAnswHandler::handleQuery(const Smart::QueryIdPtr &id, const CommBasicObjects::CommPosition3d& request) 
{
	DomainRobotFleetNavigation::CommNode answer;

	double minDist = std::numeric_limits<double>::max();
	for (std::map<int, DomainRobotFleetNavigation::CommNode>::iterator it = COMP->nodeMapInt.begin(); it != COMP->nodeMapInt.end(); it++)
	{
		std::cout << "Node " << it->second.getId() << " with x/y/isReserved: " << it->second.getX() << "/" << it->second.getY() << "/" << it->second.getReserved() << std::endl;
		double dist = sqrt(pow((request.getX()/1000.0)-it->second.getX(),2)+pow((request.getY()/1000.0)-it->second.getY(),2));
		if (dist < minDist && it->second.getReserved() == false) {
			minDist = dist;
			answer = it->second;
		}
	}
	
	std::cout << "Closest node (id/x/y):" << answer.getId() <<"/"<< answer.getX() <<"/"<< answer.getY() << std::endl;
	answer.setX(answer.getX()*1000.0);
	answer.setY(answer.getY()*1000.0);

	this->server->answer(id, answer);
}
