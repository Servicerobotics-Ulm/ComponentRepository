//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2021 Timo Blender
//
//
//        timo.blender@thu.de
//        christian.schlegel@thu.de
//
//        Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "NodeStatusUpdateServiceAnswHandler.hh"
#include "ComponentNavigationGraph.hh"

NodeStatusUpdateServiceAnswHandler::NodeStatusUpdateServiceAnswHandler(IQueryServer *server)
:	NodeStatusUpdateServiceAnswHandlerCore(server)
{
	
}

void NodeStatusUpdateServiceAnswHandler::handleQuery(const Smart::QueryIdPtr &id, const DomainRobotFleetNavigation::CommNodeStatusUpdateRequest& request)
{

	std::cout << "NodeStatusUpdate request:" << request << std::endl;

	DomainRobotFleetNavigation::CommNodeStatusUpdateAnswer answer;
	
	// implement your query handling logic here and fill in the answer object
	
	SmartACE::SmartGuard guard(COMP->mutex);
		if (request.getType() == DomainRobotFleetNavigation::StatusUpdateType::ACQUIRENODE) {
			if (COMP->nodeStatusMap[request.getId()] == COMP->NodeStatus::FREE) {
				//COMP->nodeStatusMap.insert(std::make_pair(request.getId(), 1));
				COMP->nodeStatusMap[request.getId()] = COMP->NodeStatus::RESERVED;
				COMP->nodeMapInt[request.getId()].setReserved(true);
				answer.setSuccess(true);
			}
			else if (COMP->nodeStatusMap[request.getId()] == COMP->NodeStatus::RESERVED) {
				answer.setSuccess(false);
			}
		}
		else if (request.getType() == DomainRobotFleetNavigation::StatusUpdateType::FREENODE) {
			//COMP->nodeStatusMap.insert(std::make_pair(request.getId(), 0));
			COMP->nodeStatusMap[request.getId()] = COMP->NodeStatus::FREE;
			COMP->nodeMapInt[request.getId()].setReserved(false);
			answer.setSuccess(true);
		}
	guard.release();

	this->server->answer(id, answer);
}
