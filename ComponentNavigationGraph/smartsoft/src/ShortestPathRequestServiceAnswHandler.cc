//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2021 Timo Blender
//
//
//        timo.blender@thu.de
//        christian.schlegel@thu.de
//
//        Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "ShortestPathRequestServiceAnswHandler.hh"
#include "ComponentNavigationGraph.hh"

ShortestPathRequestServiceAnswHandler::ShortestPathRequestServiceAnswHandler(IQueryServer *server)
:	ShortestPathRequestServiceAnswHandlerCore(server)
{
	
}


void ShortestPathRequestServiceAnswHandler::handleQuery(const Smart::QueryIdPtr &id, const DomainRobotFleetNavigation::CommShortestPathRequest& request)
{
	//DomainRobotFleetNavigation::CommShortestPathAnswer answer;

	DomainRobotFleetNavigation::CommCorridorPath answer;
	
	// implement your query handling logic here and fill in the answer object

	std::cout << "shortest path query received!" << std::endl;

	//answer.setPath(getShortestPath(request.getFrom(),request.getTo()));
	answer = getShortestPath(request.getFrom(),request.getTo());

	std::cout << "shortest path query finished!" << std::endl;

	this->server->answer(id, answer);
}

DomainRobotFleetNavigation::CommCorridorPath ShortestPathRequestServiceAnswHandler::getShortestPath(int start, int goal) {

	std::vector<vertex_descriptor> parents(boost::num_vertices(COMP->g));
	std::vector<double> distances(boost::num_vertices(COMP->g));
	vertex_descriptor startV = boost::vertex(start, COMP->g);
	boost::dijkstra_shortest_paths(COMP->g, startV,
	             	 	 	boost::predecessor_map(boost::make_iterator_property_map(parents.begin(), get(boost::vertex_index, COMP->g))).
	                        distance_map(boost::make_iterator_property_map(distances.begin(), get(boost::vertex_index, COMP->g))));

	std::vector<int> indices;

	int i = boost::vertex(goal, COMP->g);
	int pi = -1;

	indices.push_back(i);

	while (true) {
		pi = parents[i];
		if (pi == i) { break; }
		i = pi;
		indices.push_back(i);
	}

//	path_indices.pop_back(); // remove start position from path list

//	dist = distances[goal];

	std::reverse(indices.begin(), indices.end());


	DomainRobotFleetNavigation::CommCorridorPath cPath;

	DomainRobotFleetNavigation::CommNode node;
	std::vector<DomainRobotFleetNavigation::CommNode> nodes;
	std::vector<double> widths;

	for (int i = 0; i < indices.size(); i++) {

		node = COMP->nodeMapInt[indices[i]];

		SmartACE::SmartGuard guard(COMP->mutex);

			std::cout << "status of " << indices[i] << ": " << COMP->nodeStatusMap[indices[i]] << std::endl;

			//if (COMP->nodeStatusMap[indices[i]] == COMP->NodeStatus::FREE) {
				node.setReserved(false);
				//COMP->nodeStatusMap.insert(std::make_pair(indices[i], 1));
				//COMP->nodeStatusMap[indices[i]] = COMP->NodeStatus::RESERVED;
				//std::cout << indices[i] << " is reserved now!" << std::endl;
				//std::cout << "COMP->nodeStatusMap[indices[i]]: " << COMP->nodeStatusMap[indices[i]] << std::endl;
			//}
			//else if (COMP->nodeStatusMap[indices[i]] == COMP->NodeStatus::RESERVED) {
			//	node.setReserved(true);
			//}

		guard.release();

		nodes.push_back(node);

		std::cout << "NodeID: " << node.getId() << " & NodeX: " << node.getX() << " & NodeY: " << node.getY() << " & isReserved: " << node.getReserved() << std::endl;
	}

	// TODO: Use the widths from the editor
	for (int i = 0; i < indices.size()-1; i++) {
		widths.push_back(1.0);
	}

	cPath.setNodes(nodes);
	cPath.setWidths(widths);

	return cPath;
}
