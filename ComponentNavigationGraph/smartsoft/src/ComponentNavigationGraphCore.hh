//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2021 Timo Blender
//
//
//        timo.blender@thu.de
//        christian.schlegel@thu.de
//
//        Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------
#ifndef _COMPONENTNAVIGATIONGRAPHCORE_HH
#define _COMPONENTNAVIGATIONGRAPHCORE_HH
	
#include "aceSmartSoft.hh"
#include <iostream>

#include <boost/graph/adjacency_list.hpp>

#include <DomainRobotFleetNavigation/CommNode.hh>
#include <DomainRobotFleetNavigation/CommPath.hh>

#include <string.h>

typedef boost::adjacency_list<boost::vecS, boost::vecS, boost::directedS, boost::no_property, boost::property < boost::edge_weight_t, double > > graph;
typedef boost::graph_traits < graph >::vertex_descriptor vertex_descriptor;

class ComponentNavigationGraphCore
{
private:

public:
	ComponentNavigationGraphCore();
	graph g;
	std::map<std::string, DomainRobotFleetNavigation::CommNode> nodeMap;
	std::map<int, DomainRobotFleetNavigation::CommNode> nodeMapInt;
	std::map<int, int> nodeIdPathIdAssociation;
	std::map<int, DomainRobotFleetNavigation::CommPath> pathMapInt;

	enum NodeStatus {
		FREE = 0,
		RESERVED = 1
	};

	std::map<int, int> nodeStatusMap;

	std::string getId(int pathid, int nodeid) {
		std::string id = std::to_string(pathid);
		id.append(std::to_string(nodeid));
		return id;
	}

	SmartACE::SmartMutex mutex;
};
	
#endif
