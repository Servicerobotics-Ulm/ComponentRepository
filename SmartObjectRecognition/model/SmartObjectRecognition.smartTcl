(define-tcb (recognize => ?envId)
  (module "objRecognitionModule")
  (action (
            (format t "=========================>>> tcb-recognize ~%")
            '(SUCCESS ())))
  (plan (
          ;;(tcb-clear-env-openrave)
          (objrecogsetup table-1) ;; TODO ?location
          ;;(tcb-ptu-pose table-1 0)
          ;;(tcb-objrec-wiring objectRecog)
          (objectrecognition => ?envId ?objs)
          (tcb-store-objects-in-kb ?objs)
          ;;(tcb-load-env-into-openrave ?envId)
          ;;(tcb-throw-away ?envId)
          ;;(tcb-manipulator-pose object-rec)
        )))



(define-tcb (objrecogsetup ?location)
  (module "objRecognitionModule")
  (action (
            (format t "=========================>>> tcb-obj-recog-setup ~s ~%" '?location)
            (let* ((location (tcl-kb-query :key '(is-a name) :value '((is-a location)(name ?location))))
                   (obj-list (get-value location 'obj-list)))
              (tcl-param :server 'objrecog :slot 'COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.DELSENSORS)
              (tcl-param :server 'objrecog :slot 'COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.CLUSTERING :value 1)
              (tcl-param :server 'objrecog :slot 'COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.ESTIMATEFILLING :value 0)
              (tcl-param :server 'objrecog :slot 'COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.DELOBJECTS)
              (dolist (obj obj-list)
                (tcl-param :server 'objrecog :slot 'COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.ADDOBJECT :value obj))
              (tcl-param :server 'objrecog :slot 'COMMIT)
              '(SUCCESS ())))))
              
;; object-recognition ?envId => ?objs
;; ?objs will be bound by event-handler
(define-tcb (objectrecognition => ?envId ?objs)
  (module "objRecognitionModule")
  (action (
            (format t "=========================>>> tcb-object-recognition ID = ~s~%" '?envId)
            (tcl-activate-event :name 'evt-recog
                                :handler 'handler-recognition
                                :server 'objrecog 
                                :service 'objectrecognitionevent
                                :mode 'continuous)
            ;(tcl-state :server 'cameractrl :state "Servo")
            (tcl-state :server 'camera :state "QueryImage")
            (tcl-param :server 'objrecog :slot 'COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.recognize)
            '(SUCCESS ()))))
            
;; handler-recognition
(define-event-handler (handler-recognition)
  (action (
            (format t "=========================>>> HANDLER OBJECT RECOGNIZED ~s ~%~%" (tcl-event-message))
           
            (tcl-bind-var :name '?envId :value (first(read-from-string (tcl-event-message))))
            (tcl-bind-var :name '?objs :value (read-from-string (tcl-event-message)))
            
            (tcl-state :server 'camera :state "Neutral")
            (tcl-state :server 'cameractrl :state "Neutral")
            (tcl-abort))))
            
            
;; functions
;; (show-objects)
(defun show-objects ()
  (let ((obj-list     (tcl-kb-query-all :key '(is-a) :value '((is-a object)))))
    (dolist (obj obj-list)
      (format t "~%--------------------------------~%")
      (format t "id                      : ~s ~%" (get-value obj 'id))
      (format t "  envid                 : ~s ~%" (get-value obj 'envid))
      (format t "  status                : ~s ~%" (get-value obj 'status))
      (format t "  stacked-into          : ~s ~%" (get-value obj 'stacked-into))
      (format t "  capacity              : ~s ~%" (get-value obj 'capacity))
      (format t "  contains              : ~s ~%" (get-value obj 'contains))
      (format t "  type                  : ~s ~%" (get-value obj 'type))
      (format t "  cleanup               : ~s ~%" (get-value obj 'cleanup))
      (format t "  pose                  : ~s ~%" (get-value obj 'pose))
      (format t "  fill-level            : ~s ~%" (get-value obj 'fill-level))
      (format t "  simple-grasping       : ~s ~%" (get-value obj 'simple-grasping))
      (format t "  current-grasp-offset  : ~s ~%" (get-value obj 'current-grasp-offset))
      (format t "  stacking-offset       : ~s ~%" (get-value obj 'stacking-offset))
      (format t "  stack-growing-offset  : ~s ~%" (get-value obj 'stack-growing-offset))
      (format t "  speech                : ~s ~%" (get-value obj 'speech)))))            


;; tcb-store-objects-in-kb ?objects
(define-tcb (tcb-store-objects-in-kb ?objects)
	(module "objRecognitionModule")
  	(action (
            (let* ((objs '?objects)
                  (envId (first objs))
                  (obj nil))
              (format t "=========================>>> tcb-store-objects-in-kb -- envId = ~s  -- objs = ~s~%" envId objs)
              ;; iterate over objects
              (dolist (id (second objs))
				(format t "=========================>>> before setf obj")
                (setf obj (tcl-query :server 'objrecog 
                                     :service 'objectquery
                                     :request id))
                (format t "=========================>>> before convert")
                ;; convert to meter !!!
                (setf obj `(,(first obj) ,(/ (second obj) 1000) ,(/ (third obj) 1000) 
                  ,(/ (fourth obj) 1000) ,(fifth obj) ,(sixth obj) ,(seventh obj), (eighth obj)))
                (format t "-- OBJ id: ~s   obj: ~s ~%" id obj)
                ;; store in KB
                (cond 
                  ((equal (first obj) 'OBSTACLE-HULL)
                    (format t "Skipping OBSTACLE-HULL ~%"))
                  ((equal (first obj) 'OBSTACLE)
                    (format t "Skipping OBSTACLE ~%"))
                  ((equal (first obj) 'TABLE)
                    (format t "Skipping TABLE ~%"))  
                  ((equal (first obj) 'REDBULL-250ML)
                    (format t "Store REDBULL-250ML ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 140)
                                (type REDBULL-250ML)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "red bull"))))
                  ((equal (first obj) 'REDBULL-60ML)
                    (format t "Store REDBULL-60ML ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId) 
                                (status GRASPABLE)
                                (capacity 0)
                                (contains 0)
                                (size-height 95)
                                (type REDBULL-60ML)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "red bull power shot"))))
                  ((equal (first obj) 'COCA-COLA-CAN-250ML)
                    (format t "Store COCA-COLA-CAN-250ML ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 0)
                                (contains 0)
                                (size-height 115)
                                (type COCA-COLA-CAN-250ML)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0)
                                (stack-growing-offset 0)
                                (speech "coke"))))
                  ((equal (first obj) 'PRINGLES-160G-SOURCREAMANDONION)
                    (format t "Store PRINGLES-160G-SOURCREAMANDONION ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 200)
                                (contains 0)
                                (size-height 0)
                                (type PRINGLES-160G-SOURCREAMANDONION)
                                (cleanup TRASH)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (fill-level ,(eighth obj)) 
                                (stacking-offset 0.21)
                                (stack-growing-offset 0)
                                (speech "prinles sour cream and onion"))))
                  ((equal (first obj) 'PRINGLES-160G-PAPRIKA)
                    (format t "Store PRINGLES-160G-PAPRIKA ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 200)
                                (contains 0)
                                (size-height 0)
                                (type PRINGLES-160G)
                                (cleanup TRASH)
                                (pose ,(second obj)(third obj)(fourth obj)(fifth obj)(sixth obj))
                                (stacking-offset 0.21)
                                (stack-growing-offset 0)
                                (speech "prinles paprika"))))
                  ((equal (first obj) 'PRINGLES-160G-HOTANDSPICY)
                    (format t "Store PRINGLES-160G-HOTANDSPICY ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 200)
                                (contains 0)
                                (size-height 0)
                                (type PRINGLES-160G-HOTANDSPICY)
                                (cleanup TRASH)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (fill-level ,(eighth obj)) 
                                (stacking-offset 0.21)
                                (stack-growing-offset 0)
                                (speech "prinles hot and spicy"))))
                 ; ((equal (first obj) 'PRINGLES-160G-HOTANDSPICY-FULL) ;; dennis aug/2012
                 ;   (format t "Store PRINGLES-160G-HOTANDSPICY-FULL ~%")
                 ;   (tcl-kb-update 
                 ;     :key '(is-a id) 
                 ;     :value `(
                 ;               (is-a OBJECT)
                 ;               (id ,id)
                 ;               (envid ,envId)
                 ;               (status GRASPABLE)
                 ;               (stacked-into nil)
                 ;               (capacity 200)
                 ;               (contains 0)
                 ;               (size-height 0)
                 ;               (type PRINGLES-160G)
                 ;               (cleanup TRASH)
                 ;               (pose ,(rest obj))
                 ;               (stacking-offset 0.21)
                 ;               (stack-growing-offset 0)
                 ;               (speech "prinles hot and spicy full with chips"))))
                  ((equal (first obj) 'SUN-SNACKS-120G)
                    (format t "Store SUN-SNACKS-120G ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil)
                                (capacity 110)
                                (contains 0)
                                (size-height 0)
                                (type SUN-SNACKS-120G)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.14)
                                (stack-growing-offset 0)
                                (speech "potato sticks"))))
                  ((equal (first obj) 'IKEA-CUP-SOLBRAEND-BLUE)
                    (format t "Store IKEA-CUP-SOLBRAEND-BLUE ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 80)
                                (contains 0)
                                (size-height 20)
                                (type IKEA-CUP-SOLBRAEND)
                                (cleanup WASHABLE)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (fill-level ,(eighth obj)) 
                                (stacking-offset 0.09)
                                (stack-growing-offset 0.018)
                                (speech "blue cup"))))
                  ((equal (first obj) 'IKEA-CUP-SOLBRAEND-YELLOW)
                    (format t "Store IKEA-CUP-SOLBRAEND-YELLOW ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 80)
                                (contains 0)
                                (size-height 20)
                                (type IKEA-CUP-SOLBRAEND)
                                (cleanup WASHABLE)
                                (pose ,(rest obj))
                                (stacking-offset 0.09)
                                (stack-growing-offset 0.018)
                                (speech "yellow cup"))))
                  ((equal (first obj) 'KCLASSIC-H-VOLLMILCH)
                    (format t "Store KCLASSIC-H-VOLLMILCH ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type KCLASSIC-H-VOLLMILCH)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "k milk"))))
                  ((equal (first obj) 'FAIR-MILK)
                    (format t "Store FAIR-MILK ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type FAIR-MILK)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "fair milk"))))
                  ((equal (first obj) 'RIODORO-APPLEJUICE)
                    (format t "Store RIODORO-APPLEJUICE ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type RIODORO-APPLEJUICE)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "rio doro apple juice"))))
                  ((equal (first obj) 'RIOGRANDE-PINEAPPLE)
                    (format t "Store RIOGRANDE-PINEAPPLE ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type RIOGRANDE-PINEAPPLE)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "pineapple juice"))))
                  ((equal (first obj) 'RIOGRANDE-GRAPEFRUIT)
                    (format t "Store RIOGRANDE-GRAPEFRUIT ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type RIOGRANDE-GRAPEFRUIT)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "grapefuit juice"))))
                  ((equal (first obj) 'RIOGRANDE-APPLEJUICE)
                    (format t "Store RIOGRANDE-APPLEJUICE ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type RIOGRANDE-APPLEJUICE)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "apple juice"))))
                   ((equal (first obj) 'SWEET-KISS-TEA)
                    (format t "Store SWEET-KISS-TEA ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (status GRASPABLE)
                                (stacked-into nil) 
                                (capacity 0)
                                (contains 0)
                                (size-height 20)
                                (type SWEET-KISS-TEA)
                                (cleanup TRASH)
                                (pose ,(rest obj))
                                (stacking-offset 0.0)
                                (stack-growing-offset 0.0)
                                (speech "sweet kiss tea \\item=kiss"))))
                  ((equal (first obj) 'COFFEEMACHINE-DELONGHI-ESAM-3500)
                    (format t "Store COFFEEMACHINE-DELONGHI-ESAM-3500 ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type COFFEEMACHINE-DELONGHI-ESAM-3500)
                                (pose ,(rest obj))
                                (speech "coffee machine"))))
                  ((equal (first obj) 'KITCHEN-COUNTER)
                    (format t "Store KITCHEN-COUNTER ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type KITCHEN-COUNTER)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (speech "kitchen counter"))))
                  ((equal (first obj) 'SIDEBOARD-600)
                    (format t "Store SIDEBOARD-600 ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type SIDEBOARD-600)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (speech "sideboard"))))
                  ((equal (first obj) 'KITCHEN-DOOR-HANDLE-SILVER)
                    (format t "Store KITCHEN-DOOR-HANDLE-SILVER ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type KITCHEN-DOOR-HANDLE-SILVER)
                                (pose ,`(,(second obj),(third obj),(fourth obj),(fifth obj),(sixth obj),(seventh obj)))
                                (speech "door handle"))))
                  ((equal (first obj) 'SUGAR-DISPENSER)
                    (format t "Store SUGAR-DISPENSER ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type SUGAR-DISPENSER)
                                (pose ,(rest obj))
                                (ikea-cup-solbraend-offset ())
                                (speech "sugar dispenser"))))                   
                  ((equal (first obj) 'SUGAR-DISPENSER-SMALL)
                    (format t "Store SUGAR-DISPENSER-SMALL ~%")
                    (tcl-kb-update 
                      :key '(is-a id) 
                      :value `(
                                (is-a OBJECT)
                                (id ,id)
                                (envid ,envId)
                                (type SUGAR-DISPENSER-SMALL)
                                (pose ,(rest obj))
                                (ikea-cup-solbraend-offset ())
                                (speech "sugar dispenser"))))                   
                  (T
                    (format t "UNKNOWN OBJECT ~%")))))
            '(SUCCESS ()))))        
 
