//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter TaskSelection
		 */
		class TaskSelectionType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool IsLocalization;
		
		public:
			// default constructor
			TaskSelectionType() {
				IsLocalization = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getIsLocalization() const { return IsLocalization; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "TaskSelection(";
				os << "IsLocalization = " << IsLocalization << ", ";
				os << ")\n";
			}
			
		}; // end class TaskSelectionType
		
		/**
		 * Definition of Parameter ConfigureSLAM
		 */
		class ConfigureSLAMType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool MultiSession;
			int Odomtype;
		
		public:
			// default constructor
			ConfigureSLAMType() {
				MultiSession = false;
				Odomtype = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getMultiSession() const { return MultiSession; }
			inline int getOdomtype() const { return Odomtype; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "ConfigureSLAM(";
				os << "MultiSession = " << MultiSession << ", ";
				os << "Odomtype = " << Odomtype << ", ";
				os << ")\n";
			}
			
		}; // end class ConfigureSLAMType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommLocalizationObjects
		 */
		class CommLocalizationObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet SlamParameter
			 */
			class SlamParameterType {
				friend class ParamUpdateHandler;
				public:
				protected:
					/**
					 * internal members
					 */
					
				public:
					/**
					 * public getter methods
					 */
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "SlamParameter(\n";
						os << ")";
					}
			}; // end of parameter-set class SlamParameterType
			
			protected:
				/**
				 * internal members
				 */
				SlamParameterType SlamParameter;
			
			public:
				/**
				 * public getter methods
				 */
				inline SlamParameterType getSlamParameter() const { return SlamParameter; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommLocalizationObjects(\n";
					SlamParameter.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommLocalizationObjectsType
	
protected:

	// Internal params
	ConfigureSLAMType ConfigureSLAM;
	TaskSelectionType TaskSelection;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommLocalizationObjectsType CommLocalizationObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommLocalizationObjects = commit.getCommLocalizationObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	ConfigureSLAMType getConfigureSLAM() const {
		return ConfigureSLAM;
	}
	TaskSelectionType getTaskSelection() const {
		return TaskSelection;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommLocalizationObjectsType getCommLocalizationObjects() const {
		return CommLocalizationObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		ConfigureSLAM.to_ostream(os);
		TaskSelection.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommLocalizationObjects.to_ostream(os);
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["ConfigureSLAM"] = nlohmann::json {
			{"MultiSession" , getConfigureSLAM().getMultiSession()},
			{"Odomtype" , getConfigureSLAM().getOdomtype()}
		};
		param["TaskSelection"] = nlohmann::json {
			{"IsLocalization" , getTaskSelection().getIsLocalization()}
		};
	
		param["SlamParameter"] = nlohmann::json {
		};
		
		return param.dump();
	}
};

#endif
