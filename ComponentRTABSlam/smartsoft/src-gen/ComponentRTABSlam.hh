//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _COMPONENTRTABSLAM_HH
#define _COMPONENTRTABSLAM_HH

#include <map>
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "ComponentRTABSlamCore.hh"

#include "ComponentRTABSlamPortFactoryInterface.hh"
#include "ComponentRTABSlamExtension.hh"

// forward declarations
class ComponentRTABSlamPortFactoryInterface;
class ComponentRTABSlamExtension;

// includes for PlainOpcUaComponentRTABSlamExtension
// include plain OPC UA device clients
// include plain OPC UA status servers


// include communication objects
#include <CommBasicObjects/CommBaseState.hh>
#include <CommBasicObjects/CommBaseStateACE.hh>
#include <DomainVision/CommRGBDImage.hh>
#include <DomainVision/CommRGBDImageACE.hh>

// include tasks
#include "LocalizationThread.hh"
#include "MappingThread.hh"
// include UpcallManagers and InputCollectors
#include "BaseStatePushNewestClientUpcallManager.hh"
#include "BaseStatePushNewestClientInputCollector.hh"
#include "Rgbd_clientUpcallManager.hh"
#include "Rgbd_clientInputCollector.hh"

// include input-handler(s)
// include request-handler(s)
// output port wrappers

// include handler
#include "CompHandler.hh"

#include "ParameterStateStruct.hh"
#include "ParameterUpdateHandler.hh"

#include "SmartStateChangeHandler.hh"

#define COMP ComponentRTABSlam::instance()

class ComponentRTABSlam : public ComponentRTABSlamCore {
private:
	static ComponentRTABSlam *_componentRTABSlam;
	
	// constructor
	ComponentRTABSlam();
	
	// copy-constructor
	ComponentRTABSlam(const ComponentRTABSlam& cc);
	
	// destructor
	~ComponentRTABSlam() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	// helper method that maps a string-name to an according TaskTriggerSubject
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
	// internal map storing the different port-creation factories (that internally map to specific middleware implementations)
	std::map<std::string, ComponentRTABSlamPortFactoryInterface*> portFactoryRegistry;
	
	// internal map storing various extensions of this component class
	std::map<std::string, ComponentRTABSlamExtension*> componentExtensionRegistry;
	
public:
	ParameterStateStruct getGlobalState() const
	{
		return paramHandler.getGlobalState();
	}
	
	ParameterStateStruct getParameters() const
	{
		return paramHandler.getGlobalState();
	}
	
	// define tasks
	Smart::TaskTriggerSubject* localizationThreadTrigger;
	LocalizationThread *localizationThread;
	Smart::TaskTriggerSubject* mappingThreadTrigger;
	MappingThread *mappingThread;
	
	// define input-ports
	// InputPort baseStatePushNewestClient
	Smart::IPushClientPattern<CommBasicObjects::CommBaseState> *baseStatePushNewestClient;
	Smart::InputTaskTrigger<CommBasicObjects::CommBaseState> *baseStatePushNewestClientInputTaskTrigger;
	BaseStatePushNewestClientUpcallManager *baseStatePushNewestClientUpcallManager;
	BaseStatePushNewestClientInputCollector *baseStatePushNewestClientInputCollector;
	// InputPort rgbd_client
	Smart::IPushClientPattern<DomainVision::CommRGBDImage> *rgbd_client;
	Smart::InputTaskTrigger<DomainVision::CommRGBDImage> *rgbd_clientInputTaskTrigger;
	Rgbd_clientUpcallManager *rgbd_clientUpcallManager;
	Rgbd_clientInputCollector *rgbd_clientInputCollector;
	
	// define request-ports
	
	// define input-handler
	
	// define output-ports
	
	// define answer-ports
	
	// define request-handlers
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	ParamUpdateHandler paramHandler;
	SmartACE::ParameterSlave *param;
	
	
	/// this method is used to register different PortFactory classes (one for each supported middleware framework)
	void addPortFactory(const std::string &name, ComponentRTABSlamPortFactoryInterface *portFactory);
	
	SmartACE::SmartComponent* getComponentImpl();
	
	/// this method is used to register different component-extension classes
	void addExtension(ComponentRTABSlamExtension *extension);
	
	/// this method allows to access the registered component-extensions (automatically converting to the actuall implementation type)
	template <typename T>
	T* getExtension(const std::string &name) {
		auto it = componentExtensionRegistry.find(name);
		if(it != componentExtensionRegistry.end()) {
			return dynamic_cast<T*>(it->second);
		}
		return 0;
	}
	
	/// initialize component's internal members
	void init(int argc, char *argv[]);
	
	/// execute the component's infrastructure
	void run();
	
	/// clean-up component's resources
	void fini();
	
	/// call this method to set the overall component into the Alive state (i.e. component is then ready to operate)
	void setStartupFinished();
	
	/// connect all component's client ports
	Smart::StatusCode connectAndStartAllServices();
	
	/// start all assocuated Activities
	void startAllTasks();
	
	/// start all associated timers
	void startAllTimers();
	
	Smart::StatusCode connectBaseStatePushNewestClient(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectRgbd_client(const std::string &serverName, const std::string &serviceName);

	// return singleton instance
	static ComponentRTABSlam* instance()
	{
		if(_componentRTABSlam == 0) {
			_componentRTABSlam = new ComponentRTABSlam();
		}
		return _componentRTABSlam;
	}
	
	static void deleteInstance() {
		if(_componentRTABSlam != 0) {
			delete _componentRTABSlam;
		}
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct LocalizationThread_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} localizationThread;
		struct MappingThread_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} mappingThread;
		
		//--- upcall parameter ---
		
		//--- server port parameter ---
	
		//--- client port parameter ---
		struct BaseStatePushNewestClient_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} baseStatePushNewestClient;
		struct Rgbd_client_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} rgbd_client;
		
	} connections;
};
#endif
