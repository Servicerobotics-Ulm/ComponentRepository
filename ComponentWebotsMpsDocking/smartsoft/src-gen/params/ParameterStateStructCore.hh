//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <list>
#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter Webots
		 */
		class WebotsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double maxDistanceToDockingPoint;
			std::string robotName;
			std::list<std::string> stationName;
		
		public:
			// default constructor
			WebotsType() {
				maxDistanceToDockingPoint = 2.0;
				robotName = "MpsDocking";
				stationName.push_back("MPS0");
				stationName.push_back("MPS1");
				stationName.push_back("MPS2");
				stationName.push_back("MPS3");
			}
		
			/**
			 * here are the public getters
			 */
			inline double getMaxDistanceToDockingPoint() const { return maxDistanceToDockingPoint; }
			inline std::string getRobotName() const { return robotName; }
			inline std::list<std::string> getStationName() const { return stationName; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Webots(";
				os << "maxDistanceToDockingPoint = " << maxDistanceToDockingPoint; os << ", ";
				os << "robotName = " << robotName; os << ", ";
				os << "stationName = [";
				for(auto stationNameIt = stationName.begin(); stationNameIt != stationName.end(); stationNameIt++)
				{
					if(stationNameIt != stationName.begin()) {
						os << ", ";
					}
					os << *stationNameIt;
				}
				os << "]";
				os << ")\n";
			}
			
		}; // end class WebotsType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	WebotsType Webots;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	WebotsType getWebots() const {
		return Webots;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		Webots.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["Webots"] = nlohmann::json {
			{"maxDistanceToDockingPoint" , getWebots().getMaxDistanceToDockingPoint()},
			{"robotName" , getWebots().getRobotName()},
			{"stationName" , getWebots().getStationName()}
		};
	
		
		return param.dump();
	}
};

#endif
