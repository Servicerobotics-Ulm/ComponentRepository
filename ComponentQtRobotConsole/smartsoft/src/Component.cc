//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------


//--------------------------------------------------------------------------
//BSD 3-Clause License
//
//  Copyright (C) Servicerobotics Ulm
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm
//  Germany
//  All rights reserved.
//
//  Author: Nayabrasul Shaik
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions are met:
//
//* Redistributions of source code must retain the above copyright notice, this
//  list of conditions and the following disclaimer.
//
//* Redistributions in binary form must reproduce the above copyright notice,
//  this list of conditions and the following disclaimer in the documentation
//  and/or other materials provided with the distribution.
//
//* Neither the name of the copyright holder nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//--------------------------------------------------------------------------


#include <Component.hh>

Component::Component(std::string n): name(n) {
	current_state ="Unknown";
	has_parammeter_slave = false;
	has_state_slave = false;
}

Component::Component()
{
	current_state ="Unknown";
	has_parammeter_slave = false;
	has_state_slave = false;
	name = "notset";
}

Component::~Component() {
}
void Component::set_state(std::string new_state)
{
	if(current_state != new_state)
		current_state = new_state;
}
std::string Component::get_state()
{
	return current_state;
}

void Component::add_state(std::string new_state)
{
	states_list.push_back(QString::fromStdString(new_state));

}
std::string Component::get_name()
{
return name;
}

void Component::set_name(std::string& comp_name)
{
	name = comp_name;
}

QStringList Component::get_stateList()
{
//	QVariant var;
//	    var.setValue(states_list);
//	    return var;
	return states_list;
}

bool Component::is_current_state(QString state)
{
	return (current_state == state.toStdString());
}

void Component::set_has_state_slave(bool value)
{
	has_state_slave = value;
}
bool Component::get_has_state_slave()
{
    return has_state_slave;
}

void Component::set_has_parammeter_slave(bool value)
{
	has_parammeter_slave = value;
}

bool Component::get_has_parammeter_slave()
{
	return has_parammeter_slave;
}
