//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "SmartStateChangeHandler.hh"
#include "ComponentRosDock.hh"

#include <iostream>

// Called when a substate is entered
void SmartStateChangeHandler::handleEnterState(const std::string & substate) throw()
{
	// change this code to your needs !!!
	std::cout << "enter state: " << substate << std::endl;
}

// Called when a substate is left
void SmartStateChangeHandler::handleQuitState(const std::string & substate) throw()
{
	// change this code to your needs !!!
	std::cout << "quit state: " << substate << std::endl;

	// restart Activities, because they're being stopped after successful (un)dock
	if (substate == "dock")
	{
		std::cout << "restart dock " << std::endl;
		CommNavigationObjects::CommDockingEventState eventState;
		eventState.setNewState(CommNavigationObjects::DockingEventType::DOCKING_NOT_DONE);
		COMP->robotDockingEventServiceOut->put(eventState);

		COMP->dockActivity->start();
	}
	if (substate == "unDock")
	{
		std::cout << "restart undock " << std::endl;
		CommNavigationObjects::CommDockingEventState eventState;
		eventState.setNewState(CommNavigationObjects::DockingEventType::UN_DOCKING_NOT_DONE);
		COMP->robotDockingEventServiceOut->put(eventState);

		COMP->undockActivity->start();
	}
}
