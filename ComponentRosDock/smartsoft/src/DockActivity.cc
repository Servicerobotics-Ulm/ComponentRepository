//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "DockActivity.hh"
#include "ComponentRosDock.hh"

#include <iostream>

DockActivity::DockActivity(SmartACE::SmartComponent *comp) 
:	DockActivityCore(comp)
{
	std::cout << "constructor DockActivity\n";
}
DockActivity::~DockActivity() 
{
	std::cout << "destructor DockActivity\n";
}

void DockActivity::dock()
{
	std::unique_lock<std::mutex> lck (mtx);

	std_msgs::String dock_goal;
	dock_goal.data = "station_charger";

	std::cout << "publishing dock goal: " << dock_goal << std::endl;
	COMP -> rosPorts -> dock_action_goal.publish(dock_goal);
	docking = true;
}

void DockActivity::dock_action_result_cb(const std_msgs::String::ConstPtr &msg)
{
	 std::unique_lock<std::mutex> lck (mtx);

	std::string::size_type loc = msg->data.find( "successful", 0 );
	if( loc != std::string::npos )
	{
		std::cout << "docking succeeded: " << msg->data << std::endl;

		CommNavigationObjects::CommDockingEventState eventState;
		eventState.setNewState(CommNavigationObjects::DockingEventType::DOCKING_DONE);
		COMP->robotDockingEventServiceOut->put(eventState);
	}
	else
	{
		std::cout << "docking did not succeed: " << msg->data << std::endl;

		CommNavigationObjects::CommDockingEventState eventState;
		eventState.setNewState(CommNavigationObjects::DockingEventType::DOCKING_ERROR);
		COMP->robotDockingEventServiceOut->put(eventState);
	}

	this->stop();
	std::cout << "docking false" << std::endl;
	docking = false;
}

void DockActivity::on_BaseStateServiceIn(const CommBasicObjects::CommBaseState &input)
{
	// upcall triggered from InputPort BaseStateServiceIn
	// - use a local mutex here, because this upcal is called asynchroneously from outside of this task
	// - do not use longer blocking calls here since this upcall blocks the InputPort BaseStateServiceIn
	// - if you need to implement a long-running procedure, do so within the on_execute() method and in
	//   there, use the method baseStateServiceInGetUpdate(input) to get a copy of the input object
	//std::cout << "base state in: " << input << std::endl;

}

int DockActivity::on_entry()
{
	std::cout << "entry DockActivity\n";

	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int DockActivity::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
//	Smart::StatusCode status;
//	CommBasicObjects::CommBaseState baseStateServiceInObject;
//	status = this->baseStateServiceInGetUpdate(baseStateServiceInObject);
//	if(status != Smart::SMART_OK) {
//		std::cerr << status << std::endl;
//		 return 0;
//	} else {
//		std::cout << "received: " << baseStateServiceInObject << std::endl;
//	}

	if (!docking)
	{
		std::cout << "Dock! " << std::endl;
		dock();
	}
	else
		std::cout << "Waiting for docking finished." << std::endl;
	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int DockActivity::on_exit()
{
	std::cout << "exit DockActivity\n";

	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
