//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter scanner
		 */
		class scannerType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double azimuth;
			double elevation;
			bool on_turret;
			double roll;
			bool verbose;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			scannerType() {
				azimuth = 0;
				elevation = 0;
				on_turret = false;
				roll = 0;
				verbose = true;
				x = 190;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAzimuth() const { return azimuth; }
			inline double getElevation() const { return elevation; }
			inline bool getOn_turret() const { return on_turret; }
			inline double getRoll() const { return roll; }
			inline bool getVerbose() const { return verbose; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "scanner(";
				os << "azimuth = " << azimuth << ", ";
				os << "elevation = " << elevation << ", ";
				os << "on_turret = " << on_turret << ", ";
				os << "roll = " << roll << ", ";
				os << "verbose = " << verbose << ", ";
				os << "x = " << x << ", ";
				os << "y = " << y << ", ";
				os << "z = " << z << ", ";
				os << ")\n";
			}
			
		}; // end class scannerType
		
		/**
		 * Definition of Parameter laser_generator
		 */
		class laser_generatorType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double angle_resolution;
			double floor_threshold_distance;
			unsigned int generationPeriodMilliSec;
			unsigned int generationPeriodSec;
			unsigned int max_range;
			unsigned int min_range;
			unsigned char rgbd_source;
			double vertical_fov;
		
		public:
			// default constructor
			laser_generatorType() {
				angle_resolution = 0.5;
				floor_threshold_distance = 0.05;
				generationPeriodMilliSec = 200;
				generationPeriodSec = 0;
				max_range = 10000;
				min_range = 280;
				rgbd_source = 0;
				vertical_fov = 0.0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getAngle_resolution() const { return angle_resolution; }
			inline double getFloor_threshold_distance() const { return floor_threshold_distance; }
			inline unsigned int getGenerationPeriodMilliSec() const { return generationPeriodMilliSec; }
			inline unsigned int getGenerationPeriodSec() const { return generationPeriodSec; }
			inline unsigned int getMax_range() const { return max_range; }
			inline unsigned int getMin_range() const { return min_range; }
			inline unsigned char getRgbd_source() const { return rgbd_source; }
			inline double getVertical_fov() const { return vertical_fov; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "laser_generator(";
				os << "angle_resolution = " << angle_resolution << ", ";
				os << "floor_threshold_distance = " << floor_threshold_distance << ", ";
				os << "generationPeriodMilliSec = " << generationPeriodMilliSec << ", ";
				os << "generationPeriodSec = " << generationPeriodSec << ", ";
				os << "max_range = " << max_range << ", ";
				os << "min_range = " << min_range << ", ";
				os << "rgbd_source = " << rgbd_source << ", ";
				os << "vertical_fov = " << vertical_fov << ", ";
				os << ")\n";
			}
			
		}; // end class laser_generatorType
		
		/**
		 * Definition of Parameter base_manipulator
		 */
		class base_manipulatorType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double base_a;
			bool on_base;
			double steer_a;
			double turret_a;
			int x;
			int y;
			int z;
		
		public:
			// default constructor
			base_manipulatorType() {
				base_a = 0;
				on_base = true;
				steer_a = 0;
				turret_a = 0;
				x = 0;
				y = 0;
				z = 0;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getBase_a() const { return base_a; }
			inline bool getOn_base() const { return on_base; }
			inline double getSteer_a() const { return steer_a; }
			inline double getTurret_a() const { return turret_a; }
			inline int getX() const { return x; }
			inline int getY() const { return y; }
			inline int getZ() const { return z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "base_manipulator(";
				os << "base_a = " << base_a << ", ";
				os << "on_base = " << on_base << ", ";
				os << "steer_a = " << steer_a << ", ";
				os << "turret_a = " << turret_a << ", ";
				os << "x = " << x << ", ";
				os << "y = " << y << ", ";
				os << "z = " << z << ", ";
				os << ")\n";
			}
			
		}; // end class base_manipulatorType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	base_manipulatorType base_manipulator;
	laser_generatorType laser_generator;
	scannerType scanner;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	base_manipulatorType getBase_manipulator() const {
		return base_manipulator;
	}
	laser_generatorType getLaser_generator() const {
		return laser_generator;
	}
	scannerType getScanner() const {
		return scanner;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		base_manipulator.to_ostream(os);
		laser_generator.to_ostream(os);
		scanner.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["base_manipulator"] = nlohmann::json {
			{"base_a" , getBase_manipulator().getBase_a()},
			{"on_base" , getBase_manipulator().getOn_base()},
			{"steer_a" , getBase_manipulator().getSteer_a()},
			{"turret_a" , getBase_manipulator().getTurret_a()},
			{"x" , getBase_manipulator().getX()},
			{"y" , getBase_manipulator().getY()},
			{"z" , getBase_manipulator().getZ()}
		};
		param["laser_generator"] = nlohmann::json {
			{"angle_resolution" , getLaser_generator().getAngle_resolution()},
			{"floor_threshold_distance" , getLaser_generator().getFloor_threshold_distance()},
			{"generationPeriodMilliSec" , getLaser_generator().getGenerationPeriodMilliSec()},
			{"generationPeriodSec" , getLaser_generator().getGenerationPeriodSec()},
			{"max_range" , getLaser_generator().getMax_range()},
			{"min_range" , getLaser_generator().getMin_range()},
			{"rgbd_source" , getLaser_generator().getRgbd_source()},
			{"vertical_fov" , getLaser_generator().getVertical_fov()}
		};
		param["scanner"] = nlohmann::json {
			{"azimuth" , getScanner().getAzimuth()},
			{"elevation" , getScanner().getElevation()},
			{"on_turret" , getScanner().getOn_turret()},
			{"roll" , getScanner().getRoll()},
			{"verbose" , getScanner().getVerbose()},
			{"x" , getScanner().getX()},
			{"y" , getScanner().getY()},
			{"z" , getScanner().getZ()}
		};
	
		
		return param.dump();
	}
};

#endif
