//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _COMPONENTFILEPROVIDER_HH
#define _COMPONENTFILEPROVIDER_HH

#include <map>
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "ComponentFileProviderCore.hh"

#include "ComponentFileProviderPortFactoryInterface.hh"
#include "ComponentFileProviderExtension.hh"

// forward declarations
class ComponentFileProviderPortFactoryInterface;
class ComponentFileProviderExtension;

// includes for PlainOpcUaComponentFileProviderExtension
// include plain OPC UA device clients
// include plain OPC UA status servers


// include communication objects
#include <CommBasicObjects/CommFileReadAnswer.hh>
#include <CommBasicObjects/CommFileReadAnswerACE.hh>
#include <CommBasicObjects/CommFileReadRequest.hh>
#include <CommBasicObjects/CommFileReadRequestACE.hh>
#include <CommBasicObjects/CommFileWriteAnswer.hh>
#include <CommBasicObjects/CommFileWriteAnswerACE.hh>
#include <CommBasicObjects/CommFileWriteRequest.hh>
#include <CommBasicObjects/CommFileWriteRequestACE.hh>

// include tasks
// include UpcallManagers and InputCollectors

// include input-handler(s)
// include request-handler(s)
#include "FileReadQueryAnswHandler.hh"
#include "FileWriteQueryAnswHandler.hh"
// output port wrappers

// include handler
#include "CompHandler.hh"

#include "ParameterStateStruct.hh"
#include "ParameterUpdateHandler.hh"

#include "SmartStateChangeHandler.hh"
#include "StateActivityManager.hh"


#define COMP ComponentFileProvider::instance()

class ComponentFileProvider : public ComponentFileProviderCore {
private:
	static ComponentFileProvider *_componentFileProvider;
	
	// constructor
	ComponentFileProvider();
	
	// copy-constructor
	ComponentFileProvider(const ComponentFileProvider& cc);
	
	// destructor
	~ComponentFileProvider() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	// helper method that maps a string-name to an according TaskTriggerSubject
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
	// internal map storing the different port-creation factories (that internally map to specific middleware implementations)
	std::map<std::string, ComponentFileProviderPortFactoryInterface*> portFactoryRegistry;
	
	// internal map storing various extensions of this component class
	std::map<std::string, ComponentFileProviderExtension*> componentExtensionRegistry;
	
public:
	ParameterStateStruct getGlobalState() const
	{
		return paramHandler.getGlobalState();
	}
	
	ParameterStateStruct getParameters() const
	{
		return paramHandler.getGlobalState();
	}
	
	// define tasks
	
	// define input-ports
	
	// define request-ports
	
	// define input-handler
	
	// define output-ports
	
	// define answer-ports
	Smart::IQueryServerPattern<CommBasicObjects::CommFileReadRequest, CommBasicObjects::CommFileReadAnswer> *fileReadQueryAnsw;
	Smart::QueryServerTaskTrigger<CommBasicObjects::CommFileReadRequest, CommBasicObjects::CommFileReadAnswer> *fileReadQueryAnswInputTaskTrigger;
	Smart::IQueryServerPattern<CommBasicObjects::CommFileWriteRequest, CommBasicObjects::CommFileWriteAnswer> *fileWriteQueryAnsw;
	Smart::QueryServerTaskTrigger<CommBasicObjects::CommFileWriteRequest, CommBasicObjects::CommFileWriteAnswer> *fileWriteQueryAnswInputTaskTrigger;
	
	// define request-handlers
	FileReadQueryAnswHandler *fileReadQueryAnswHandler;
	FileWriteQueryAnswHandler *fileWriteQueryAnswHandler;
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	StateActivityManager *stateActivityManager;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	ParamUpdateHandler paramHandler;
	SmartACE::ParameterSlave *param;
	
	
	/// this method is used to register different PortFactory classes (one for each supported middleware framework)
	void addPortFactory(const std::string &name, ComponentFileProviderPortFactoryInterface *portFactory);
	
	SmartACE::SmartComponent* getComponentImpl();
	
	/// this method is used to register different component-extension classes
	void addExtension(ComponentFileProviderExtension *extension);
	
	/// this method allows to access the registered component-extensions (automatically converting to the actuall implementation type)
	template <typename T>
	T* getExtension(const std::string &name) {
		auto it = componentExtensionRegistry.find(name);
		if(it != componentExtensionRegistry.end()) {
			return dynamic_cast<T*>(it->second);
		}
		return 0;
	}
	
	/// initialize component's internal members
	void init(int argc, char *argv[]);
	
	/// execute the component's infrastructure
	void run();
	
	/// clean-up component's resources
	void fini();
	
	/// call this method to set the overall component into the Alive state (i.e. component is then ready to operate)
	void setStartupFinished();
	
	/// connect all component's client ports
	Smart::StatusCode connectAndStartAllServices();
	
	/// start all assocuated Activities
	void startAllTasks();
	
	/// start all associated timers
	void startAllTimers();
	

	// return singleton instance
	static ComponentFileProvider* instance()
	{
		if(_componentFileProvider == 0) {
			_componentFileProvider = new ComponentFileProvider();
		}
		return _componentFileProvider;
	}
	
	static void deleteInstance() {
		if(_componentFileProvider != 0) {
			delete _componentFileProvider;
		}
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		
		//--- upcall parameter ---
		
		//--- server port parameter ---
		struct FileReadQueryAnsw_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} fileReadQueryAnsw;
		struct FileWriteQueryAnsw_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} fileWriteQueryAnsw;
	
		//--- client port parameter ---
		
	} connections;
};
#endif
