//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "RobotTask.hh"
#include "ComponentLaserObstacleAvoid.hh"
#include "SimpleAvoid.hh"
#include <iostream>

RobotTask::RobotTask(SmartACE::SmartComponent *comp) 
:	RobotTaskCore(comp)
{
	std::cout << "constructor RobotTask\n";
}
RobotTask::~RobotTask() 
{
	std::cout << "destructor RobotTask\n";
}


void RobotTask::on_LaserServiceIn(const CommBasicObjects::CommMobileLaserScan &input)
{
	// upcall triggered from InputPort LaserServiceIn
	// - use a local mutex here, because this upcal is called asynchroneously from outside of this task
	// - do not use longer blocking calls here since this upcall blocks the InputPort LaserServiceIn
	// - if you need to implement a long-running procedure, do so within the on_execute() method and in
	//   there, use the method laserServiceInGetUpdate(input) to get a copy of the input object
}

int RobotTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}

int RobotTask::on_execute()
{

	Smart::StatusCode status;

	// create a laser communication object and read it from the input port
	CommBasicObjects::CommMobileLaserScan laserServiceInObject;
	status = this->laserServiceInGetUpdate(laserServiceInObject);

	if(status != Smart::SMART_OK) {
		std::cerr << "Getting laser scan failed: " << status << std::endl;
		sleep(2);
		return 0;
	}

	// we got the laser scan and we now call our algorithm
	// it takes the laser scan as input and calculates translational and rotational velocities
	double translational_velocity =0;
	double rotational_velocity    =0;

	SimpleAvoid::runCycle(laserServiceInObject,translational_velocity,rotational_velocity);

	// we now fill the communication object for the velocities and
	// we write the communication object to the output port
	CommBasicObjects::CommNavigationVelocity comNavVel;
	Smart::StatusCode status_nav;

	comNavVel.set_vX(translational_velocity, 0.001);
	comNavVel.set_omega(rotational_velocity);

	std::cout << "translational v : " << translational_velocity	<< std::endl;
	std::cout << "rotational v    : " << rotational_velocity	<< std::endl;

	status_nav = this->navigationVelocityServiceOutPut(comNavVel);

	if(status_nav != Smart::SMART_OK) {
		std::cerr << status << std::endl;
		std::cout << "Some Error in the Conection as status is not ok " << std::endl;
		sleep(1);
	} else {
		std::cout << "Updating Velocity " << comNavVel << std::endl;
	}

	return 0;
}


int RobotTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
