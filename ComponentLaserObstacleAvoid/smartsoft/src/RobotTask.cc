//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "RobotTask.hh"
#include "ComponentLaserObstacleAvoid.hh"
#include "SimpleAvoid.hh"
#include <iostream>

RobotTask::RobotTask(SmartACE::SmartComponent *comp) 
:	RobotTaskCore(comp)
{
	std::cout << "constructor RobotTask\n";
}
RobotTask::~RobotTask() 
{
	std::cout << "destructor RobotTask\n";
}


void RobotTask::on_LaserServiceIn(const CommBasicObjects::CommMobileLaserScan &input)
{
	// upcall triggered from InputPort LaserServiceIn
	// - use a local mutex here, because this upcal is called asynchroneously from outside of this task
	// - do not use longer blocking calls here since this upcall blocks the InputPort LaserServiceIn
	// - if you need to implement a long-running procedure, do so within the on_execute() method and in
	//   there, use the method laserServiceInGetUpdate(input) to get a copy of the input object
}

int RobotTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}

int RobotTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel

	Smart::StatusCode status;

	/////////////////////////////////////////////
	// Get input data and calculate movement

	// get laser scan:
	CommBasicObjects::CommMobileLaserScan laserScan;
	status = this->laserServiceInGetUpdate(laserScan);

	if(status != Smart::SMART_OK) {
		std::cerr << "Getting laser scan failed: " << status << std::endl;
		sleep(2);
		return 0;
	}

	std::cout << "Laser scan received." << std::endl;


	// process scan
	double velocity = 0.0;
	double turnrate = 0.0;
	SimpleAvoid::runCycle(laserScan, velocity, turnrate);




	/////////////////////////////////////////////
	// Now Provide result to service port.

	// First fill the communication object
	CommBasicObjects::CommNavigationVelocity navigationVelocity;
	navigationVelocity.set_vX(velocity*0.5, 0.001);
	navigationVelocity.set_omega(turnrate * 0.0575);

	std::cout << "Velocity : " << velocity	<< std::endl;
	std::cout << "turnrate :" << turnrate	<< std::endl;

	// Provide result to output port, thereby command the robot:
	status = this->navigationVelocityServiceOutPut(navigationVelocity);

	if(status != Smart::SMART_OK) {
		std::cerr << status << std::endl;
		std::cout << "Error providing navigation velocity: " << status << std::endl;
		sleep(1);
	} else {
		std::cout << "Sent navigation velocity " << navigationVelocity << std::endl;
	}


	return 0;
}


int RobotTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
