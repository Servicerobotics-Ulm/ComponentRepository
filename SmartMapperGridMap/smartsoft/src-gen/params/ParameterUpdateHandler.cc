//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "SmartMapperGridMap.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;

	std::string tag = request.getTag();
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.CUREMPTY")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		std::string temp_mapmode = "";
		if(request.getString("1", temp_mapmode) == 0) {
			commitState.CommNavigationObjects.MapperParams.CUREMPTY.mapmode = temp_mapmode;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.CURLOAD")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_CURLOADCore(
			temp_filename
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.CURLOADLTM")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_CURLOADLTMCore(
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.CURLTM")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		std::string temp_preoccupation = "";
		if(request.getString("1", temp_preoccupation) == 0) {
			commitState.CommNavigationObjects.MapperParams.CURLTM.preoccupation = temp_preoccupation;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_threshold = 0;
		if(request.getInteger("2", temp_threshold) == 0) {
			commitState.CommNavigationObjects.MapperParams.CURLTM.threshold = temp_threshold;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.CURPARAMETER")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_xsize = 0;
		if(request.getInteger("1", temp_xsize) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_ysize = 0;
		if(request.getInteger("2", temp_ysize) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_xpos = 0;
		if(request.getInteger("3", temp_xpos) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_ypos = 0;
		if(request.getInteger("4", temp_ypos) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_id = 0;
		if(request.getInteger("5", temp_id) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_CURPARAMETERCore(
			temp_xsize, 
			temp_ysize, 
			temp_xpos, 
			temp_ypos, 
			temp_id
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.CURSAVE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_CURSAVECore(
			temp_filename
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.CURSAVEXPM")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_CURSAVEXPMCore(
			temp_filename
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.LTMINITIALIZE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_value = 0;
		if(request.getInteger("1", temp_value) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_LTMINITIALIZECore(
			temp_value
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.LTMLOAD")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_LTMLOADCore(
			temp_filename
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.LTMLOADIEEESTD")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_LTMLOADIEEESTDCore(
			temp_filename
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.LTMLOADYAML")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_LTMLOADYAMLCore(
			temp_filename
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.LTMPARAMETER")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_xsize = 0;
		if(request.getInteger("1", temp_xsize) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_ysize = 0;
		if(request.getInteger("2", temp_ysize) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_xpos = 0;
		if(request.getInteger("3", temp_xpos) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_ypos = 0;
		if(request.getInteger("4", temp_ypos) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		int temp_id = 0;
		if(request.getInteger("5", temp_id) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_LTMPARAMETERCore(
			temp_xsize, 
			temp_ysize, 
			temp_xpos, 
			temp_ypos, 
			temp_id
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.LTMSAVE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_LTMSAVECore(
			temp_filename
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.LTMSAVEIEEESTD")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_LTMSAVEIEEESTDCore(
			temp_filename
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.LTMSAVEXPM")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_LTMSAVEXPMCore(
			temp_filename
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.LTMSAVEYAMLPGM")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_LTMSAVEYAMLPGMCore(
			temp_filename
			);
		}
	}
	else if (tag == "COMMNAVIGATIONOBJECTS.MAPPERPARAMS.LTMSAVEYAMLPPM")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_filename = "";
		if(request.getString("1", temp_filename) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommNavigationObjects_MapperParams_LTMSAVEYAMLPPMCore(
			temp_filename
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter CurrentMap
		if(parameter.getString("CurrentMap", "growing", commitState.CurrentMap.growing))
		{
			globalState.CurrentMap.growing = commitState.CurrentMap.growing;
		}
		if(parameter.getInteger("CurrentMap", "id", commitState.CurrentMap.id))
		{
			globalState.CurrentMap.id = commitState.CurrentMap.id;
		}
		if(parameter.getInteger("CurrentMap", "interval", commitState.CurrentMap.interval))
		{
			globalState.CurrentMap.interval = commitState.CurrentMap.interval;
		}
		if(parameter.getInteger("CurrentMap", "xpos", commitState.CurrentMap.xpos))
		{
			globalState.CurrentMap.xpos = commitState.CurrentMap.xpos;
		}
		if(parameter.getInteger("CurrentMap", "xsize", commitState.CurrentMap.xsize))
		{
			globalState.CurrentMap.xsize = commitState.CurrentMap.xsize;
		}
		if(parameter.getInteger("CurrentMap", "ypos", commitState.CurrentMap.ypos))
		{
			globalState.CurrentMap.ypos = commitState.CurrentMap.ypos;
		}
		if(parameter.getInteger("CurrentMap", "ysize", commitState.CurrentMap.ysize))
		{
			globalState.CurrentMap.ysize = commitState.CurrentMap.ysize;
		}
		// parameter General
		if(parameter.getInteger("General", "cellsize", commitState.General.cellsize))
		{
			globalState.General.cellsize = commitState.General.cellsize;
		}
		if(parameter.getBoolean("General", "connectLaser", commitState.General.connectLaser))
		{
			globalState.General.connectLaser = commitState.General.connectLaser;
		}
		if(parameter.getString("General", "mapDataDir", commitState.General.mapDataDir))
		{
			globalState.General.mapDataDir = commitState.General.mapDataDir;
		}
		if(parameter.getBoolean("General", "verbose", commitState.General.verbose))
		{
			globalState.General.verbose = commitState.General.verbose;
		}
		// parameter LtmMap
		if(parameter.getInteger("LtmMap", "id", commitState.LtmMap.id))
		{
			globalState.LtmMap.id = commitState.LtmMap.id;
		}
		if(parameter.getInteger("LtmMap", "kalman", commitState.LtmMap.kalman))
		{
			globalState.LtmMap.kalman = commitState.LtmMap.kalman;
		}
		if(parameter.getInteger("LtmMap", "xpos", commitState.LtmMap.xpos))
		{
			globalState.LtmMap.xpos = commitState.LtmMap.xpos;
		}
		if(parameter.getInteger("LtmMap", "xsize", commitState.LtmMap.xsize))
		{
			globalState.LtmMap.xsize = commitState.LtmMap.xsize;
		}
		if(parameter.getInteger("LtmMap", "ypos", commitState.LtmMap.ypos))
		{
			globalState.LtmMap.ypos = commitState.LtmMap.ypos;
		}
		if(parameter.getInteger("LtmMap", "ysize", commitState.LtmMap.ysize))
		{
			globalState.LtmMap.ysize = commitState.LtmMap.ysize;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//
		// parameter CommNavigationObjects.MapperParams.CUREMPTY
		std::string temp_CommNavigationObjects_MapperParams_CUREMPTY_mapmode = "";
		if(parameter.getString("CommNavigationObjects.MapperParams.CUREMPTY", "mapmode", temp_CommNavigationObjects_MapperParams_CUREMPTY_mapmode))
		{
			commitState.CommNavigationObjects.MapperParams.CUREMPTY.mapmode = temp_CommNavigationObjects_MapperParams_CUREMPTY_mapmode;
			globalState.CommNavigationObjects.MapperParams.CUREMPTY.mapmode = commitState.CommNavigationObjects.MapperParams.CUREMPTY.mapmode;
		}
		// parameter CommNavigationObjects.MapperParams.CURLTM
		std::string temp_CommNavigationObjects_MapperParams_CURLTM_preoccupation = "";
		if(parameter.getString("CommNavigationObjects.MapperParams.CURLTM", "preoccupation", temp_CommNavigationObjects_MapperParams_CURLTM_preoccupation))
		{
			commitState.CommNavigationObjects.MapperParams.CURLTM.preoccupation = temp_CommNavigationObjects_MapperParams_CURLTM_preoccupation;
			globalState.CommNavigationObjects.MapperParams.CURLTM.preoccupation = commitState.CommNavigationObjects.MapperParams.CURLTM.preoccupation;
		}
		if(parameter.getInteger("CommNavigationObjects.MapperParams.CURLTM", "threshold", commitState.CommNavigationObjects.MapperParams.CURLTM.threshold))
		{
			globalState.CommNavigationObjects.MapperParams.CURLTM.threshold = commitState.CommNavigationObjects.MapperParams.CURLTM.threshold;
		}

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
