//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <list>
#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter CurrentMap
		 */
		class CurrentMapType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string growing;
			unsigned int id;
			unsigned int interval;
			int xpos;
			unsigned int xsize;
			int ypos;
			unsigned int ysize;
		
		public:
			// default constructor
			CurrentMapType() {
				growing = "star16";
				id = 0;
				interval = 10;
				xpos = -10000;
				xsize = 20000;
				ypos = -10000;
				ysize = 20000;
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getGrowing() const { return growing; }
			inline unsigned int getId() const { return id; }
			inline unsigned int getInterval() const { return interval; }
			inline int getXpos() const { return xpos; }
			inline unsigned int getXsize() const { return xsize; }
			inline int getYpos() const { return ypos; }
			inline unsigned int getYsize() const { return ysize; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "CurrentMap(";
				os << "growing = " << growing; os << ", ";
				os << "id = " << id; os << ", ";
				os << "interval = " << interval; os << ", ";
				os << "xpos = " << xpos; os << ", ";
				os << "xsize = " << xsize; os << ", ";
				os << "ypos = " << ypos; os << ", ";
				os << "ysize = " << ysize;
				os << ")\n";
			}
			
		}; // end class CurrentMapType
		
		/**
		 * Definition of Parameter LtmMap
		 */
		class LtmMapType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			unsigned int id;
			int kalman;
			int xpos;
			unsigned int xsize;
			int ypos;
			unsigned int ysize;
		
		public:
			// default constructor
			LtmMapType() {
				id = 0;
				kalman = 100;
				xpos = -10000;
				xsize = 20000;
				ypos = -10000;
				ysize = 20000;
			}
		
			/**
			 * here are the public getters
			 */
			inline unsigned int getId() const { return id; }
			inline int getKalman() const { return kalman; }
			inline int getXpos() const { return xpos; }
			inline unsigned int getXsize() const { return xsize; }
			inline int getYpos() const { return ypos; }
			inline unsigned int getYsize() const { return ysize; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "LtmMap(";
				os << "id = " << id; os << ", ";
				os << "kalman = " << kalman; os << ", ";
				os << "xpos = " << xpos; os << ", ";
				os << "xsize = " << xsize; os << ", ";
				os << "ypos = " << ypos; os << ", ";
				os << "ysize = " << ysize;
				os << ")\n";
			}
			
		}; // end class LtmMapType
		
		/**
		 * Definition of Parameter General
		 */
		class GeneralType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			unsigned int cellsize;
			bool connectLaser;
			std::string mapDataDir;
			bool verbose;
		
		public:
			// default constructor
			GeneralType() {
				cellsize = 50;
				connectLaser = true;
				mapDataDir = "data/maps/";
				verbose = false;
			}
		
			/**
			 * here are the public getters
			 */
			inline unsigned int getCellsize() const { return cellsize; }
			inline bool getConnectLaser() const { return connectLaser; }
			inline std::string getMapDataDir() const { return mapDataDir; }
			inline bool getVerbose() const { return verbose; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "General(";
				os << "cellsize = " << cellsize; os << ", ";
				os << "connectLaser = " << connectLaser; os << ", ";
				os << "mapDataDir = " << mapDataDir; os << ", ";
				os << "verbose = " << verbose;
				os << ")\n";
			}
			
		}; // end class GeneralType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommNavigationObjects
		 */
		class CommNavigationObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet MapperParams
			 */
			class MapperParamsType {
				friend class ParamUpdateHandler;
				public:
				/**
				 * Definition of Parameter CUREMPTY
				 */
				class CUREMPTYType {
					friend class ParamUpdateHandler;
					public:
					/**
					 * Wrapper class for Enum mapmode
					 */
					class mapmodeType {
					public:
						enum ENUM_mapmode {
							ENUM_VALUE_UNDEFINED = 0,
							ACCUMULATE = 1,
							EMPTY = 2
						};
						
						// default constructor
						mapmodeType() { 
							value = ENUM_VALUE_UNDEFINED;
						}
						
						// copy constructor for enum type
						mapmodeType(ENUM_mapmode e) {
							value = e;
						}
						
						// copy constructor for String type
						mapmodeType(const std::string &literal) {
							from_string(literal);
						}
						
						// from_string assignment operator
						mapmodeType& operator = (const std::string &literal) {
							from_string(literal);
							return *this;
						}
						
						// ENUM operator
						operator ENUM_mapmode() const {
							return value;
						}
						
						// String operator
						operator std::string() const {
							return to_string();
						}
						
						// compare operator
						bool operator == (const ENUM_mapmode t) const {
							return this->value == t;
						}
						
						std::string to_string() const {
							std::string result = "";
							switch (value) {
								case ACCUMULATE:
									result = "ACCUMULATE";
									break;
								case EMPTY:
									result = "EMPTY";
									break;
								default:
									result = "ENUM_VALUE_UNDEFINED";
									break;
							};
							return result;
						}
						
						void from_string(const std::string &literal) {
							if(literal == "ACCUMULATE") {
								value = ACCUMULATE;
							} else if(literal == "EMPTY") {
								value = EMPTY;
							} else {
								value = ENUM_VALUE_UNDEFINED;
							}
						}
						
						// helper method to easily implement output stream
						void to_ostream(std::ostream &os = std::cout) const {
							os << to_string();
						}
					private:
						ENUM_mapmode value;
					};
					
					
				
				protected:
					/**
					 * here are the member definitions
					 */
					CUREMPTYType::mapmodeType mapmode;
					
				public:
					// default constructor
					CUREMPTYType() {
						mapmode = CUREMPTYType::mapmodeType::ACCUMULATE;
					}
					
					/**
					 * here are the getter methods
					 */
					inline CUREMPTYType::mapmodeType getMapmode() const { return mapmode; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tCUREMPTY(";
						os << "mapmode = " << mapmode;
						os << ")\n";
					}
					
				}; // end of parameter class CUREMPTYType
				
				/**
				 * Definition of Parameter CURLTM
				 */
				class CURLTMType {
					friend class ParamUpdateHandler;
					public:
					/**
					 * Wrapper class for Enum preoccupation
					 */
					class preoccupationType {
					public:
						enum ENUM_preoccupation {
							ENUM_VALUE_UNDEFINED = 0,
							DISABLE = 1,
							ENABLE = 2
						};
						
						// default constructor
						preoccupationType() { 
							value = ENUM_VALUE_UNDEFINED;
						}
						
						// copy constructor for enum type
						preoccupationType(ENUM_preoccupation e) {
							value = e;
						}
						
						// copy constructor for String type
						preoccupationType(const std::string &literal) {
							from_string(literal);
						}
						
						// from_string assignment operator
						preoccupationType& operator = (const std::string &literal) {
							from_string(literal);
							return *this;
						}
						
						// ENUM operator
						operator ENUM_preoccupation() const {
							return value;
						}
						
						// String operator
						operator std::string() const {
							return to_string();
						}
						
						// compare operator
						bool operator == (const ENUM_preoccupation t) const {
							return this->value == t;
						}
						
						std::string to_string() const {
							std::string result = "";
							switch (value) {
								case DISABLE:
									result = "DISABLE";
									break;
								case ENABLE:
									result = "ENABLE";
									break;
								default:
									result = "ENUM_VALUE_UNDEFINED";
									break;
							};
							return result;
						}
						
						void from_string(const std::string &literal) {
							if(literal == "DISABLE") {
								value = DISABLE;
							} else if(literal == "ENABLE") {
								value = ENABLE;
							} else {
								value = ENUM_VALUE_UNDEFINED;
							}
						}
						
						// helper method to easily implement output stream
						void to_ostream(std::ostream &os = std::cout) const {
							os << to_string();
						}
					private:
						ENUM_preoccupation value;
					};
					
					
				
				protected:
					/**
					 * here are the member definitions
					 */
					CURLTMType::preoccupationType preoccupation;
					int threshold;
					
				public:
					// default constructor
					CURLTMType() {
						preoccupation = CURLTMType::preoccupationType::DISABLE;
						threshold = 20;
					}
					
					/**
					 * here are the getter methods
					 */
					inline CURLTMType::preoccupationType getPreoccupation() const { return preoccupation; }
					inline int getThreshold() const { return threshold; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tCURLTM(";
						os << "preoccupation = " << preoccupation; os << ", ";
						os << "threshold = " << threshold;
						os << ")\n";
					}
					
				}; // end of parameter class CURLTMType
				
				protected:
					/**
					 * internal members
					 */
					CUREMPTYType CUREMPTY;
					CURLTMType CURLTM;
					
				public:
					/**
					 * public getter methods
					 */
					inline CUREMPTYType getCUREMPTY() const { return CUREMPTY; }
					inline CURLTMType getCURLTM() const { return CURLTM; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "MapperParams(\n";
						CUREMPTY.to_ostream(os);
						CURLTM.to_ostream(os);
						os << ")";
					}
			}; // end of parameter-set class MapperParamsType
			
			protected:
				/**
				 * internal members
				 */
				MapperParamsType MapperParams;
			
			public:
				/**
				 * public getter methods
				 */
				inline MapperParamsType getMapperParams() const { return MapperParams; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommNavigationObjects(\n";
					MapperParams.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommNavigationObjectsType
	
protected:

	// Internal params
	CurrentMapType CurrentMap;
	GeneralType General;
	LtmMapType LtmMap;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommNavigationObjectsType CommNavigationObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommNavigationObjects = commit.getCommNavigationObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	CurrentMapType getCurrentMap() const {
		return CurrentMap;
	}
	GeneralType getGeneral() const {
		return General;
	}
	LtmMapType getLtmMap() const {
		return LtmMap;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommNavigationObjectsType getCommNavigationObjects() const {
		return CommNavigationObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		CurrentMap.to_ostream(os);
		General.to_ostream(os);
		LtmMap.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommNavigationObjects.to_ostream(os);
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["CurrentMap"] = nlohmann::json {
			{"growing" , getCurrentMap().getGrowing()},
			{"id" , getCurrentMap().getId()},
			{"interval" , getCurrentMap().getInterval()},
			{"xpos" , getCurrentMap().getXpos()},
			{"xsize" , getCurrentMap().getXsize()},
			{"ypos" , getCurrentMap().getYpos()},
			{"ysize" , getCurrentMap().getYsize()}
		};
		param["General"] = nlohmann::json {
			{"cellsize" , getGeneral().getCellsize()},
			{"connectLaser" , getGeneral().getConnectLaser()},
			{"mapDataDir" , getGeneral().getMapDataDir()},
			{"verbose" , getGeneral().getVerbose()}
		};
		param["LtmMap"] = nlohmann::json {
			{"id" , getLtmMap().getId()},
			{"kalman" , getLtmMap().getKalman()},
			{"xpos" , getLtmMap().getXpos()},
			{"xsize" , getLtmMap().getXsize()},
			{"ypos" , getLtmMap().getYpos()},
			{"ysize" , getLtmMap().getYsize()}
		};
	
		param["MapperParams"] = nlohmann::json {
			{ "CUREMPTY", {
				{"mapmode" , getCommNavigationObjects().getMapperParams().getCUREMPTY().getMapmode()}
			}},
			{ "CURLTM", {
				{"preoccupation" , getCommNavigationObjects().getMapperParams().getCURLTM().getPreoccupation()},
				{"threshold" , getCommNavigationObjects().getMapperParams().getCURLTM().getThreshold()}
			}}
		};
		
		return param.dump();
	}
};

#endif
