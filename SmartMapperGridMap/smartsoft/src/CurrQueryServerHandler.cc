//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "CurrQueryServerHandler.hh"
#include "SmartMapperGridMap.hh"

CurrQueryServerHandler::CurrQueryServerHandler(Smart::IQueryServerPattern<CommNavigationObjects::CommGridMapRequest, CommNavigationObjects::CommGridMap>* server)
:	CurrQueryServerHandlerCore(server)
{
	
}

CurrQueryServerHandler::~CurrQueryServerHandler()
{
	
}

void CurrQueryServerHandler::on_update_from(const CurMapTask* curMapTask)
{
	// update triggered from CurMapTask
	// (use a local mutex here, because this method is called from within the thread of CurMapTask)
}

void CurrQueryServerHandler::handleQuery(const Smart::QueryIdPtr &id, const CommNavigationObjects::CommGridMapRequest& request) 
{
	CommNavigationObjects::CommGridMap answer;
	
	ParameterStateStruct localState;
	CommBasicObjects::CommMobileLaserScan laserscan;
	//GridMapRequestQueueEntry   entry;

	Smart::SmartCurrentGridMap *resultMap;
	int                        offsetXmm,offsetYmm;
	unsigned int               sizeXmm,sizeYmm;
	unsigned int               curLtmThreshold,mapId;
	bool                       curLtmState;
	int                        status;
	Smart::StatusCode            stateValue;

	int local_ltm_threshold;

	// process the request depending on the module state
	stateValue = COMP->stateSlave->tryAcquire("buildcurrentmap");
	if (stateValue == Smart::SMART_OK)
	{
		// module is active, therefore generate requested map

		localState = COMP->getGlobalState();
		local_ltm_threshold = COMP->ltm_threshold;

		status = request.get_parameter(mapId,offsetXmm,offsetYmm,sizeXmm,sizeYmm,
				curLtmState,curLtmThreshold);

		resultMap = new Smart::SmartCurrentGridMap(sizeXmm,sizeYmm,
				offsetXmm,offsetYmm,
				localState.getGeneral().getCellsize(),
				COMP->growingType,
				mapId);

		if(COMP->getGlobalState().getGeneral().getVerbose() == true)
		{
			std::cout << "MAPPER: Request current Map: generate cur map\n";
			std::cout << "  sizeXmm sizeYmm      " << sizeXmm << " " << sizeYmm << "\n";
			std::cout << "  offsetXmm offsetYmm  " << offsetXmm << " " << offsetYmm << "\n";
			std::cout << "  cellSize             " << localState.getGeneral().getCellsize() << "\n";
			std::cout << "  growingType          " << COMP->growingType << "\n";
			std::cout << "  mapId                " << mapId << "\n";
		}

		// wait for the next laserscan

		Smart::StatusCode statusCode = COMP->laserServiceIn->getUpdateWait(laserscan);
		if(statusCode == Smart::SMART_UNSUBSCRIBED)
		{
			std::cout << "MAPPER: laserClient is unsubscribed (maybe is rewired) -> try to subscribe again" << std::endl;
			statusCode = COMP->laserServiceIn->subscribe();
			std::cout << "MAPPER: laserClient subscription returned with " << statusCode << std::endl;
		}

		if (statusCode==Smart::SMART_OK)
		{
			// received laser scan
	        // delete actual map for each cycle
	        status = resultMap->clearMap();

	        if (curLtmState==0)
	        {
	        	// don't use the ltm for preoccupation
	        }
	        else
	        {
	        	// use ltm for preoccupation
	        	COMP->LtmLock.acquire();
	        	status = resultMap->setLtmOccupation(local_ltm_threshold, *(COMP->ltmGridMap));
	        	COMP->LtmLock.release();
	        }

	        // now update map with current laserscan
	        status = resultMap->update(laserscan);
	        answer = (CommNavigationObjects::CommGridMap)(*resultMap);
	      }
		else
		{
			// canceled laser scan query, no current map available
	        answer = (CommNavigationObjects::CommGridMap)(*resultMap);
		}
		std::cout<<"MAPPER: Request currentmap module is active"<<std::endl;
	} // if (stateValue == Smart::SMART_OK)
	else
	{
		// module is not active
		resultMap = new Smart::SmartCurrentGridMap();
		answer = (CommNavigationObjects::CommGridMap)(*resultMap);
		std::cout<<"MAPPER: Request currentmap module is not active"<<std::endl;
	}

	//answer.set(result);
	this->server->answer(id, answer);

	// delete the map of the current request
	delete resultMap;

	// check whether one has to unlock state
	if (stateValue == Smart::SMART_OK)
	{
		// got state, therefore release
		COMP->stateSlave->release("buildcurrentmap");
	}
}
