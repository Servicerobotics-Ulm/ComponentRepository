//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2021 Timo Blender
//
//        timo.blender@thu.de
//        christian.schlegel@thu.de
//
//        Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  Contributors:
//		Vineet Nagrath
//		Nayabrasul Shaik
//		Timo Blender
//		Christian Schlegel
//
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "SocketConnection.hh"
#include <iostream>

SocketConnection::SocketConnection() {}

SocketConnection::~SocketConnection() {}

int SocketConnection::connect() {

	std::string addr = "127.0.0.1:6868";
	this->addr.set(addr.c_str());

	if(this->connector.connect(this->stream, this->addr) == 0) {
		std::cout<<"Connect successful!"<<std::endl;
		return 0;
	}
	else {
		std::cerr<<"Connect error!"<<std::endl;
		return -1;
	}
}

int SocketConnection::receive(std::string& message) {

	char buffer[2048];
	int messageSize;

	memset(buffer,0,sizeof(buffer));
	ACE_Time_Value timeout(0,500000);

	messageSize = this->stream.recv(buffer, sizeof(buffer), &timeout);
	message = &buffer[0];
	return 0;
}

int SocketConnection::send(std::string message) {

	std::cout<<"=================================="<<std::endl;
	std::cout << message << std::endl;
	std::cout<<"=================================="<<std::endl;

	if(this->stream.send_n(message.c_str(), message.length()) == -1) {
		std::cout << "Send error!";
		return -1;
	}
	else {
		std::cout<< "Send successful!"<<std::endl;
		return 0;
	}
}
