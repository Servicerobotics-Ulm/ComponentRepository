//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef _PACKINGTASK_HH
#define _PACKINGTASK_HH

#include "PackingTaskCore.hh"
#include <DomainVision/CommRGBDImage.hh>

#include "utils/VisualizationHelper.hh"
#include "utils/PointManipulation.hh"
#include "utils/Layer.hh"
#include "utils/Container.h"
#include "utils/Packer.h"

class PackingTask  : public PackingTaskCore
{

private:
	VisualizationHelper _vHelper;
	//PointManipulation _pointManipulator;

	int _layer_cloud_window_idx;
	int _filtered_cloud_window_idx;

	//convention like in KinectBoxDetection, since coordinate frame of vacuum gripper
	//y is parallel to the short side
	//z is parallel to the long side
	//float

	void errorQuit();
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr distanceFilter(pcl::PointCloud<pcl::PointXYZRGB>::Ptr env_cloud);
	void showData(pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud,DomainVision::CommVideoImage* video_image);
	void findLayers(pcl::PointCloud<pcl::PointXYZRGB>::Ptr point_cloud, std::vector<Layer>&);
	int sortLayers(std::vector<Layer>& layers);
	Container findContainer(Layer& containerTopLayer);
	void findBoundingBox(Layer& containerTopLayer);
	std::vector<mrpt::math::TPoint3D> findSlcCornerPoints(pcl::PointCloud<pcl::PointXYZRGB>::Ptr layerCloud);
	mrpt::poses::CPose3D calcSlcPose(std::vector<mrpt::math::TPoint3D> cornerPoints);
	void setEnvId();




	void setDetectedObjects(mrpt::poses::CPose3D spaceSurfacePose, mrpt::poses::CPose3D slcPose);
	void setObstacleObject(pcl::PointCloud<pcl::PointXYZRGB>::Ptr filtered_obstacles_cloud);
	void sendFinishedEvent();
	bool setSpaceDimensions();
public:
	PackingTask(SmartACE::SmartComponent *comp);
	virtual ~PackingTask();

	virtual int on_entry();
	virtual int on_execute();
	virtual int on_exit();
};

#endif
