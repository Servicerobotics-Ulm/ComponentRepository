//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _TRIGGERHANDLERCORE_HH
#define _TRIGGERHANDLERCORE_HH

#include "aceSmartSoft.hh"
#include <queue>

#include <string>
#include <iostream>
#include <list>

class TriggerHandlerCore : public SmartACE::ManagedTask
{
	friend class ParamUpdateHandler;
	
public:
	TriggerHandlerCore() 
	:	SmartACE::ManagedTask(NULL) //TODO: a propper component pointer should be probably used here instead of NULL
	,	mutex()
	,	sema(0) // initialize semaphore in blocking mode
	,	current_trigger_enumerator(TriggerEnumerators::UNDEFINED_TRIGGER_ACTION)
	{  
		this->start();
	}
	virtual ~TriggerHandlerCore() {  }

	// trigger user methods
	
		
		virtual void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDALGORITHM(const std::string &algorithm) = 0;
	
		
		virtual void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDOBJECT(const std::string &type) = 0;
	
		class ADDSENSORType {
		public:
		
			/**
			 * Wrapper class for Enum sensor
			 */
			class sensorType {
			public:
				enum ENUM_sensor {
					ENUM_VALUE_UNDEFINED = 0,
					KINECT = 1,
					MANIPULATOR_CAMERA = 2,
					MANIPULATOR_LASER = 3
				};
				
				// default constructor
				sensorType() { 
					value = ENUM_VALUE_UNDEFINED;
				}
				
				// copy constructor for enum type
				sensorType(ENUM_sensor e) {
					value = e;
				}
				
				// copy constructor for String type
				sensorType(const std::string &literal) {
					from_string(literal);
				}
				
				// from_string assignment operator
				sensorType& operator = (const std::string &literal) {
					from_string(literal);
					return *this;
				}
				
				// ENUM operator
				operator ENUM_sensor() const {
					return value;
				}
				
				// String operator
				operator std::string() const {
					return to_string();
				}
				
				// compare operator
				bool operator == (const ENUM_sensor t) const {
					return this->value == t;
				}
				
				std::string to_string() const {
					std::string result = "";
					switch (value) {
						case KINECT:
							result = "KINECT";
							break;
						case MANIPULATOR_CAMERA:
							result = "MANIPULATOR_CAMERA";
							break;
						case MANIPULATOR_LASER:
							result = "MANIPULATOR_LASER";
							break;
						default:
							result = "ENUM_VALUE_UNDEFINED";
							break;
					};
					return result;
				}
				
				void from_string(const std::string &literal) {
					if(literal == "KINECT") {
						value = KINECT;
					} else if(literal == "MANIPULATOR_CAMERA") {
						value = MANIPULATOR_CAMERA;
					} else if(literal == "MANIPULATOR_LASER") {
						value = MANIPULATOR_LASER;
					} else {
						value = ENUM_VALUE_UNDEFINED;
					}
				}
				
				// helper method to easily implement output stream
				void to_ostream(std::ostream &os = std::cout) const {
					os << to_string();
				}
			private:
				ENUM_sensor value;
			};
			
		}; // end class ADDSENSORType
		
		virtual void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDSENSOR(const ADDSENSORType::sensorType &sensor) = 0;
	
		class BEHAVIORType {
		public:
		
			/**
			 * Wrapper class for Enum type
			 */
			class typeType {
			public:
				enum ENUM_type {
					ENUM_VALUE_UNDEFINED = 0,
					SEARCH = 1,
					FULLSEARCH = 2
				};
				
				// default constructor
				typeType() { 
					value = ENUM_VALUE_UNDEFINED;
				}
				
				// copy constructor for enum type
				typeType(ENUM_type e) {
					value = e;
				}
				
				// copy constructor for String type
				typeType(const std::string &literal) {
					from_string(literal);
				}
				
				// from_string assignment operator
				typeType& operator = (const std::string &literal) {
					from_string(literal);
					return *this;
				}
				
				// ENUM operator
				operator ENUM_type() const {
					return value;
				}
				
				// String operator
				operator std::string() const {
					return to_string();
				}
				
				// compare operator
				bool operator == (const ENUM_type t) const {
					return this->value == t;
				}
				
				std::string to_string() const {
					std::string result = "";
					switch (value) {
						case FULLSEARCH:
							result = "FULLSEARCH";
							break;
						case SEARCH:
							result = "SEARCH";
							break;
						default:
							result = "ENUM_VALUE_UNDEFINED";
							break;
					};
					return result;
				}
				
				void from_string(const std::string &literal) {
					if(literal == "SEARCH") {
						value = SEARCH;
					} else if(literal == "FULLSEARCH") {
						value = FULLSEARCH;
					} else {
						value = ENUM_VALUE_UNDEFINED;
					}
				}
				
				// helper method to easily implement output stream
				void to_ostream(std::ostream &os = std::cout) const {
					os << to_string();
				}
			private:
				ENUM_type value;
			};
			
		}; // end class BEHAVIORType
		
		virtual void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_BEHAVIOR(const BEHAVIORType::typeType &type) = 0;
	
		
		virtual void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_CAPTURE() = 0;
	
		
		virtual void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELALGORITHMS() = 0;
	
		
		virtual void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELOBJECTS() = 0;
	
		
		virtual void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELSENSORS() = 0;
	
		
		virtual void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_RECOGNIZE(const std::string &viewPointID) = 0;
	
	// extended trigger user methods
	
protected:
	SmartACE::SmartMutex mutex;
	SmartACE::SmartSemaphore sema;
	int on_execute();

	class TriggerEnumerators {
	public:
		enum ENUM {
			UNDEFINED_TRIGGER_ACTION
			, COMMOBJECTRECOGNITIONOBJECTS_OBJECTRECOGNITIONPARAMETER_CAPTURE
			, COMMOBJECTRECOGNITIONOBJECTS_OBJECTRECOGNITIONPARAMETER_RECOGNIZE
		};
	};
	TriggerEnumerators::ENUM current_trigger_enumerator;
	std::queue<TriggerEnumerators::ENUM> trigger_queue;
	
	// active trigger CAPTURE
	struct CommObjectRecognitionObjects_ObjectRecognitionParameter_CAPTUREAttributes {
	}current_CommObjectRecognitionObjects_ObjectRecognitionParameter_CAPTURE;
	std::queue<CommObjectRecognitionObjects_ObjectRecognitionParameter_CAPTUREAttributes> CommObjectRecognitionObjects_ObjectRecognitionParameter_CAPTURE_queue;
	
	// active trigger RECOGNIZE
	struct CommObjectRecognitionObjects_ObjectRecognitionParameter_RECOGNIZEAttributes {
		std::string viewPointID;
	}current_CommObjectRecognitionObjects_ObjectRecognitionParameter_RECOGNIZE;
	std::queue<CommObjectRecognitionObjects_ObjectRecognitionParameter_RECOGNIZEAttributes> CommObjectRecognitionObjects_ObjectRecognitionParameter_RECOGNIZE_queue;
	
private:
	// trigger internal methods
	void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDALGORITHMCore(const std::string &algorithm);
	void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDOBJECTCore(const std::string &type);
	void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDSENSORCore(const ADDSENSORType::sensorType &sensor);
	void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_BEHAVIORCore(const BEHAVIORType::typeType &type);
	void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_CAPTURECore();
	void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELALGORITHMSCore();
	void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELOBJECTSCore();
	void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELSENSORSCore();
	void handleCommObjectRecognitionObjects_ObjectRecognitionParameter_RECOGNIZECore(const std::string &viewPointID);
	
	// extended trigger internal methods 
};

#endif // _TRIGGERHANDLERCORE_HH
