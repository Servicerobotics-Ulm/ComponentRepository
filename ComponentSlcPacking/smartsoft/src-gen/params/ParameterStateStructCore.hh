//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <list>
#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter General
		 */
		class GeneralType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			float gridSizeInM;
		
		public:
			// default constructor
			GeneralType() {
				gridSizeInM = 0.005;
			}
		
			/**
			 * here are the public getters
			 */
			inline float getGridSizeInM() const { return gridSizeInM; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "General(";
				os << "gridSizeInM = " << gridSizeInM;
				os << ")\n";
			}
			
		}; // end class GeneralType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommObjectRecognitionObjects
		 */
		class CommObjectRecognitionObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet ObjectRecognitionParameter
			 */
			class ObjectRecognitionParameterType {
				friend class ParamUpdateHandler;
				public:
				/**
				 * Definition of Parameter BELIEF_THRESHOLD
				 */
				class BELIEF_THRESHOLDType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double threshold;
					
				public:
					// default constructor
					BELIEF_THRESHOLDType() {
						threshold = 0.0;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getThreshold() const { return threshold; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tBELIEF_THRESHOLD(";
						os << "threshold = " << threshold;
						os << ")\n";
					}
					
				}; // end of parameter class BELIEF_THRESHOLDType
				
				/**
				 * Definition of Parameter CLOUD
				 */
				class CLOUDType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					unsigned int id;
					
				public:
					// default constructor
					CLOUDType() {
						id = 0;
					}
					
					/**
					 * here are the getter methods
					 */
					inline unsigned int getId() const { return id; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tCLOUD(";
						os << "id = " << id;
						os << ")\n";
					}
					
				}; // end of parameter class CLOUDType
				
				/**
				 * Definition of Parameter CLUSTERING
				 */
				class CLUSTERINGType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					bool doClustering;
					
				public:
					// default constructor
					CLUSTERINGType() {
						doClustering = false;
					}
					
					/**
					 * here are the getter methods
					 */
					inline bool getDoClustering() const { return doClustering; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tCLUSTERING(";
						os << "doClustering = " << doClustering;
						os << ")\n";
					}
					
				}; // end of parameter class CLUSTERINGType
				
				/**
				 * Definition of Parameter ESTIMATEFILLING
				 */
				class ESTIMATEFILLINGType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					bool estimateObjectProperties;
					
				public:
					// default constructor
					ESTIMATEFILLINGType() {
						estimateObjectProperties = false;
					}
					
					/**
					 * here are the getter methods
					 */
					inline bool getEstimateObjectProperties() const { return estimateObjectProperties; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tESTIMATEFILLING(";
						os << "estimateObjectProperties = " << estimateObjectProperties;
						os << ")\n";
					}
					
				}; // end of parameter class ESTIMATEFILLINGType
				
				/**
				 * Definition of Parameter SETOBJECTID
				 */
				class SETOBJECTIDType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					unsigned int id;
					
				public:
					// default constructor
					SETOBJECTIDType() {
						id = 0;
					}
					
					/**
					 * here are the getter methods
					 */
					inline unsigned int getId() const { return id; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSETOBJECTID(";
						os << "id = " << id;
						os << ")\n";
					}
					
				}; // end of parameter class SETOBJECTIDType
				
				protected:
					/**
					 * internal members
					 */
					BELIEF_THRESHOLDType BELIEF_THRESHOLD;
					CLOUDType CLOUD;
					CLUSTERINGType CLUSTERING;
					ESTIMATEFILLINGType ESTIMATEFILLING;
					SETOBJECTIDType SETOBJECTID;
					
				public:
					/**
					 * public getter methods
					 */
					inline BELIEF_THRESHOLDType getBELIEF_THRESHOLD() const { return BELIEF_THRESHOLD; }
					inline CLOUDType getCLOUD() const { return CLOUD; }
					inline CLUSTERINGType getCLUSTERING() const { return CLUSTERING; }
					inline ESTIMATEFILLINGType getESTIMATEFILLING() const { return ESTIMATEFILLING; }
					inline SETOBJECTIDType getSETOBJECTID() const { return SETOBJECTID; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "ObjectRecognitionParameter(\n";
						BELIEF_THRESHOLD.to_ostream(os);
						CLOUD.to_ostream(os);
						CLUSTERING.to_ostream(os);
						ESTIMATEFILLING.to_ostream(os);
						SETOBJECTID.to_ostream(os);
						os << ")";
					}
			}; // end of parameter-set class ObjectRecognitionParameterType
			
			protected:
				/**
				 * internal members
				 */
				ObjectRecognitionParameterType ObjectRecognitionParameter;
			
			public:
				/**
				 * public getter methods
				 */
				inline ObjectRecognitionParameterType getObjectRecognitionParameter() const { return ObjectRecognitionParameter; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommObjectRecognitionObjects(\n";
					ObjectRecognitionParameter.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommObjectRecognitionObjectsType
	
protected:

	// Internal params
	GeneralType General;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommObjectRecognitionObjectsType CommObjectRecognitionObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommObjectRecognitionObjects = commit.getCommObjectRecognitionObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	GeneralType getGeneral() const {
		return General;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommObjectRecognitionObjectsType getCommObjectRecognitionObjects() const {
		return CommObjectRecognitionObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		General.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommObjectRecognitionObjects.to_ostream(os);
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["General"] = nlohmann::json {
			{"gridSizeInM" , getGeneral().getGridSizeInM()}
		};
	
		param["ObjectRecognitionParameter"] = nlohmann::json {
			{ "BELIEF_THRESHOLD", {
				{"threshold" , getCommObjectRecognitionObjects().getObjectRecognitionParameter().getBELIEF_THRESHOLD().getThreshold()}
			}},
			{ "CLOUD", {
				{"id" , getCommObjectRecognitionObjects().getObjectRecognitionParameter().getCLOUD().getId()}
			}},
			{ "CLUSTERING", {
				{"doClustering" , getCommObjectRecognitionObjects().getObjectRecognitionParameter().getCLUSTERING().getDoClustering()}
			}},
			{ "ESTIMATEFILLING", {
				{"estimateObjectProperties" , getCommObjectRecognitionObjects().getObjectRecognitionParameter().getESTIMATEFILLING().getEstimateObjectProperties()}
			}},
			{ "SETOBJECTID", {
				{"id" , getCommObjectRecognitionObjects().getObjectRecognitionParameter().getSETOBJECTID().getId()}
			}}
		};
		
		return param.dump();
	}
};

#endif
