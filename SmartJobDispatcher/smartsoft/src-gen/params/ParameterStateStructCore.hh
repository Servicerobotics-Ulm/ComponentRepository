//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <list>
#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter ModuleConnection
		 */
		class ModuleConnectionType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool ConnectJobSource3;
			bool ConnectNavigationCoordinationServer;
			bool ConnectNavigationServer;
			std::string Fileprovider;
			std::string Mapper;
			std::string NavigationCoordinationServer;
			std::string PathNavigationServer;
			std::string RobotStateViewer;
			std::string RobotinoRPC;
		
		public:
			// default constructor
			ModuleConnectionType() {
				ConnectJobSource3 = false;
				ConnectNavigationCoordinationServer = false;
				ConnectNavigationServer = true;
				Fileprovider = "ComponentFileProvider";
				Mapper = "SmartMapperGridMap";
				NavigationCoordinationServer = "SmartNavigationCoordinationServer";
				PathNavigationServer = "ComponentCorridorNavigationServer";
				RobotStateViewer = "SmartRobotStateViewer";
				RobotinoRPC = "@ROBOTINONAME@.SmartRobotinoRPCBridge";
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getConnectJobSource3() const { return ConnectJobSource3; }
			inline bool getConnectNavigationCoordinationServer() const { return ConnectNavigationCoordinationServer; }
			inline bool getConnectNavigationServer() const { return ConnectNavigationServer; }
			inline std::string getFileprovider() const { return Fileprovider; }
			inline std::string getMapper() const { return Mapper; }
			inline std::string getNavigationCoordinationServer() const { return NavigationCoordinationServer; }
			inline std::string getPathNavigationServer() const { return PathNavigationServer; }
			inline std::string getRobotStateViewer() const { return RobotStateViewer; }
			inline std::string getRobotinoRPC() const { return RobotinoRPC; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "ModuleConnection(";
				os << "ConnectJobSource3 = " << ConnectJobSource3; os << ", ";
				os << "ConnectNavigationCoordinationServer = " << ConnectNavigationCoordinationServer; os << ", ";
				os << "ConnectNavigationServer = " << ConnectNavigationServer; os << ", ";
				os << "Fileprovider = " << Fileprovider; os << ", ";
				os << "Mapper = " << Mapper; os << ", ";
				os << "NavigationCoordinationServer = " << NavigationCoordinationServer; os << ", ";
				os << "PathNavigationServer = " << PathNavigationServer; os << ", ";
				os << "RobotStateViewer = " << RobotStateViewer; os << ", ";
				os << "RobotinoRPC = " << RobotinoRPC;
				os << ")\n";
			}
			
		}; // end class ModuleConnectionType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	ModuleConnectionType ModuleConnection;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	ModuleConnectionType getModuleConnection() const {
		return ModuleConnection;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		ModuleConnection.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["ModuleConnection"] = nlohmann::json {
			{"ConnectJobSource3" , getModuleConnection().getConnectJobSource3()},
			{"ConnectNavigationCoordinationServer" , getModuleConnection().getConnectNavigationCoordinationServer()},
			{"ConnectNavigationServer" , getModuleConnection().getConnectNavigationServer()},
			{"Fileprovider" , getModuleConnection().getFileprovider()},
			{"Mapper" , getModuleConnection().getMapper()},
			{"NavigationCoordinationServer" , getModuleConnection().getNavigationCoordinationServer()},
			{"PathNavigationServer" , getModuleConnection().getPathNavigationServer()},
			{"RobotStateViewer" , getModuleConnection().getRobotStateViewer()},
			{"RobotinoRPC" , getModuleConnection().getRobotinoRPC()}
		};
	
		
		return param.dump();
	}
};

#endif
