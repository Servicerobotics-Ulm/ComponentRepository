//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "SmartJobDispatcher.hh"
#include "smartTimedTaskTrigger.h"
//FIXME: implement logging
//#include "smartGlobalLogger.hh"

// the ace port-factory is used as a default port-mapping
#include "SmartJobDispatcherAcePortFactory.hh"

#include "JobEventServerEventTestHandler.hh"

// initialize static singleton pointer to zero
SmartJobDispatcher* SmartJobDispatcher::_smartJobDispatcher = 0;

// constructor
SmartJobDispatcher::SmartJobDispatcher()
{
	std::cout << "constructor of SmartJobDispatcher\n";
	
	// set all pointer members to NULL
	commKBQueryReq = NULL;
	//coordinationPort = NULL;
	jobResultSendHandler = NULL;
	jobSource2EventHandler = NULL;
	jobSource3EventHandler = NULL;
	jobSourceEventHandler = NULL;
	navigationTopologyMapQueryReq = NULL;
	//smartJobDispatcher = NULL;
	symbolicPannerServiceReq = NULL;
	taskResultOut = NULL;
	taskResultOutWrapper = NULL;
	dummy = NULL;
	dummyTrigger = NULL;
	jobEventServer = NULL;
	jobEventServerWrapper = NULL;
	jobEventServerEventTestHandler = nullptr; 
	jobResultSendServer = NULL;
	jobResultSendServerInputTaskTrigger = NULL;
	jobResultSendServerUpcallManager = NULL;
	jobResultSendServerInputCollector = NULL;
	jobSource2EventClient = NULL;
	jobSource2EventClientInputTaskTrigger = NULL;
	jobSource2EventClientUpcallManager = NULL;
	jobSource2EventClientInputCollector = NULL;
	jobSource3EventClient = NULL;
	jobSource3EventClientInputTaskTrigger = NULL;
	jobSource3EventClientUpcallManager = NULL;
	jobSource3EventClientInputCollector = NULL;
	jobSourceEventClient = NULL;
	jobSourceEventClientInputTaskTrigger = NULL;
	jobSourceEventClientUpcallManager = NULL;
	jobSourceEventClientInputCollector = NULL;
	//master = NULL;
	stateChangeHandler = NULL;
	stateActivityManager = NULL;
	stateSlave = NULL;
	wiringSlave = NULL;
	param = NULL;
	stateMaster = NULL;
	paramMaster = NULL;
	wiringMaster = NULL;
	
	// set default ini parameter values
	connections.component.name = "SmartJobDispatcher";
	connections.component.initialComponentMode = "Neutral";
	connections.component.defaultScheduler = "DEFAULT";
	connections.component.useLogger = false;
	
	connections.taskResultOut.serviceName = "TaskResultOut";
	connections.taskResultOut.roboticMiddleware = "ACE_SmartSoft";
	connections.jobEventServer.serviceName = "jobEventServer";
	connections.jobEventServer.roboticMiddleware = "ACE_SmartSoft";
	connections.jobResultSendServer.serviceName = "jobResultSendServer";
	connections.jobResultSendServer.roboticMiddleware = "ACE_SmartSoft";
	connections.commKBQueryReq.initialConnect = false;
	connections.commKBQueryReq.wiringName = "CommKBQueryReq";
	connections.commKBQueryReq.serverName = "unknown";
	connections.commKBQueryReq.serviceName = "unknown";
	connections.commKBQueryReq.interval = 1;
	connections.commKBQueryReq.roboticMiddleware = "ACE_SmartSoft";
	connections.navigationTopologyMapQueryReq.initialConnect = false;
	connections.navigationTopologyMapQueryReq.wiringName = "NavigationTopologyMapQueryReq";
	connections.navigationTopologyMapQueryReq.serverName = "unknown";
	connections.navigationTopologyMapQueryReq.serviceName = "unknown";
	connections.navigationTopologyMapQueryReq.interval = 1;
	connections.navigationTopologyMapQueryReq.roboticMiddleware = "ACE_SmartSoft";
	connections.symbolicPannerServiceReq.initialConnect = false;
	connections.symbolicPannerServiceReq.wiringName = "SymbolicPannerServiceReq";
	connections.symbolicPannerServiceReq.serverName = "unknown";
	connections.symbolicPannerServiceReq.serviceName = "unknown";
	connections.symbolicPannerServiceReq.interval = 1;
	connections.symbolicPannerServiceReq.roboticMiddleware = "ACE_SmartSoft";
	connections.jobSource2EventClient.initialConnect = false;
	connections.jobSource2EventClient.wiringName = "jobSource2EventClient";
	connections.jobSource2EventClient.serverName = "unknown";
	connections.jobSource2EventClient.serviceName = "unknown";
	connections.jobSource2EventClient.interval = 1;
	connections.jobSource2EventClient.roboticMiddleware = "ACE_SmartSoft";
	connections.jobSource3EventClient.initialConnect = false;
	connections.jobSource3EventClient.wiringName = "jobSource3EventClient";
	connections.jobSource3EventClient.serverName = "unknown";
	connections.jobSource3EventClient.serviceName = "unknown";
	connections.jobSource3EventClient.interval = 1;
	connections.jobSource3EventClient.roboticMiddleware = "ACE_SmartSoft";
	connections.jobSourceEventClient.initialConnect = false;
	connections.jobSourceEventClient.wiringName = "jobSourceEventClient";
	connections.jobSourceEventClient.serverName = "unknown";
	connections.jobSourceEventClient.serviceName = "unknown";
	connections.jobSourceEventClient.interval = 1;
	connections.jobSourceEventClient.roboticMiddleware = "ACE_SmartSoft";
	connections.dummy.minActFreq = 0.0;
	connections.dummy.maxActFreq = 0.0;
	// scheduling default parameters
	connections.dummy.scheduler = "DEFAULT";
	connections.dummy.priority = -1;
	connections.dummy.cpuAffinity = -1;
	connections.jobResultSendHandler.prescale = 1;
	connections.jobSource2EventHandler.prescale = 1;
	connections.jobSource3EventHandler.prescale = 1;
	connections.jobSourceEventHandler.prescale = 1;
	
}

void SmartJobDispatcher::addPortFactory(const std::string &name, SmartJobDispatcherPortFactoryInterface *portFactory)
{
	portFactoryRegistry[name] = portFactory;
}

void SmartJobDispatcher::addExtension(SmartJobDispatcherExtension *extension)
{
	componentExtensionRegistry[extension->getName()] = extension;
}

SmartACE::SmartComponent* SmartJobDispatcher::getComponentImpl()
{
	return dynamic_cast<SmartJobDispatcherAcePortFactory*>(portFactoryRegistry["ACE_SmartSoft"])->getComponentImpl();
}

/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void SmartJobDispatcher::setStartupFinished() {
	stateSlave->setWaitState("Alive");
	std::cout << "ComponentDefinition initialization/startup finished." << std::endl;
}


Smart::StatusCode SmartJobDispatcher::connectCommKBQueryReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.commKBQueryReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = commKBQueryReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->commKBQueryReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartJobDispatcher::connectNavigationTopologyMapQueryReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.navigationTopologyMapQueryReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = navigationTopologyMapQueryReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->navigationTopologyMapQueryReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartJobDispatcher::connectSymbolicPannerServiceReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.symbolicPannerServiceReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = symbolicPannerServiceReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->symbolicPannerServiceReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartJobDispatcher::connectJobSource2EventClient(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.jobSource2EventClient.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = jobSource2EventClient->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->jobSource2EventClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartJobDispatcher::connectJobSource3EventClient(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.jobSource3EventClient.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = jobSource3EventClient->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->jobSource3EventClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode SmartJobDispatcher::connectJobSourceEventClient(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.jobSourceEventClient.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = jobSourceEventClient->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->jobSourceEventClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}


/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
Smart::StatusCode SmartJobDispatcher::connectAndStartAllServices() {
	Smart::StatusCode status = Smart::SMART_OK;
	
	status = connectCommKBQueryReq(connections.commKBQueryReq.serverName, connections.commKBQueryReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectNavigationTopologyMapQueryReq(connections.navigationTopologyMapQueryReq.serverName, connections.navigationTopologyMapQueryReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectSymbolicPannerServiceReq(connections.symbolicPannerServiceReq.serverName, connections.symbolicPannerServiceReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectJobSource2EventClient(connections.jobSource2EventClient.serverName, connections.jobSource2EventClient.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectJobSource3EventClient(connections.jobSource3EventClient.serverName, connections.jobSource3EventClient.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectJobSourceEventClient(connections.jobSourceEventClient.serverName, connections.jobSourceEventClient.serviceName);
	if(status != Smart::SMART_OK) return status;
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void SmartJobDispatcher::startAllTasks() {
	// start task dummy
	if(connections.dummy.scheduler != "DEFAULT") {
		ACE_Sched_Params dummy_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.dummy.scheduler == "FIFO") {
			dummy_SchedParams.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				dummy_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				dummy_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(connections.dummy.scheduler == "RR") {
			dummy_SchedParams.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				dummy_SchedParams.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				dummy_SchedParams.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		dummy->start(dummy_SchedParams, connections.dummy.cpuAffinity);
	} else {
		dummy->start();
	}
}

/**
 * Start all timers contained in this component
 */
void SmartJobDispatcher::startAllTimers() {
}


Smart::TaskTriggerSubject* SmartJobDispatcher::getInputTaskTriggerFromString(const std::string &client)
{
	if(client == "jobResultSendServer") return jobResultSendServerInputTaskTrigger;
	if(client == "jobSource2EventClient") return jobSource2EventClientInputTaskTrigger;
	if(client == "jobSource3EventClient") return jobSource3EventClientInputTaskTrigger;
	if(client == "jobSourceEventClient") return jobSourceEventClientInputTaskTrigger;
	
	return NULL;
}


void SmartJobDispatcher::init(int argc, char *argv[])
{
	try {
		Smart::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		// print out the actual parameters which are used to initialize the component
		std::cout << " \nComponentDefinition Initial-Parameters:\n" << COMP->getParameters() << std::endl;
		
		
		// initialize all registered port-factories
		for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
		{
			portFactory->second->initialize(this, argc, argv);
		}
		
		// initialize all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->initialize(this, argc, argv);
		}
		
		SmartJobDispatcherPortFactoryInterface *acePortFactory = portFactoryRegistry["ACE_SmartSoft"];
		if(acePortFactory == 0) {
			std::cerr << "ERROR: acePortFactory NOT instantiated -> exit(-1)" << std::endl;
			exit(-1);
		}
		
		// this pointer is used for backwards compatibility (deprecated: should be removed as soon as all patterns, including coordination, are moved to port-factory)
		SmartACE::SmartComponent *component = dynamic_cast<SmartJobDispatcherAcePortFactory*>(acePortFactory)->getComponentImpl();
		
		std::cout << "ComponentDefinition SmartJobDispatcher is named " << connections.component.name << std::endl;
		
		if(connections.component.useLogger == true) {
			//FIXME: use logging
			//Smart::LOGGER->openLogFileInFolder("data/"+connections.component.name);
			//Smart::LOGGER->startLogging();
		}

		// create event-test handlers (if needed)
		jobEventServerEventTestHandler = std::make_shared<JobEventServerEventTestHandler>();
		
		// create server ports
		// TODO: set minCycleTime from Ini-file
		taskResultOut = portFactoryRegistry[connections.taskResultOut.roboticMiddleware]->createTaskResultOut(connections.taskResultOut.serviceName);
		taskResultOutWrapper = new TaskResultOutWrapper(taskResultOut);
		jobEventServerEventTestHandler = std::make_shared<JobEventServerEventTestHandler>();
		jobEventServer = portFactoryRegistry[connections.jobEventServer.roboticMiddleware]->createJobEventServer(connections.jobEventServer.serviceName, jobEventServerEventTestHandler);
		jobEventServerWrapper = new JobEventServerWrapper(jobEventServer);
		jobResultSendServer = portFactoryRegistry[connections.jobResultSendServer.roboticMiddleware]->createJobResultSendServer(connections.jobResultSendServer.serviceName);
		
		// create client ports
		commKBQueryReq = portFactoryRegistry[connections.commKBQueryReq.roboticMiddleware]->createCommKBQueryReq();
		navigationTopologyMapQueryReq = portFactoryRegistry[connections.navigationTopologyMapQueryReq.roboticMiddleware]->createNavigationTopologyMapQueryReq();
		symbolicPannerServiceReq = portFactoryRegistry[connections.symbolicPannerServiceReq.roboticMiddleware]->createSymbolicPannerServiceReq();
		jobSource2EventClient = portFactoryRegistry[connections.jobSource2EventClient.roboticMiddleware]->createJobSource2EventClient();
		jobSource3EventClient = portFactoryRegistry[connections.jobSource3EventClient.roboticMiddleware]->createJobSource3EventClient();
		jobSourceEventClient = portFactoryRegistry[connections.jobSourceEventClient.roboticMiddleware]->createJobSourceEventClient();
		
		// create InputTaskTriggers and UpcallManagers
		jobResultSendServerInputCollector = new JobResultSendServerInputCollector(jobResultSendServer);
		jobResultSendServerInputTaskTrigger = new Smart::InputTaskTrigger<CommBasicObjects::CommTaskMessage>(jobResultSendServerInputCollector);
		jobResultSendServerUpcallManager = new JobResultSendServerUpcallManager(jobResultSendServerInputCollector);
		jobSource2EventClientInputCollector = new JobSource2EventClientInputCollector(jobSource2EventClient);
		jobSource2EventClientInputTaskTrigger = new Smart::InputTaskTrigger<Smart::EventInputType<CommBasicObjects::CommTaskMessage>>(jobSource2EventClientInputCollector);
		jobSource2EventClientUpcallManager = new JobSource2EventClientUpcallManager(jobSource2EventClientInputCollector);
		jobSource3EventClientInputCollector = new JobSource3EventClientInputCollector(jobSource3EventClient);
		jobSource3EventClientInputTaskTrigger = new Smart::InputTaskTrigger<Smart::EventInputType<CommBasicObjects::CommTaskMessage>>(jobSource3EventClientInputCollector);
		jobSource3EventClientUpcallManager = new JobSource3EventClientUpcallManager(jobSource3EventClientInputCollector);
		jobSourceEventClientInputCollector = new JobSourceEventClientInputCollector(jobSourceEventClient);
		jobSourceEventClientInputTaskTrigger = new Smart::InputTaskTrigger<Smart::EventInputType<CommBasicObjects::CommTaskMessage>>(jobSourceEventClientInputCollector);
		jobSourceEventClientUpcallManager = new JobSourceEventClientUpcallManager(jobSourceEventClientInputCollector);
		
		// create input-handler
		jobResultSendHandler = new JobResultSendHandler(jobResultSendServer, connections.jobResultSendHandler.prescale);
		jobSource2EventHandler = new JobSource2EventHandler(jobSource2EventClient, connections.jobSource2EventHandler.prescale);
		jobSource3EventHandler = new JobSource3EventHandler(jobSource3EventClient, connections.jobSource3EventHandler.prescale);
		jobSourceEventHandler = new JobSourceEventHandler(jobSourceEventClient, connections.jobSourceEventHandler.prescale);
		
		// create request-handlers
		
		// create state pattern
		stateChangeHandler = new SmartStateChangeHandler();
		stateActivityManager = new StateActivityManager(stateChangeHandler);
		stateSlave = new SmartACE::StateSlave(component, stateActivityManager);
		status = stateSlave->setUpInitialState(connections.component.initialComponentMode);
		if (status != Smart::SMART_OK) std::cerr << status << "; failed setting initial ComponentMode: " << connections.component.initialComponentMode << std::endl;
		// activate state slave
		status = stateSlave->activate();
		if(status != Smart::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		wiringSlave = new SmartACE::WiringSlave(component);
		// add client port to wiring slave
		if(connections.commKBQueryReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommBasicObjects::CommKBRequest, CommBasicObjects::CommKBResponse>*>(commKBQueryReq)->add(wiringSlave, connections.commKBQueryReq.wiringName);
		}
		if(connections.navigationTopologyMapQueryReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommBasicObjects::CommVoid, CommNavigationObjects::CommNavigationTopologyMap>*>(navigationTopologyMapQueryReq)->add(wiringSlave, connections.navigationTopologyMapQueryReq.wiringName);
		}
		if(connections.symbolicPannerServiceReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<DomainSymbolicPlanner::CommSymbolicPlannerRequest, DomainSymbolicPlanner::CommSymbolicPlannerPlan>*>(symbolicPannerServiceReq)->add(wiringSlave, connections.symbolicPannerServiceReq.wiringName);
		}
		if(connections.jobSource2EventClient.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::EventClient<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage>*>(jobSource2EventClient)->add(wiringSlave, connections.jobSource2EventClient.wiringName);
		}
		if(connections.jobSource3EventClient.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::EventClient<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage>*>(jobSource3EventClient)->add(wiringSlave, connections.jobSource3EventClient.wiringName);
		}
		if(connections.jobSourceEventClient.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::EventClient<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage>*>(jobSourceEventClient)->add(wiringSlave, connections.jobSourceEventClient.wiringName);
		}
		
		// create parameter slave
		param = new SmartACE::ParameterSlave(component, &paramHandler);
		
		// create master ports
		stateMaster = new SmartACE::StateMaster(component);
		paramMaster = new SmartACE::ParameterMaster(component);
		wiringMaster = new SmartACE::WiringMaster(component);
		
		// create Task dummy
		dummy = new Dummy(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.dummy.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = (int)(1000.0*1000.0 / connections.dummy.periodicActFreq);
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(dummy);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				dummyTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task Dummy" << std::endl;
			}
		} else if(connections.dummy.trigger == "DataTriggered") {
			dummyTrigger = getInputTaskTriggerFromString(connections.dummy.inPortRef);
			if(dummyTrigger != NULL) {
				dummyTrigger->attach(dummy, connections.dummy.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.dummy.inPortRef << " as activation source for Task Dummy" << std::endl;
			}
		} 
		
		
		// link observers with subjects
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartJobDispatcher::run()
{
	stateSlave->acquire("init");
	// startup all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onStartup();
	}
	
	// startup all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onStartup();
	}
	stateSlave->release("init");
	
	// do not call this handler within the init state (see above) as this handler internally calls setStartupFinished() (this should be fixed in future)
	compHandler.onStartup();
	
	// this call blocks until the component is commanded to shutdown
	stateSlave->acquire("shutdown");
	
	// shutdown all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onShutdown();
	}
	
	// shutdown all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onShutdown();
	}
	
	if(connections.component.useLogger == true) {
		//FIXME: use logging
		//Smart::LOGGER->stopLogging();
	}
	
	compHandler.onShutdown();
	
	stateSlave->release("shutdown");
}

// clean-up component's resources
void SmartJobDispatcher::fini()
{
	// unlink all observers
	
	// destroy all task instances
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(dummyTrigger != NULL){
		dummyTrigger->detach(dummy);
		delete dummy;
	}

	// destroy all input-handler
	delete jobResultSendHandler;
	delete jobSource2EventHandler;
	delete jobSource3EventHandler;
	delete jobSourceEventHandler;

	// destroy InputTaskTriggers and UpcallManagers
	delete jobResultSendServerInputTaskTrigger;
	delete jobResultSendServerUpcallManager;
	delete jobResultSendServerInputCollector;
	delete jobSource2EventClientInputTaskTrigger;
	delete jobSource2EventClientUpcallManager;
	delete jobSource2EventClientInputCollector;
	delete jobSource3EventClientInputTaskTrigger;
	delete jobSource3EventClientUpcallManager;
	delete jobSource3EventClientInputCollector;
	delete jobSourceEventClientInputTaskTrigger;
	delete jobSourceEventClientUpcallManager;
	delete jobSourceEventClientInputCollector;

	// destroy client ports
	delete commKBQueryReq;
	delete navigationTopologyMapQueryReq;
	delete symbolicPannerServiceReq;
	delete jobSource2EventClient;
	delete jobSource3EventClient;
	delete jobSourceEventClient;

	// destroy request-handlers

	// destroy server ports
	delete taskResultOutWrapper;
	delete taskResultOut;
	delete jobEventServerWrapper;
	delete jobEventServer;
	delete jobResultSendServer;
	
	// destroy event-test handlers (if needed)
	jobEventServerEventTestHandler;
	
	delete stateSlave;
	delete stateActivityManager;
	// destroy state-change-handler
	delete stateChangeHandler;
	
	// destroy all master/slave ports
	delete wiringSlave;
	delete param;
	
	// destroy master ports
	delete stateMaster;
	delete paramMaster;
	delete wiringMaster;

	// destroy all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->destroy();
	}

	// destroy all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->destroy();
	}
	
}

void SmartJobDispatcher::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	SmartACE::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("SmartJobDispatcher.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load SmartJobDispatcher.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: SmartJobDispatcher.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		SmartACE::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(SmartACE::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(SmartACE::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		parameter.getString("component", "initialComponentMode", connections.component.initialComponentMode);
		if(parameter.checkIfParameterExists("component", "defaultScheduler")) {
			parameter.getString("component", "defaultScheduler", connections.component.defaultScheduler);
		}
		if(parameter.checkIfParameterExists("component", "useLogger")) {
			parameter.getBoolean("component", "useLogger", connections.component.useLogger);
		}
		
		// load parameters for client CommKBQueryReq
		parameter.getBoolean("CommKBQueryReq", "initialConnect", connections.commKBQueryReq.initialConnect);
		parameter.getString("CommKBQueryReq", "serviceName", connections.commKBQueryReq.serviceName);
		parameter.getString("CommKBQueryReq", "serverName", connections.commKBQueryReq.serverName);
		parameter.getString("CommKBQueryReq", "wiringName", connections.commKBQueryReq.wiringName);
		if(parameter.checkIfParameterExists("CommKBQueryReq", "roboticMiddleware")) {
			parameter.getString("CommKBQueryReq", "roboticMiddleware", connections.commKBQueryReq.roboticMiddleware);
		}
		// load parameters for client NavigationTopologyMapQueryReq
		parameter.getBoolean("NavigationTopologyMapQueryReq", "initialConnect", connections.navigationTopologyMapQueryReq.initialConnect);
		parameter.getString("NavigationTopologyMapQueryReq", "serviceName", connections.navigationTopologyMapQueryReq.serviceName);
		parameter.getString("NavigationTopologyMapQueryReq", "serverName", connections.navigationTopologyMapQueryReq.serverName);
		parameter.getString("NavigationTopologyMapQueryReq", "wiringName", connections.navigationTopologyMapQueryReq.wiringName);
		if(parameter.checkIfParameterExists("NavigationTopologyMapQueryReq", "roboticMiddleware")) {
			parameter.getString("NavigationTopologyMapQueryReq", "roboticMiddleware", connections.navigationTopologyMapQueryReq.roboticMiddleware);
		}
		// load parameters for client SymbolicPannerServiceReq
		parameter.getBoolean("SymbolicPannerServiceReq", "initialConnect", connections.symbolicPannerServiceReq.initialConnect);
		parameter.getString("SymbolicPannerServiceReq", "serviceName", connections.symbolicPannerServiceReq.serviceName);
		parameter.getString("SymbolicPannerServiceReq", "serverName", connections.symbolicPannerServiceReq.serverName);
		parameter.getString("SymbolicPannerServiceReq", "wiringName", connections.symbolicPannerServiceReq.wiringName);
		if(parameter.checkIfParameterExists("SymbolicPannerServiceReq", "roboticMiddleware")) {
			parameter.getString("SymbolicPannerServiceReq", "roboticMiddleware", connections.symbolicPannerServiceReq.roboticMiddleware);
		}
		// load parameters for client jobSource2EventClient
		parameter.getBoolean("jobSource2EventClient", "initialConnect", connections.jobSource2EventClient.initialConnect);
		parameter.getString("jobSource2EventClient", "serviceName", connections.jobSource2EventClient.serviceName);
		parameter.getString("jobSource2EventClient", "serverName", connections.jobSource2EventClient.serverName);
		parameter.getString("jobSource2EventClient", "wiringName", connections.jobSource2EventClient.wiringName);
		if(parameter.checkIfParameterExists("jobSource2EventClient", "roboticMiddleware")) {
			parameter.getString("jobSource2EventClient", "roboticMiddleware", connections.jobSource2EventClient.roboticMiddleware);
		}
		// load parameters for client jobSource3EventClient
		parameter.getBoolean("jobSource3EventClient", "initialConnect", connections.jobSource3EventClient.initialConnect);
		parameter.getString("jobSource3EventClient", "serviceName", connections.jobSource3EventClient.serviceName);
		parameter.getString("jobSource3EventClient", "serverName", connections.jobSource3EventClient.serverName);
		parameter.getString("jobSource3EventClient", "wiringName", connections.jobSource3EventClient.wiringName);
		if(parameter.checkIfParameterExists("jobSource3EventClient", "roboticMiddleware")) {
			parameter.getString("jobSource3EventClient", "roboticMiddleware", connections.jobSource3EventClient.roboticMiddleware);
		}
		// load parameters for client jobSourceEventClient
		parameter.getBoolean("jobSourceEventClient", "initialConnect", connections.jobSourceEventClient.initialConnect);
		parameter.getString("jobSourceEventClient", "serviceName", connections.jobSourceEventClient.serviceName);
		parameter.getString("jobSourceEventClient", "serverName", connections.jobSourceEventClient.serverName);
		parameter.getString("jobSourceEventClient", "wiringName", connections.jobSourceEventClient.wiringName);
		if(parameter.checkIfParameterExists("jobSourceEventClient", "roboticMiddleware")) {
			parameter.getString("jobSourceEventClient", "roboticMiddleware", connections.jobSourceEventClient.roboticMiddleware);
		}
		
		// load parameters for server TaskResultOut
		parameter.getString("TaskResultOut", "serviceName", connections.taskResultOut.serviceName);
		if(parameter.checkIfParameterExists("TaskResultOut", "roboticMiddleware")) {
			parameter.getString("TaskResultOut", "roboticMiddleware", connections.taskResultOut.roboticMiddleware);
		}
		// load parameters for server jobEventServer
		parameter.getString("jobEventServer", "serviceName", connections.jobEventServer.serviceName);
		if(parameter.checkIfParameterExists("jobEventServer", "roboticMiddleware")) {
			parameter.getString("jobEventServer", "roboticMiddleware", connections.jobEventServer.roboticMiddleware);
		}
		// load parameters for server jobResultSendServer
		parameter.getString("jobResultSendServer", "serviceName", connections.jobResultSendServer.serviceName);
		if(parameter.checkIfParameterExists("jobResultSendServer", "roboticMiddleware")) {
			parameter.getString("jobResultSendServer", "roboticMiddleware", connections.jobResultSendServer.roboticMiddleware);
		}
		
		// load parameters for task dummy
		parameter.getDouble("dummy", "minActFreqHz", connections.dummy.minActFreq);
		parameter.getDouble("dummy", "maxActFreqHz", connections.dummy.maxActFreq);
		parameter.getString("dummy", "triggerType", connections.dummy.trigger);
		if(connections.dummy.trigger == "PeriodicTimer") {
			parameter.getDouble("dummy", "periodicActFreqHz", connections.dummy.periodicActFreq);
		} else if(connections.dummy.trigger == "DataTriggered") {
			parameter.getString("dummy", "inPortRef", connections.dummy.inPortRef);
			parameter.getInteger("dummy", "prescale", connections.dummy.prescale);
		}
		if(parameter.checkIfParameterExists("dummy", "scheduler")) {
			parameter.getString("dummy", "scheduler", connections.dummy.scheduler);
		}
		if(parameter.checkIfParameterExists("dummy", "priority")) {
			parameter.getInteger("dummy", "priority", connections.dummy.priority);
		}
		if(parameter.checkIfParameterExists("dummy", "cpuAffinity")) {
			parameter.getInteger("dummy", "cpuAffinity", connections.dummy.cpuAffinity);
		}
		if(parameter.checkIfParameterExists("JobResultSendHandler", "prescale")) {
			parameter.getInteger("JobResultSendHandler", "prescale", connections.jobResultSendHandler.prescale);
		}
		if(parameter.checkIfParameterExists("JobSource2EventHandler", "prescale")) {
			parameter.getInteger("JobSource2EventHandler", "prescale", connections.jobSource2EventHandler.prescale);
		}
		if(parameter.checkIfParameterExists("JobSource3EventHandler", "prescale")) {
			parameter.getInteger("JobSource3EventHandler", "prescale", connections.jobSource3EventHandler.prescale);
		}
		if(parameter.checkIfParameterExists("JobSourceEventHandler", "prescale")) {
			parameter.getInteger("JobSourceEventHandler", "prescale", connections.jobSourceEventHandler.prescale);
		}
		
		
		// load parameters for all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->loadParameters(parameter);
		}
		
		paramHandler.loadParameter(parameter);
	
	} catch (const SmartACE::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
