//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _JOBRESULTSENDHANDLER_CORE_HH
#define _JOBRESULTSENDHANDLER_CORE_HH

#include <aceSmartSoft.hh>

// include the main input-handler interface
#include "JobResultSendServerUpcallInterface.hh"
// include all other input interfaces (if any)

// include all interaction-observer interfaces
#include <JobResultSendHandlerObserverInterface.hh>

class JobResultSendHandlerCore
:	public Smart::InputTaskTrigger<CommBasicObjects::CommTaskMessage>
,	public SmartACE::Task
,	public JobResultSendServerUpcallInterface
{
private:
	
	virtual void updateAllCommObjects();
	
	// implementing active-queue handler
	std::atomic<bool> signalled_to_stop;
	std::mutex handler_mutex;
	std::condition_variable handler_cond_var;
	std::list<CommBasicObjects::CommTaskMessage> request_queue;
	// inputs are pushed to the request_queue
	virtual void handle_input(const CommBasicObjects::CommTaskMessage& input);
	// inputs are processed from within the thread, thus implementing an active FIFO request-queue
	virtual int task_execution() override;
	// override the default stop behavior to also release the active request queue
	virtual int stop(const bool wait_till_stopped=true) override
	{
		signalled_to_stop = true;
		handler_cond_var.notify_all();
		return SmartACE::Task::stop();
	}
	
/**
 * Implementation of the Subject part of an InteractionObserver
 */
private:
	std::mutex interaction_observers_mutex;
	std::list<JobResultSendHandlerObserverInterface*> interaction_observers;
protected:
	void notify_all_interaction_observers();
public:
	void attach_interaction_observer(JobResultSendHandlerObserverInterface *observer);
	void detach_interaction_observer(JobResultSendHandlerObserverInterface *observer);
	
protected:

public:
	JobResultSendHandlerCore(
		Smart::InputSubject<CommBasicObjects::CommTaskMessage> *subject,
		const int &prescaleFactor=1);
	virtual ~JobResultSendHandlerCore();
};
#endif
