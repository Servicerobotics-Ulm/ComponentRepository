//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartJobDispatcherAcePortFactory.hh"

// create a static instance of the default AcePortFactory
static SmartJobDispatcherAcePortFactory acePortFactory;

SmartJobDispatcherAcePortFactory::SmartJobDispatcherAcePortFactory()
{  
	componentImpl = 0;
	SmartJobDispatcher::instance()->addPortFactory("ACE_SmartSoft", this);
}

SmartJobDispatcherAcePortFactory::~SmartJobDispatcherAcePortFactory()
{  }

void SmartJobDispatcherAcePortFactory::initialize(SmartJobDispatcher *component, int argc, char* argv[])
{
	if(component->connections.component.defaultScheduler != "DEFAULT") {
		ACE_Sched_Params sched_params(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(component->connections.component.defaultScheduler == "FIFO") {
			sched_params.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				sched_params.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				sched_params.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(component->connections.component.defaultScheduler == "RR") {
			sched_params.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				sched_params.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				sched_params.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		// create new instance of the SmartSoft component with customized scheuling parameters 
		componentImpl = new SmartJobDispatcherImpl(component->connections.component.name, argc, argv, sched_params);
	} else {
		// create new instance of the SmartSoft component
		componentImpl = new SmartJobDispatcherImpl(component->connections.component.name, argc, argv);
	}
}

int SmartJobDispatcherAcePortFactory::onStartup()
{
	return componentImpl->startComponentInfrastructure();
}

Smart::IQueryClientPattern<CommBasicObjects::CommKBRequest, CommBasicObjects::CommKBResponse> * SmartJobDispatcherAcePortFactory::createCommKBQueryReq()
{
	return new SmartACE::QueryClient<CommBasicObjects::CommKBRequest, CommBasicObjects::CommKBResponse>(componentImpl);
}

Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommNavigationObjects::CommNavigationTopologyMap> * SmartJobDispatcherAcePortFactory::createNavigationTopologyMapQueryReq()
{
	return new SmartACE::QueryClient<CommBasicObjects::CommVoid, CommNavigationObjects::CommNavigationTopologyMap>(componentImpl);
}

Smart::IQueryClientPattern<DomainSymbolicPlanner::CommSymbolicPlannerRequest, DomainSymbolicPlanner::CommSymbolicPlannerPlan> * SmartJobDispatcherAcePortFactory::createSymbolicPannerServiceReq()
{
	return new SmartACE::QueryClient<DomainSymbolicPlanner::CommSymbolicPlannerRequest, DomainSymbolicPlanner::CommSymbolicPlannerPlan>(componentImpl);
}

Smart::IEventClientPattern<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage> * SmartJobDispatcherAcePortFactory::createJobSource2EventClient()
{
	return new SmartACE::EventClient<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage>(componentImpl);
}

Smart::IEventClientPattern<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage> * SmartJobDispatcherAcePortFactory::createJobSource3EventClient()
{
	return new SmartACE::EventClient<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage>(componentImpl);
}

Smart::IEventClientPattern<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage> * SmartJobDispatcherAcePortFactory::createJobSourceEventClient()
{
	return new SmartACE::EventClient<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage>(componentImpl);
}


Smart::IPushServerPattern<CommBasicObjects::CommTaskMessage> * SmartJobDispatcherAcePortFactory::createTaskResultOut(const std::string &serviceName)
{
	return new SmartACE::PushServer<CommBasicObjects::CommTaskMessage>(componentImpl, serviceName);
}

Smart::IEventServerPattern<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskEventState> * SmartJobDispatcherAcePortFactory::createJobEventServer(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskEventState>> jobEventServerEventTestHandler)
{
	return new SmartACE::EventServer<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskEventState>(componentImpl, serviceName, jobEventServerEventTestHandler);
}

Smart::ISendServerPattern<CommBasicObjects::CommTaskMessage> * SmartJobDispatcherAcePortFactory::createJobResultSendServer(const std::string &serviceName)
{
	return new SmartACE::SendServer<CommBasicObjects::CommTaskMessage>(componentImpl, serviceName);
}


SmartACE::SmartComponent* SmartJobDispatcherAcePortFactory::getComponentImpl()
{
	return componentImpl;
}

int SmartJobDispatcherAcePortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	componentImpl->stopComponentInfrastructure(timeoutTime);
	return 0;
}

void SmartJobDispatcherAcePortFactory::destroy()
{
	// clean-up component's internally used resources (internally used communication middleware) 
	componentImpl->cleanUpComponentResources();
	delete componentImpl;
}
