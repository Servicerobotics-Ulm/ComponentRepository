//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _SMARTJOBDISPATCHER_HH
#define _SMARTJOBDISPATCHER_HH

#include <map>
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "SmartJobDispatcherCore.hh"

#include "SmartJobDispatcherPortFactoryInterface.hh"
#include "SmartJobDispatcherExtension.hh"

// forward declarations
class SmartJobDispatcherPortFactoryInterface;
class SmartJobDispatcherExtension;

// includes for PlainOpcUaSmartJobDispatcherExtension
// include plain OPC UA device clients
// include plain OPC UA status servers


// include communication objects
#include <CommBasicObjects/CommKBRequest.hh>
#include <CommBasicObjects/CommKBRequestACE.hh>
#include <CommBasicObjects/CommKBResponse.hh>
#include <CommBasicObjects/CommKBResponseACE.hh>
#include <CommNavigationObjects/CommNavigationTopologyMap.hh>
#include <CommNavigationObjects/CommNavigationTopologyMapACE.hh>
#include <DomainSymbolicPlanner/CommSymbolicPlannerPlan.hh>
#include <DomainSymbolicPlanner/CommSymbolicPlannerPlanACE.hh>
#include <DomainSymbolicPlanner/CommSymbolicPlannerRequest.hh>
#include <DomainSymbolicPlanner/CommSymbolicPlannerRequestACE.hh>
#include <CommBasicObjects/CommTaskEventState.hh>
#include <CommBasicObjects/CommTaskEventStateACE.hh>
#include <CommBasicObjects/CommTaskMessage.hh>
#include <CommBasicObjects/CommTaskMessageACE.hh>
#include <CommBasicObjects/CommVoid.hh>
#include <CommBasicObjects/CommVoidACE.hh>

// include tasks
#include "Dummy.hh"
// include UpcallManagers and InputCollectors
#include "JobResultSendServerUpcallManager.hh"
#include "JobResultSendServerInputCollector.hh"
#include "JobSource2EventClientUpcallManager.hh"
#include "JobSource2EventClientInputCollector.hh"
#include "JobSource3EventClientUpcallManager.hh"
#include "JobSource3EventClientInputCollector.hh"
#include "JobSourceEventClientUpcallManager.hh"
#include "JobSourceEventClientInputCollector.hh"

// include input-handler(s)
#include "JobResultSendHandler.hh"
#include "JobSource2EventHandler.hh"
#include "JobSource3EventHandler.hh"
#include "JobSourceEventHandler.hh"
// include request-handler(s)
// output port wrappers
#include "JobEventServerWrapper.hh"
#include "TaskResultOutWrapper.hh"

// include handler
#include "CompHandler.hh"

#include "ParameterStateStruct.hh"
#include "ParameterUpdateHandler.hh"

#include "SmartStateChangeHandler.hh"
#include "StateActivityManager.hh"


#define COMP SmartJobDispatcher::instance()

class SmartJobDispatcher : public SmartJobDispatcherCore {
private:
	static SmartJobDispatcher *_smartJobDispatcher;
	
	// constructor
	SmartJobDispatcher();
	
	// copy-constructor
	SmartJobDispatcher(const SmartJobDispatcher& cc);
	
	// destructor
	~SmartJobDispatcher() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	// helper method that maps a string-name to an according TaskTriggerSubject
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
	// internal map storing the different port-creation factories (that internally map to specific middleware implementations)
	std::map<std::string, SmartJobDispatcherPortFactoryInterface*> portFactoryRegistry;
	
	// internal map storing various extensions of this component class
	std::map<std::string, SmartJobDispatcherExtension*> componentExtensionRegistry;
	
public:
	ParameterStateStruct getGlobalState() const
	{
		return paramHandler.getGlobalState();
	}
	
	ParameterStateStruct getParameters() const
	{
		return paramHandler.getGlobalState();
	}
	
	// define tasks
	Smart::TaskTriggerSubject* dummyTrigger;
	Dummy *dummy;
	
	// define input-ports
	// InputPort jobResultSendServer
	Smart::ISendServerPattern<CommBasicObjects::CommTaskMessage> *jobResultSendServer;
	Smart::InputTaskTrigger<CommBasicObjects::CommTaskMessage> *jobResultSendServerInputTaskTrigger;
	JobResultSendServerUpcallManager *jobResultSendServerUpcallManager;
	JobResultSendServerInputCollector *jobResultSendServerInputCollector;
	// InputPort jobSource2EventClient
	Smart::IEventClientPattern<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage> *jobSource2EventClient;
	Smart::InputTaskTrigger<Smart::EventInputType<CommBasicObjects::CommTaskMessage>> *jobSource2EventClientInputTaskTrigger;
	JobSource2EventClientUpcallManager *jobSource2EventClientUpcallManager;
	JobSource2EventClientInputCollector *jobSource2EventClientInputCollector;
	// InputPort jobSource3EventClient
	Smart::IEventClientPattern<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage> *jobSource3EventClient;
	Smart::InputTaskTrigger<Smart::EventInputType<CommBasicObjects::CommTaskMessage>> *jobSource3EventClientInputTaskTrigger;
	JobSource3EventClientUpcallManager *jobSource3EventClientUpcallManager;
	JobSource3EventClientInputCollector *jobSource3EventClientInputCollector;
	// InputPort jobSourceEventClient
	Smart::IEventClientPattern<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage> *jobSourceEventClient;
	Smart::InputTaskTrigger<Smart::EventInputType<CommBasicObjects::CommTaskMessage>> *jobSourceEventClientInputTaskTrigger;
	JobSourceEventClientUpcallManager *jobSourceEventClientUpcallManager;
	JobSourceEventClientInputCollector *jobSourceEventClientInputCollector;
	
	// define request-ports
	Smart::IQueryClientPattern<CommBasicObjects::CommKBRequest, CommBasicObjects::CommKBResponse> *commKBQueryReq;
	Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommNavigationObjects::CommNavigationTopologyMap> *navigationTopologyMapQueryReq;
	Smart::IQueryClientPattern<DomainSymbolicPlanner::CommSymbolicPlannerRequest, DomainSymbolicPlanner::CommSymbolicPlannerPlan> *symbolicPannerServiceReq;
	
	// define input-handler
	JobResultSendHandler *jobResultSendHandler;
	JobSource2EventHandler *jobSource2EventHandler;
	JobSource3EventHandler *jobSource3EventHandler;
	JobSourceEventHandler *jobSourceEventHandler;
	
	// define output-ports
	Smart::IPushServerPattern<CommBasicObjects::CommTaskMessage> *taskResultOut;
	TaskResultOutWrapper *taskResultOutWrapper;
	Smart::IEventServerPattern<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskEventState> *jobEventServer;
	JobEventServerWrapper *jobEventServerWrapper;
	std::shared_ptr<Smart::IEventTestHandler<CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskMessage, CommBasicObjects::CommTaskEventState>> jobEventServerEventTestHandler;
	
	// define answer-ports
	
	// define request-handlers
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	StateActivityManager *stateActivityManager;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	ParamUpdateHandler paramHandler;
	SmartACE::ParameterSlave *param;
	
	// define master ports
	SmartACE::StateMaster *stateMaster;
	SmartACE::ParameterMaster *paramMaster;
	SmartACE::WiringMaster *wiringMaster;
	
	/// this method is used to register different PortFactory classes (one for each supported middleware framework)
	void addPortFactory(const std::string &name, SmartJobDispatcherPortFactoryInterface *portFactory);
	
	SmartACE::SmartComponent* getComponentImpl();
	
	/// this method is used to register different component-extension classes
	void addExtension(SmartJobDispatcherExtension *extension);
	
	/// this method allows to access the registered component-extensions (automatically converting to the actuall implementation type)
	template <typename T>
	T* getExtension(const std::string &name) {
		auto it = componentExtensionRegistry.find(name);
		if(it != componentExtensionRegistry.end()) {
			return dynamic_cast<T*>(it->second);
		}
		return 0;
	}
	
	/// initialize component's internal members
	void init(int argc, char *argv[]);
	
	/// execute the component's infrastructure
	void run();
	
	/// clean-up component's resources
	void fini();
	
	/// call this method to set the overall component into the Alive state (i.e. component is then ready to operate)
	void setStartupFinished();
	
	/// connect all component's client ports
	Smart::StatusCode connectAndStartAllServices();
	
	/// start all assocuated Activities
	void startAllTasks();
	
	/// start all associated timers
	void startAllTimers();
	
	Smart::StatusCode connectCommKBQueryReq(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectNavigationTopologyMapQueryReq(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectSymbolicPannerServiceReq(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectJobSource2EventClient(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectJobSource3EventClient(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectJobSourceEventClient(const std::string &serverName, const std::string &serviceName);

	// return singleton instance
	static SmartJobDispatcher* instance()
	{
		if(_smartJobDispatcher == 0) {
			_smartJobDispatcher = new SmartJobDispatcher();
		}
		return _smartJobDispatcher;
	}
	
	static void deleteInstance() {
		if(_smartJobDispatcher != 0) {
			delete _smartJobDispatcher;
		}
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct Dummy_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} dummy;
		
		//--- upcall parameter ---
		struct JobResultSendHandler_struct {
			int prescale;
		} jobResultSendHandler;
		struct JobSource2EventHandler_struct {
			int prescale;
		} jobSource2EventHandler;
		struct JobSource3EventHandler_struct {
			int prescale;
		} jobSource3EventHandler;
		struct JobSourceEventHandler_struct {
			int prescale;
		} jobSourceEventHandler;
		
		//--- server port parameter ---
		struct TaskResultOut_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} taskResultOut;
		struct JobEventServer_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} jobEventServer;
		struct JobResultSendServer_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} jobResultSendServer;
	
		//--- client port parameter ---
		struct CommKBQueryReq_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} commKBQueryReq;
		struct NavigationTopologyMapQueryReq_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} navigationTopologyMapQueryReq;
		struct SymbolicPannerServiceReq_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} symbolicPannerServiceReq;
		struct JobSource2EventClient_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} jobSource2EventClient;
		struct JobSource3EventClient_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} jobSource3EventClient;
		struct JobSourceEventClient_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} jobSourceEventClient;
		
	} connections;
};
#endif
