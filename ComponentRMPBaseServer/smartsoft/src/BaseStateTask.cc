//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "BaseStateTask.hh"
#include "ComponentRMPBaseServer.hh"

#include <iostream>

BaseStateTask::BaseStateTask(SmartACE::SmartComponent *comp) 
:	BaseStateTaskCore(comp)
{
	std::cout << "constructor BaseStateTask\n";
}
BaseStateTask::~BaseStateTask() 
{
	std::cout << "destructor BaseStateTask\n";
}



int BaseStateTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int BaseStateTask::on_execute()
{
	handle_push();
	return 0;
}
int BaseStateTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}

void BaseStateTask::handle_push()
{
	time_stamp.set_now(); // Set the timestamp to the current time

	//base_velocity.set_v(COMP->robot.getV(), 1);
	//base_velocity.set_omega_base(COMP->robot.getOmega());
	// TODO: Check if correct
	base_velocity.set_vX(COMP->robot.getV(), 1);
	base_velocity.setWZ(COMP->robot.getOmega());

	// push the objects CommBasePosition and CommBaseVelocity into the SmartSoft CommBaseState object
	base_state.set_time_stamp(time_stamp);
	base_state.set_base_position(COMP->robot.getBasePosition());
	base_state.set_base_raw_position(COMP->robot.getBaseRawPosition());
	base_state.set_base_velocity(base_velocity);

	if (COMP->getGlobalState().getRobot().getVerbose()) {
		std::cout << "[BaseStateHandler] current v, omeag: (" << COMP->robot.getV() << ", " << COMP->robot.getOmega() << ")\n";
	}

	// send the CommBaseState object to the client
	const Smart::StatusCode status = COMP->basePositionServer->put(base_state);
	if (status != Smart::SMART_OK) {
		std::cerr << "[BaseStateHandler] ERROR: failed to push base state (" << Smart::StatusCodeConversion(status) << ")" << std::endl;
	}

	CommBasicObjects::CommBatteryState batteryState;
	//	batteryState.setVoltage(COMP->robot.getBatteryVoltage());
	// TODO: Check if correct
	batteryState.setChargeValue(COMP->robot.getBatteryVoltage());
	COMP->batteryEventServer->put(batteryState);
}
