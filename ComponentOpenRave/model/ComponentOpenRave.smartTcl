(define-tcb (graspObject ?obj-id)
  (rules (rule-tcb-grasp-object-real-failed 
           rule-tcb-grasp-object-real-collision-failed 
           rule-tcb-grasp-object-real-ik-solution-failed
           rule-tcb-grasp-object-real-success
           rule-tcb-grasp-object-real-success-empty))
  (action (
          (format t "=========================>>> tcb-grasp-object real ~%")))
  (plan (
          ;(tcb-gripper open)
          ;(tcb-grasp-object move-manipulator ?obj-id)
          (move ?obj-id)
          ;(tcb-gripper close)
          )))
            
(define-tcb (move ?obj-id)
  (module "manipulationPlannerModule")
  (action (
            (format t "=========================>>> move ~d ~%" '?obj-id)
            (let* ((obj (tcl-kb-query :key '(is-a id) :value '((is-a object)(id ?obj-id))))
                   (pose (get-value obj 'pose))
                   (type (get-value obj 'type))
                   (obj-class (tcl-kb-query :key '(is-a type) :value `((is-a object-class)(type ,type))))
                   (grasp-strategy (first (get-value obj-class 'grasping)))
                   (grasp-angles (second (get-value obj-class 'grasping)))
                   ;(speech (get-value obj 'speech))
                   )
           
              (tcl-state :server 'cs_trajPlanning :state "Neutral")
              
		;; Timo
	      (setf grasp-angles `(,(first grasp-angles),(second grasp-angles),(third grasp-angles),(fourth grasp-angles), (fifth grasp-angles), (sixth grasp-angles), (-(*(nth 10 pose)57.296)0.5) ,(+(*(nth 10 pose)57.296)0.5),(-(*(nth 11 pose)57.296)0.5) ,(+(*(nth 11 pose)57.296)0.5),(nth 10 grasp-angles), (nth 11 grasp-angles)))
	      

	   
              (format t "GRASP-ANGLES 2: ~s ~s~%" grasp-strategy grasp-angles)
	      (tcl-param :server 'cs_trajPlanning :slot grasp-strategy :value grasp-angles)
              (tcl-param :server 'cs_trajPlanning :slot 'COMMIT)
              (tcl-state :server 'cs_trajExecution :state "Trajectory")
              (tcl-state :server 'cs_trajPlanning :state "Trajectory")
              (tcl-activate-event :name 'evt-traj 
                                  :handler 'handler-grasping 
                                  :server 'cs_trajExecution 
                                  :service 'manipulatorevent 
                                  :mode 'continuous)
              ;(tcl-activate-event :name 'evt-grasp-openrave
              ;                    :handler 'handler-grasping-openrave
              ;                    :server 'openrave 
              ;                    :service 'trajectoryevent
              ;                    :mode 'continuous)
              ;; Timo
	      ;; Center Pose
	      ;;(setf pose `(,(first pose) ,(second pose) ,(third pose) 0 0 0))
	      ;; OberflÃ¤chen Pose
              (setf pose `(,(eighth pose) ,(ninth pose) ,(tenth pose) 0 0 0))
	      ;;(setf pose `(,(eighth pose) ,(ninth pose) ,(tenth pose), (nth 10 pose), (nth 11 pose), (nth 12 pose)))            

              (format t "pose: ~s ~%" pose)
              
              ;(tcl-send :server 'openrave 
              ;         :service 'trajectory 
              ;          :param (append (list 'POSE) pose))
                        
              (tcl-param :server 'cs_trajPlanning :slot 'COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLAN_PATH_TARGET_TCP_POSE :value pose)

                        
              '(SUCCESS ())))))
              
              
(define-tcb (setManipulatorPose ?pose)
  (module "manipulationPlannerModule")
  (precondition  (not (equal '() (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?pose))) 'angles))))
  (action ((format t "=========================>>> tcb-manipulator-pose ~s ~%" '?pose)
            
           (let* ((gripper-before (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?pose))) 'gripper-before))
                  (gripper-after (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?pose))) 'gripper-after))
                  (angles (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?pose))) 'angles)))
            
           ;(cond
           ;  ((not (null gripper-after))
           ;   (tcl-push-plan :plan `((tcb-gripper ,gripper-after)))))
             
           (tcl-push-plan :plan `((tcb-manipulator-pose-angles ,angles)))
             
           ;(cond
           ;  ((not (null gripper-before))
           ;   (tcl-push-plan :plan `((tcb-gripper ,gripper-before)))))
             
            '(SUCCESS ())) 
            ))
            
             ; (plan (
	;		(tcb-manipulator-pose-angles ?pose)
         ;	 ))
            
)
            
(define-tcb (tcb-manipulator-pose-angles ?angles)
  (module "manipulationPlannerModule")
  (action (
            (format t "=========================>>> tcb-manipulator-pose-angles ~s ~%" '?angles)
            (tcl-activate-event :name 'evt-traj 
                                :handler 'handler-grasping
                               :server 'cs_trajExecution 
                                :service 'manipulatorevent 
                                :mode 'continuous)
            ;(tcl-activate-event :name 'evt-grasp-openrave
            ;                   :handler 'handler-planning
            ;                  :server 'cs_trajPlanning 
            ;                 :service 'plannerevent
            ;                :mode 'continuous)
                
              (tcl-state :server 'cs_trajExecution :state "Trajectory")
              (tcl-state :server 'cs_trajPlanning :state "Trajectory")
            
            (tcl-param :server 'cs_trajPlanning :slot 'COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLAN_PATH_TARGET_JOINT_ANGLES :value '(?angles))

            '(SUCCESS ()))))
            
;; handler-grasping
(define-event-handler (handler-grasping)
  (module "manipulationPlannerModule")
  (action (
            (format t "=========================>>> HANDLER GRASPING ~s ~%~%" (tcl-event-message))
            (cond
                ;; ok
                ((equal (tcl-event-message) "(GOAL REACHED)")
                  (format t "=========================>>> goal reached !!! obj-id ~s ~%" '?obj-id)
                  (tcl-state :server 'cs_trajPlanning :state "Neutral") 
                  ;(tcl-param :server 'cs_trajPlanning :slot 'COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.OPENRAVE_GRASPOBJ :value '?obj-id)
                ;; TODO: Check error obj-id unbound  
		  (tcl-kb-update :key '(is-a id) 
                                 :value `(
                                           (is-a OBJECT)
                                           (id ?obj-id)
                                           (status IN_GRIPPER)))
                  (tcl-abort)
                  '(SUCCESS ()))

                ;; collision
                ((equal (tcl-event-message) '(collision))
                  (format t "=========================>>> collision detected !!! obj-id ~s ~%" '?obj-id)
                  (tcl-send :server 'tts 
                       :service 'say 
                       :param (format nil "Oh sorry, it seems that I collided with an object." ))
; commented out by Matthias R., is done in scenario.lisp
;                  (tcl-kb-update :key '(is-a id) 
;                                 :value `(
;                                           (is-a OBJECT)
;                                           (id ,?obj-id)
;                                           (status NOT_GRASPABLE)))
                  (tcl-abort)
                  '(ERROR (GRASPING COLLISION)))

                ;; out of range
                ((equal (tcl-event-message) '(value out of range))
                  (format t "=========================>>> value out of range !!! ~%")   
	          (tcl-state :server 'manipulator :state "Neutral")
                  (tcl-kb-update :key '(is-a id) 
                                 :value `(
                                           (is-a OBJECT)
                                           (id ,?obj-id)
                                           (status NOT_GRASPABLE)))
                  (tcl-abort)
                  '(ERROR (GRASPING FAILED)))
                  
                  (t (format t "NO MATCH ~%"))
                  )
                  )))
                  
(define-event-handler (handler-planning)
  (action (
            (format t "=========================>>> HANDLER MANIPULATOR POSE OPENRAVE ~s ~%~%" (tcl-event-message))
            (cond
                ;; path found
                ((equal (first (tcl-event-message)) '(PATH FOUND))
                  (format t "=========================>>> PATH FOUND !!! ~%"))

                ;; planning path
                ((equal (first (tcl-event-message)) '(PLANNING_PATH))
                  (format t "=========================>>> PLANNING_PATH !!! ~%"))
              
                ;; no ik solution found
                ((equal (first (tcl-event-message)) '(NO IK SOLUTION FOUND))
                  (format t "=========================>>> NO IK SOLUTION FOUND !!! ~%")
                  (tcl-state :server 'openrave :state "Neutral")
                  (let* ((obj (tcl-kb-query :key '(is-a status) :value '((is-a object)(status IN_GRIPPER))))
                         (obj-id (get-value obj 'id)))
                    (cond
                      ((not (null obj))
                        (tcl-param :server 'openrave :slot 'OPENRAVE_RELEASEOBJ :value obj-id)
                        (tcl-kb-update :key '(is-a id) 
                          :value `(
                                    (is-a OBJECT)
                                    (id obj-id)
                                    (status NOT_GRASPABLE)))))) 
                  (tcl-abort)
                  '(ERROR (NO PATH)))
              
                ;; no path found
                ((equal (first (tcl-event-message)) '(NO PATH FOUND))
                  (format t "=========================>>> NO PATH FOUND !!! ~%")   
                  (tcl-state :server 'openrave :state "Neutral")
                  (let* ((obj (tcl-kb-query :key '(is-a status) :value '((is-a object)(status IN_GRIPPER))))
                         (obj-id (get-value obj 'id)))
                    (cond
                      ((not (null obj))
                        (tcl-param :server 'openrave :slot 'OPENRAVE_RELEASEOBJ :value obj-id)
                        (tcl-kb-update :key '(is-a id) 
                          :value `(
                                    (is-a OBJECT)
                                    (id ,obj-id)
                                    (status NOT_GRASPABLE))))))
                  (tcl-abort)
                  '(ERROR (NO PATH)))))))
                  
(define-tcb (loadEnvInOpenRave ?envId)
  (module "manipulationPlannerModule")
  (action (
            (format t "=========================>>> tcb-load-env-into-openrave ~s ~%" '?envId)
            (tcl-state :server 'cs_trajPlanning :state "Neutral")
            (tcl-activate-event :name 'evt-grasp-openrave
                                :handler 'handler-load-env
                                :server 'cs_trajPlanning 
                                :service 'trajectoryevent
                                :mode 'continuous)
            (tcl-param :server 'cs_trajPlanning :slot 'COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.ENV_LOAD_OBJECTRECOGNITION :value ?envId)
            (tcl-kb-update 
                      :key '(is-a id) 
                      :value `( 
                               (is-a environment)
                               (id ?envId)
                               (in-openrave true))))))
                               
(define-event-handler (handler-load-env)
  (module "manipulationPlannerModule")
  (action (
            (format t "=========================>>> HANDLER LOAD ENV TO OPENRAVE ~s ~%~%" (tcl-event-message))
            (cond
                ((equal (first (tcl-event-message)) '(LOAD OBJREC DATA DONE))
                  (format t "=========================>>> LOAD OBJREC DATA DONE !!! ~%")
                  (tcl-abort)
                  '(SUCCESS ()))
                (T
                  (format t "=========================>>> ERROR UNSUPPORTED EVENT !!! ~%")
                  (tcl-abort)
                  '(SUCCESS ()))))))
                  
(define-tcb (deleteObjInOpenRave ?obj-id)
  (module "manipulationPlannerModule")
  (action (
            (format t "=========================>>> tcb-delete-obj-from-openrave ~s ~%" '?obj-id)
            (tcl-state :server 'cs_trajPlanning :state "Neutral")
            (tcl-param :server 'cs_trajPlanning :slot 'COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.OBJ_DELETE :value '?obj-id)
            (tcl-param :server 'cs_trajPlanning :slot 'COMMIT)
            '(SUCCESS ()))))
            

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vacuum-gripper

(define-tcb (OpenGripper)
  (module "manipulationPlannerModule")
  (action (
            (format t "=========================>>> tcb-gripper open~%")
            (tcl-query :server 'cs_trajExecution :service 'ioquery :request '(DIGITAL 0 0 ))
            (tcl-query :server 'cs_trajExecution :service 'ioquery :request '(DIGITAL 1 1 ))
            (sleep 1.0)
            (tcl-query :server 'cs_trajExecution :service 'ioquery :request '(DIGITAL 1 0 ))                
            '(SUCCESS ()))))


(define-tcb (closeGripper)
  (module "manipulationPlannerModule")
  (action (
            (format t "=========================>>> tcb-gripper close~%")
            (tcl-activate-event :name    'evt-digitalin-ack
                                :handler 'handler-digitalin-grasp
                                :server  'cs_trajExecution 
                                :service 'ioevent
                                :mode    'single
                                :param   '(0 T))
;            (tcl-activate-event :handler 'handler-timer-expired-grasp
;                                :server  'timer 
;                                :service 'relative
;                                :mode    'single
;                                :param   '(2 0))
	    (tcl-query :server 'cs_trajExecution :service 'ioquery :request '(DIGITAL 0 1))
            ;(let* ((qres (tcl-query :server 'cs_trajExecution :service 'ioquery :request '(DIGITAL 0 1))))
            ;(format t "=========================>>> ioquery ~S ~%" 'qres))
            )))


(define-event-handler (handler-timer-expired-grasp)
  (module "manipulationPlannerModule")
  (action (
            (format t "=========================>>> HANDLER TIMER EXPIRED GRASP ~s ~%~%" (tcl-event-message))
            (let ((digitalin (first (tcl-query :server 'cs_trajExecution :service 'ioquery :request '(DIGITAL 0 1 )))))
              (format t "Grasp digital in: ~a~%" digitalin)
              (cond
                ((equal (nth 0 digitalin) 1)
                  (format t "Gripper grasp success!~%")
                  (tcl-abort)
                  '(SUCCESS ()))
               (T
                 (format t "Gripper grasp error!~%")
                 (tcl-abort)
                 '(ERROR (GRIPPER EMPTY)))))))) 
            
           

(define-event-handler (handler-digitalin-grasp)
  (module "manipulationPlannerModule")
  (action (
    (format t "=========================>>> HANDLER handler-digitalin-grasp: ~s ~%~%" (tcl-event-message))
    (let ((digitalin (first (tcl-query :server 'cs_trajExecution :service 'ioquery :request '(DIGITAL 0 1 )))))
           (format t "Grasp digital in: ~a~%" digitalin)
           (cond
             ((equal (nth 0 digitalin) 1)
               (format t "Gripper grasp success!~%")            
               (tcl-abort)
               '(SUCCESS ()))
             (T
               (format t "Gripper grasp error!~%")            
               (tcl-abort)
               '(ERROR (GRIPPER EMPTY))))))))

;; gripper
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
