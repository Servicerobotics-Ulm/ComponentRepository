//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "ComponentOpenRaveOpcUaBackendPortFactory.hh"

// include all potentially required pattern implementations
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/PushClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/EventClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QClientOPCUA.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/SendClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QueryClient.hpp>

#include <SeRoNetSDK/SeRoNet/OPCUA/Server/PushServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/EventServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/SendServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/QueryServer.hpp>

// include referenced CommunicationObject SeRoNetSDK self description implementations
#include "CommManipulatorObjectsOpcUa/CommManipulatorEventResultOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorTrajectoryOpcUa.hh"
#include "CommManipulationPlannerObjectsOpcUa/CommManipulationPlannerEventResultOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommGripperStateOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorEventParameterOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommVoidOpcUa.hh"
#include "CommObjectRecognitionObjectsOpcUa/CommObjectRecognitionEnvironmentOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommManipulatorEventStateOpcUa.hh"
#include "CommObjectRecognitionObjectsOpcUa/CommObjectRecognitionObjectPropertiesOpcUa.hh"
#include "CommManipulationPlannerObjectsOpcUa/CommManipulationPlannerEventParameterOpcUa.hh"
#include "CommManipulatorObjectsOpcUa/CommMobileManipulatorStateOpcUa.hh"
#include "CommManipulationPlannerObjectsOpcUa/CommManipulationPlannerEventStateOpcUa.hh"
#include "CommObjectRecognitionObjectsOpcUa/CommObjectRecognitionIdOpcUa.hh"

// create a static instance of the OpcUaBackendPortFactory
static ComponentOpenRaveOpcUaBackendPortFactory OpcUaBackendPortFactory;

ComponentOpenRaveOpcUaBackendPortFactory::ComponentOpenRaveOpcUaBackendPortFactory()
{  
	componentImpl = 0;
	ComponentOpenRave::instance()->addPortFactory("OpcUa_SeRoNet", this);
}

ComponentOpenRaveOpcUaBackendPortFactory::~ComponentOpenRaveOpcUaBackendPortFactory()
{  }

void ComponentOpenRaveOpcUaBackendPortFactory::initialize(ComponentOpenRave *component, int argc, char* argv[])
{
	componentImpl = new SeRoNet::Utils::Component(component->connections.component.name);
}

int ComponentOpenRaveOpcUaBackendPortFactory::onStartup()
{
	if (!component_thread.joinable()) {
    	component_thread = std::thread(&ComponentOpenRaveOpcUaBackendPortFactory::task_execution, this);
    	return 0;
    }
	return -1;
}

Smart::IEventClientPattern<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult> * ComponentOpenRaveOpcUaBackendPortFactory::createManipulatorEventServiceIn()
{
	return new SeRoNet::OPCUA::Client::EventClient<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult>(componentImpl);
}

Smart::IQueryClientPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties> * ComponentOpenRaveOpcUaBackendPortFactory::createObjectQueryServiceReq()
{
	return new SeRoNet::OPCUA::Client::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>(componentImpl);
}

Smart::IQueryClientPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionEnvironment> * ComponentOpenRaveOpcUaBackendPortFactory::createEnvironmentQueryServiceReq()
{
	return new SeRoNet::OPCUA::Client::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionEnvironment>(componentImpl);
}

Smart::IEventClientPattern<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult> * ComponentOpenRaveOpcUaBackendPortFactory::createGripperEventServiceIn()
{
	return new SeRoNet::OPCUA::Client::EventClient<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult>(componentImpl);
}

Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState> * ComponentOpenRaveOpcUaBackendPortFactory::createMobileManipulatorStateQueryServiceReq()
{
	return new SeRoNet::OPCUA::Client::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState>(componentImpl);
}

Smart::IPushClientPattern<CommManipulatorObjects::CommGripperState> * ComponentOpenRaveOpcUaBackendPortFactory::createGripperStateServiceIn()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommManipulatorObjects::CommGripperState>(componentImpl);
}

Smart::ISendClientPattern<CommManipulatorObjects::CommManipulatorTrajectory> * ComponentOpenRaveOpcUaBackendPortFactory::createSendTrajectoryOut()
{
	return new SeRoNet::OPCUA::Client::SendClient<CommManipulatorObjects::CommManipulatorTrajectory>(componentImpl);
}

Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommGripperState> * ComponentOpenRaveOpcUaBackendPortFactory::createGripperStateQueryServiceReq()
{
	return new SeRoNet::OPCUA::Client::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommGripperState>(componentImpl);
}

Smart::IPushClientPattern<CommManipulatorObjects::CommMobileManipulatorState> * ComponentOpenRaveOpcUaBackendPortFactory::createMobileManipulatorStateServiceIn()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommManipulatorObjects::CommMobileManipulatorState>(componentImpl);
}


Smart::IEventServerPattern<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState> * ComponentOpenRaveOpcUaBackendPortFactory::createPlanningEventServiceOut(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState>> planningEventServiceOutEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState>(componentImpl, serviceName, planningEventServiceOutEventTestHandler);
}

Smart::IQueryServerPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties> * ComponentOpenRaveOpcUaBackendPortFactory::createObjectQueryServiceAnsw(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::QueryServer<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>(componentImpl, serviceName);
}


int ComponentOpenRaveOpcUaBackendPortFactory::task_execution()
{
	componentImpl->run();
	return 0;
}

int ComponentOpenRaveOpcUaBackendPortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	// stop component-internal infrastructure
	componentImpl->stopRunning();
	// wait on component thread to exit
	if (component_thread.joinable()) {
		// FIXME: don't wait infinetly (use timeoutTime here)
    	component_thread.join();
    }
	return 0;
}

void ComponentOpenRaveOpcUaBackendPortFactory::destroy()
{
	// clean-up component's internally used resources
	delete componentImpl;
}
