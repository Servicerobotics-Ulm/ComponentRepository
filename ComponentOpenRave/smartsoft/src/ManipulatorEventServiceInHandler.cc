//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//  Copyright (C) 2012 Jonas Brich, Timo Hegele
//
//        hegele@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartOpenRave component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#include "ManipulatorEventServiceInHandler.hh"
#include "ComponentOpenRave.hh"
#include <iostream>

ManipulatorEventServiceInHandler::ManipulatorEventServiceInHandler(Smart::InputSubject<Smart::EventInputType<CommManipulatorObjects::CommManipulatorEventResult>> *subject, const int &prescaleFactor)
:	ManipulatorEventServiceInHandlerCore(subject, prescaleFactor)
{
	std::cout << "constructor ManipulatorEventServiceInHandler\n";
}
ManipulatorEventServiceInHandler::~ManipulatorEventServiceInHandler() 
{
	std::cout << "destructor ManipulatorEventServiceInHandler\n";
}

void ManipulatorEventServiceInHandler::on_ManipulatorEventServiceIn(const Smart::EventInputType<CommManipulatorObjects::CommManipulatorEventResult> &input)
{
	// implement business logic here
	// (do not use blocking calls here, otherwise this might block the InputPort ManipulatorEventServiceIn)


	std::cout << "ManipulatorEventClientHandler event handler: event received" << std::endl;

	ComponentOpenRaveCore::ManipulatorMode flag = COMP->NEUTRAL;
	/*
	 * Look which event has been sent from the manipulator
	 *
	 * If the GOAL_REACHED event is set, the next trajectory can be sent to the manipulator therefore set SEND_TRAJECTORY
	 * If COLLISION and NO_SOLUTION_FOUND event is set, a failure has occurred, therefore set FAILURE
	 * If the GOAL_NOT_REACHED event is set, therefore set NEUTRAL
	 * Otherwise set FAILURE
	 */

	if (input.event.get_event() == CommManipulatorObjects::ManipulatorEvent::GOAL_REACHED) {
		flag = COMP->SEND_TRAJECTORY;
	} else if (input.event.get_event() == CommManipulatorObjects::ManipulatorEvent::COLLISION || input.event.get_event()
			== CommManipulatorObjects::ManipulatorEvent::NO_SOLUTION_FOUND || input.event.get_event()
			== CommManipulatorObjects::ManipulatorEvent::VALUE_OUT_OF_RANGE) {
		flag = COMP->FAILURE;
	} else if (input.event.get_event() == CommManipulatorObjects::ManipulatorEvent::GOAL_NOT_REACHED) {
		flag = COMP->NEUTRAL;
	} else {
		flag = COMP->FAILURE;
	}

	//CHS::SmartGuard guard(COMP->ManipulatorModeMutex);
	COMP->manipulatorMode = flag;
	//guard.release();

	// Release the Semaphore to give the PathPlanningSendHandler notice to check the flag again
	COMP->ManipulatorWaitSem.release();
}
