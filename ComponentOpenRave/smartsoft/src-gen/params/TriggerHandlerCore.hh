//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _TRIGGERHANDLERCORE_HH
#define _TRIGGERHANDLERCORE_HH

#include "aceSmartSoft.hh"
#include <queue>

#include <string>
#include <iostream>
#include <list>

class TriggerHandlerCore : public SmartACE::ManagedTask
{
	friend class ParamUpdateHandler;
	
public:
	TriggerHandlerCore() 
	:	SmartACE::ManagedTask(NULL) //TODO: a propper component pointer should be probably used here instead of NULL
	,	mutex()
	,	sema(0) // initialize semaphore in blocking mode
	,	current_trigger_enumerator(TriggerEnumerators::UNDEFINED_TRIGGER_ACTION)
	{  
		this->start();
	}
	virtual ~TriggerHandlerCore() {  }

	// trigger user methods
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_CONSTRAINED_PATH(const double &fromHeight, const double &toHeight, const double &fromDepth, const double &toDepth, const double &fromSide, const double &toSide, const double &fromAzimuth, const double &toAzimuth, const double &fromElevation, const double &toElevation, const double &fromRoll, const double &toRoll) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_CLEAR() = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_FILE(const int &fileID) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_OBJECTRECOGNITION(const int &envID) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_SAVE_FILE() = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_CENTERED(const double &fromHeight, const double &toHeight, const double &fromDepth, const double &toDepth, const double &fromSide, const double &toSide, const double &fromAzimuth, const double &toAzimuth, const double &fromElevation, const double &toElevation, const double &fromRoll, const double &toRoll) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_NONE() = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_SIMPLE(const double &fromHeight, const double &toHeight, const double &fromDepth, const double &toDepth, const double &fromSide, const double &toSide, const double &fromAzimuth, const double &toAzimuth, const double &fromElevation, const double &toElevation, const double &fromRoll, const double &toRoll) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_NORMAL_PATH() = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_ADD(const int &objectID) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_COMPUTEGRASPTABLE(const int &objectID) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_DELETE(const int &objectID) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_MOVE(const int &objectID, const double &x, const double &y, const double &z, const double &yaw, const double &pitch, const double &roll) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_GRASPOBJ(const int &objectID) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_RELEASEOBJ(const int &objectID) = 0;
	
		class PLAN_FURNITURE_MANIPUATION_TASKType {
		public:
		
			/**
			 * Wrapper class for Enum mode
			 */
			class modeType {
			public:
				enum ENUM_mode {
					ENUM_VALUE_UNDEFINED = 0,
					OPEN_FURNITURE = 1
				};
				
				// default constructor
				modeType() { 
					value = ENUM_VALUE_UNDEFINED;
				}
				
				// copy constructor for enum type
				modeType(ENUM_mode e) {
					value = e;
				}
				
				// copy constructor for String type
				modeType(const std::string &literal) {
					from_string(literal);
				}
				
				// from_string assignment operator
				modeType& operator = (const std::string &literal) {
					from_string(literal);
					return *this;
				}
				
				// ENUM operator
				operator ENUM_mode() const {
					return value;
				}
				
				// String operator
				operator std::string() const {
					return to_string();
				}
				
				// compare operator
				bool operator == (const ENUM_mode t) const {
					return this->value == t;
				}
				
				std::string to_string() const {
					std::string result = "";
					switch (value) {
						case OPEN_FURNITURE:
							result = "OPEN_FURNITURE";
							break;
						default:
							result = "ENUM_VALUE_UNDEFINED";
							break;
					};
					return result;
				}
				
				void from_string(const std::string &literal) {
					if(literal == "OPEN_FURNITURE") {
						value = OPEN_FURNITURE;
					} else {
						value = ENUM_VALUE_UNDEFINED;
					}
				}
				
				// helper method to easily implement output stream
				void to_ostream(std::ostream &os = std::cout) const {
					os << to_string();
				}
			private:
				ENUM_mode value;
			};
			
		}; // end class PLAN_FURNITURE_MANIPUATION_TASKType
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_FURNITURE_MANIPUATION_TASK(const PLAN_FURNITURE_MANIPUATION_TASKType::modeType &mode, const unsigned int &furnitureIdentifier, const unsigned int &doorIdentifier, const double &openAmount) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_JOINT_ANGLES(const std::list<double> &angles) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_TCP_POSE(const double &x, const double &y, const double &z, const double &azimuth, const double &elevation, const double &roll) = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_PLAN_ALL() = 0;
	
		
		virtual void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_TEST_IK_ONLY() = 0;
	
	// extended trigger user methods
	
protected:
	SmartACE::SmartMutex mutex;
	SmartACE::SmartSemaphore sema;
	int on_execute();

	class TriggerEnumerators {
	public:
		enum ENUM {
			UNDEFINED_TRIGGER_ACTION
			, COMMMANIPULATIONPLANNEROBJECTS_MANIPULATIONPLANNERPARAMETER_PLAN_FURNITURE_MANIPUATION_TASK
			, COMMMANIPULATIONPLANNEROBJECTS_MANIPULATIONPLANNERPARAMETER_PLAN_PATH_TARGET_JOINT_ANGLES
			, COMMMANIPULATIONPLANNEROBJECTS_MANIPULATIONPLANNERPARAMETER_PLAN_PATH_TARGET_TCP_POSE
		};
	};
	TriggerEnumerators::ENUM current_trigger_enumerator;
	std::queue<TriggerEnumerators::ENUM> trigger_queue;
	
	// active trigger PLAN_FURNITURE_MANIPUATION_TASK
	struct CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_FURNITURE_MANIPUATION_TASKAttributes {
		unsigned int doorIdentifier;
		unsigned int furnitureIdentifier;
		PLAN_FURNITURE_MANIPUATION_TASKType::modeType mode;
		double openAmount;
	}current_CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_FURNITURE_MANIPUATION_TASK;
	std::queue<CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_FURNITURE_MANIPUATION_TASKAttributes> CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_FURNITURE_MANIPUATION_TASK_queue;
	
	// active trigger PLAN_PATH_TARGET_JOINT_ANGLES
	struct CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_JOINT_ANGLESAttributes {
		std::list<double> angles;
	}current_CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_JOINT_ANGLES;
	std::queue<CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_JOINT_ANGLESAttributes> CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_JOINT_ANGLES_queue;
	
	// active trigger PLAN_PATH_TARGET_TCP_POSE
	struct CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_TCP_POSEAttributes {
		double azimuth;
		double elevation;
		double roll;
		double x;
		double y;
		double z;
	}current_CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_TCP_POSE;
	std::queue<CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_TCP_POSEAttributes> CommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_TCP_POSE_queue;
	
private:
	// trigger internal methods
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_CONSTRAINED_PATHCore(const double &fromHeight, const double &toHeight, const double &fromDepth, const double &toDepth, const double &fromSide, const double &toSide, const double &fromAzimuth, const double &toAzimuth, const double &fromElevation, const double &toElevation, const double &fromRoll, const double &toRoll);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_CLEARCore();
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_FILECore(const int &fileID);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_OBJECTRECOGNITIONCore(const int &envID);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_SAVE_FILECore();
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_CENTEREDCore(const double &fromHeight, const double &toHeight, const double &fromDepth, const double &toDepth, const double &fromSide, const double &toSide, const double &fromAzimuth, const double &toAzimuth, const double &fromElevation, const double &toElevation, const double &fromRoll, const double &toRoll);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_NONECore();
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_SIMPLECore(const double &fromHeight, const double &toHeight, const double &fromDepth, const double &toDepth, const double &fromSide, const double &toSide, const double &fromAzimuth, const double &toAzimuth, const double &fromElevation, const double &toElevation, const double &fromRoll, const double &toRoll);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_NORMAL_PATHCore();
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_ADDCore(const int &objectID);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_COMPUTEGRASPTABLECore(const int &objectID);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_DELETECore(const int &objectID);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_MOVECore(const int &objectID, const double &x, const double &y, const double &z, const double &yaw, const double &pitch, const double &roll);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_GRASPOBJCore(const int &objectID);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_RELEASEOBJCore(const int &objectID);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_FURNITURE_MANIPUATION_TASKCore(const PLAN_FURNITURE_MANIPUATION_TASKType::modeType &mode, const unsigned int &furnitureIdentifier, const unsigned int &doorIdentifier, const double &openAmount);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_JOINT_ANGLESCore(const std::list<double> &angles);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_TCP_POSECore(const double &x, const double &y, const double &z, const double &azimuth, const double &elevation, const double &roll);
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_PLAN_ALLCore();
	void handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_TEST_IK_ONLYCore();
	
	// extended trigger internal methods 
};

#endif // _TRIGGERHANDLERCORE_HH
