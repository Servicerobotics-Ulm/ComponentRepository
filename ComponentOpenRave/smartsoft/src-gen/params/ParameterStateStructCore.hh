//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include "nlohmann/json.hpp"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter OpenRave
		 */
		class OpenRaveType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debugGrasping;
			bool debugOpenRave;
			bool debugSend;
			std::string defaultEnvironmentPath;
			bool gui_active;
			std::string objectDatabasePath;
			std::string objectDatabaseXMLFilename;
			std::string python_path;
			std::string robotName;
			std::string robotPath;
			bool saveObjectsToFile;
			bool saveTrajectoryToFile;
			bool showCompleteTrajectory;
			std::string storedEnvironmentName;
			std::string storedEnvironmentPath;
		
		public:
			// default constructor
			OpenRaveType() {
				debugGrasping = false;
				debugOpenRave = true;
				debugSend = false;
				defaultEnvironmentPath = "data/defaultOpenRave.env.xml";
				gui_active = true;
				objectDatabasePath = "data/openRaveModels/";
				objectDatabaseXMLFilename = "openRaveObjectsDB.xml";
				python_path = "etc/";
				robotName = "Katana";
				robotPath = "robots/katana.robot.xml";
				saveObjectsToFile = false;
				saveTrajectoryToFile = false;
				showCompleteTrajectory = false;
				storedEnvironmentName = "storedEnvironment";
				storedEnvironmentPath = "data/";
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebugGrasping() const { return debugGrasping; }
			inline bool getDebugOpenRave() const { return debugOpenRave; }
			inline bool getDebugSend() const { return debugSend; }
			inline std::string getDefaultEnvironmentPath() const { return defaultEnvironmentPath; }
			inline bool getGui_active() const { return gui_active; }
			inline std::string getObjectDatabasePath() const { return objectDatabasePath; }
			inline std::string getObjectDatabaseXMLFilename() const { return objectDatabaseXMLFilename; }
			inline std::string getPython_path() const { return python_path; }
			inline std::string getRobotName() const { return robotName; }
			inline std::string getRobotPath() const { return robotPath; }
			inline bool getSaveObjectsToFile() const { return saveObjectsToFile; }
			inline bool getSaveTrajectoryToFile() const { return saveTrajectoryToFile; }
			inline bool getShowCompleteTrajectory() const { return showCompleteTrajectory; }
			inline std::string getStoredEnvironmentName() const { return storedEnvironmentName; }
			inline std::string getStoredEnvironmentPath() const { return storedEnvironmentPath; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "OpenRave(";
				os << "debugGrasping = " << debugGrasping << ", ";
				os << "debugOpenRave = " << debugOpenRave << ", ";
				os << "debugSend = " << debugSend << ", ";
				os << "defaultEnvironmentPath = " << defaultEnvironmentPath << ", ";
				os << "gui_active = " << gui_active << ", ";
				os << "objectDatabasePath = " << objectDatabasePath << ", ";
				os << "objectDatabaseXMLFilename = " << objectDatabaseXMLFilename << ", ";
				os << "python_path = " << python_path << ", ";
				os << "robotName = " << robotName << ", ";
				os << "robotPath = " << robotPath << ", ";
				os << "saveObjectsToFile = " << saveObjectsToFile << ", ";
				os << "saveTrajectoryToFile = " << saveTrajectoryToFile << ", ";
				os << "showCompleteTrajectory = " << showCompleteTrajectory << ", ";
				os << "storedEnvironmentName = " << storedEnvironmentName << ", ";
				os << "storedEnvironmentPath = " << storedEnvironmentPath << ", ";
				os << ")\n";
			}
			
		}; // end class OpenRaveType
		
		/**
		 * Definition of Parameter PortParameter
		 */
		class PortParameterType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string gripperComponentName;
			std::string gripperComponentParameterService;
			bool withGripper;
			bool withManipulator;
			bool withObjectRecognition;
		
		public:
			// default constructor
			PortParameterType() {
				gripperComponentName = "SmartSchunkGripperServer";
				gripperComponentParameterService = "param";
				withGripper = true;
				withManipulator = true;
				withObjectRecognition = true;
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getGripperComponentName() const { return gripperComponentName; }
			inline std::string getGripperComponentParameterService() const { return gripperComponentParameterService; }
			inline bool getWithGripper() const { return withGripper; }
			inline bool getWithManipulator() const { return withManipulator; }
			inline bool getWithObjectRecognition() const { return withObjectRecognition; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "PortParameter(";
				os << "gripperComponentName = " << gripperComponentName << ", ";
				os << "gripperComponentParameterService = " << gripperComponentParameterService << ", ";
				os << "withGripper = " << withGripper << ", ";
				os << "withManipulator = " << withManipulator << ", ";
				os << "withObjectRecognition = " << withObjectRecognition << ", ";
				os << ")\n";
			}
			
		}; // end class PortParameterType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommManipulationPlannerObjects
		 */
		class CommManipulationPlannerObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet ManipulationPlannerParameter
			 */
			class ManipulationPlannerParameterType {
				friend class ParamUpdateHandler;
				public:
				protected:
					/**
					 * internal members
					 */
					
				public:
					/**
					 * public getter methods
					 */
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "ManipulationPlannerParameter(\n";
						os << ")";
					}
			}; // end of parameter-set class ManipulationPlannerParameterType
			
			protected:
				/**
				 * internal members
				 */
				ManipulationPlannerParameterType ManipulationPlannerParameter;
			
			public:
				/**
				 * public getter methods
				 */
				inline ManipulationPlannerParameterType getManipulationPlannerParameter() const { return ManipulationPlannerParameter; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommManipulationPlannerObjects(\n";
					ManipulationPlannerParameter.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommManipulationPlannerObjectsType
	
protected:

	// Internal params
	OpenRaveType OpenRave;
	PortParameterType PortParameter;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommManipulationPlannerObjectsType CommManipulationPlannerObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommManipulationPlannerObjects = commit.getCommManipulationPlannerObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	OpenRaveType getOpenRave() const {
		return OpenRave;
	}
	PortParameterType getPortParameter() const {
		return PortParameter;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommManipulationPlannerObjectsType getCommManipulationPlannerObjects() const {
		return CommManipulationPlannerObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		OpenRave.to_ostream(os);
		PortParameter.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommManipulationPlannerObjects.to_ostream(os);
	}
	
	std::string getAsJSONString() {
		nlohmann::json param;
	
		param["OpenRave"] = nlohmann::json {
			{"debugGrasping" , getOpenRave().getDebugGrasping()},
			{"debugOpenRave" , getOpenRave().getDebugOpenRave()},
			{"debugSend" , getOpenRave().getDebugSend()},
			{"defaultEnvironmentPath" , getOpenRave().getDefaultEnvironmentPath()},
			{"gui_active" , getOpenRave().getGui_active()},
			{"objectDatabasePath" , getOpenRave().getObjectDatabasePath()},
			{"objectDatabaseXMLFilename" , getOpenRave().getObjectDatabaseXMLFilename()},
			{"python_path" , getOpenRave().getPython_path()},
			{"robotName" , getOpenRave().getRobotName()},
			{"robotPath" , getOpenRave().getRobotPath()},
			{"saveObjectsToFile" , getOpenRave().getSaveObjectsToFile()},
			{"saveTrajectoryToFile" , getOpenRave().getSaveTrajectoryToFile()},
			{"showCompleteTrajectory" , getOpenRave().getShowCompleteTrajectory()},
			{"storedEnvironmentName" , getOpenRave().getStoredEnvironmentName()},
			{"storedEnvironmentPath" , getOpenRave().getStoredEnvironmentPath()}
		};
		param["PortParameter"] = nlohmann::json {
			{"gripperComponentName" , getPortParameter().getGripperComponentName()},
			{"gripperComponentParameterService" , getPortParameter().getGripperComponentParameterService()},
			{"withGripper" , getPortParameter().getWithGripper()},
			{"withManipulator" , getPortParameter().getWithManipulator()},
			{"withObjectRecognition" , getPortParameter().getWithObjectRecognition()}
		};
	
		param["ManipulationPlannerParameter"] = nlohmann::json {
		};
		
		return param.dump();
	}
};

#endif
