//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "ComponentOpenRave.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	if(request.getParameterDataMode() == SmartACE::ParameterDataMode::NAME){
		answer = handleParametersNamed(request);
	} else {
		answer = handleParametersSequence(request);
	}
	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersNamed(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.CONSTRAINED_PATH")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		double temp_fromHeight = 0.0;
		if(request.getDouble("fromHeight", temp_fromHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromHeight request: "<<request<<std::endl;
		}
		double temp_toHeight = 0.0;
		if(request.getDouble("toHeight", temp_toHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toHeight request: "<<request<<std::endl;
		}
		double temp_fromDepth = 0.0;
		if(request.getDouble("fromDepth", temp_fromDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromDepth request: "<<request<<std::endl;
		}
		double temp_toDepth = 0.0;
		if(request.getDouble("toDepth", temp_toDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toDepth request: "<<request<<std::endl;
		}
		double temp_fromSide = 0.0;
		if(request.getDouble("fromSide", temp_fromSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromSide request: "<<request<<std::endl;
		}
		double temp_toSide = 0.0;
		if(request.getDouble("toSide", temp_toSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toSide request: "<<request<<std::endl;
		}
		double temp_fromAzimuth = 0.0;
		if(request.getDouble("fromAzimuth", temp_fromAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromAzimuth request: "<<request<<std::endl;
		}
		double temp_toAzimuth = 0.0;
		if(request.getDouble("toAzimuth", temp_toAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toAzimuth request: "<<request<<std::endl;
		}
		double temp_fromElevation = 0.0;
		if(request.getDouble("fromElevation", temp_fromElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromElevation request: "<<request<<std::endl;
		}
		double temp_toElevation = 0.0;
		if(request.getDouble("toElevation", temp_toElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toElevation request: "<<request<<std::endl;
		}
		double temp_fromRoll = 0.0;
		if(request.getDouble("fromRoll", temp_fromRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromRoll request: "<<request<<std::endl;
		}
		double temp_toRoll = 0.0;
		if(request.getDouble("toRoll", temp_toRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toRoll request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_CONSTRAINED_PATHCore(
			temp_fromHeight, 
			temp_toHeight, 
			temp_fromDepth, 
			temp_toDepth, 
			temp_fromSide, 
			temp_toSide, 
			temp_fromAzimuth, 
			temp_toAzimuth, 
			temp_fromElevation, 
			temp_toElevation, 
			temp_fromRoll, 
			temp_toRoll
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.ENV_CLEAR")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_CLEARCore(
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.ENV_LOAD_FILE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_fileID = 0;
		if(request.getInteger("fileID", temp_fileID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fileID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_FILECore(
			temp_fileID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.ENV_LOAD_OBJECTRECOGNITION")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_envID = 0;
		if(request.getInteger("envID", temp_envID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: envID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_OBJECTRECOGNITIONCore(
			temp_envID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.ENV_SAVE_FILE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_SAVE_FILECore(
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.GRASPING_CENTERED")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		double temp_fromHeight = 0.0;
		if(request.getDouble("fromHeight", temp_fromHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromHeight request: "<<request<<std::endl;
		}
		double temp_toHeight = 0.0;
		if(request.getDouble("toHeight", temp_toHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toHeight request: "<<request<<std::endl;
		}
		double temp_fromDepth = 0.0;
		if(request.getDouble("fromDepth", temp_fromDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromDepth request: "<<request<<std::endl;
		}
		double temp_toDepth = 0.0;
		if(request.getDouble("toDepth", temp_toDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toDepth request: "<<request<<std::endl;
		}
		double temp_fromSide = 0.0;
		if(request.getDouble("fromSide", temp_fromSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromSide request: "<<request<<std::endl;
		}
		double temp_toSide = 0.0;
		if(request.getDouble("toSide", temp_toSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toSide request: "<<request<<std::endl;
		}
		double temp_fromAzimuth = 0.0;
		if(request.getDouble("fromAzimuth", temp_fromAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromAzimuth request: "<<request<<std::endl;
		}
		double temp_toAzimuth = 0.0;
		if(request.getDouble("toAzimuth", temp_toAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toAzimuth request: "<<request<<std::endl;
		}
		double temp_fromElevation = 0.0;
		if(request.getDouble("fromElevation", temp_fromElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromElevation request: "<<request<<std::endl;
		}
		double temp_toElevation = 0.0;
		if(request.getDouble("toElevation", temp_toElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toElevation request: "<<request<<std::endl;
		}
		double temp_fromRoll = 0.0;
		if(request.getDouble("fromRoll", temp_fromRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromRoll request: "<<request<<std::endl;
		}
		double temp_toRoll = 0.0;
		if(request.getDouble("toRoll", temp_toRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toRoll request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_CENTEREDCore(
			temp_fromHeight, 
			temp_toHeight, 
			temp_fromDepth, 
			temp_toDepth, 
			temp_fromSide, 
			temp_toSide, 
			temp_fromAzimuth, 
			temp_toAzimuth, 
			temp_fromElevation, 
			temp_toElevation, 
			temp_fromRoll, 
			temp_toRoll
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.GRASPING_NONE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_NONECore(
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.GRASPING_SIMPLE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		double temp_fromHeight = 0.0;
		if(request.getDouble("fromHeight", temp_fromHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromHeight request: "<<request<<std::endl;
		}
		double temp_toHeight = 0.0;
		if(request.getDouble("toHeight", temp_toHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toHeight request: "<<request<<std::endl;
		}
		double temp_fromDepth = 0.0;
		if(request.getDouble("fromDepth", temp_fromDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromDepth request: "<<request<<std::endl;
		}
		double temp_toDepth = 0.0;
		if(request.getDouble("toDepth", temp_toDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toDepth request: "<<request<<std::endl;
		}
		double temp_fromSide = 0.0;
		if(request.getDouble("fromSide", temp_fromSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromSide request: "<<request<<std::endl;
		}
		double temp_toSide = 0.0;
		if(request.getDouble("toSide", temp_toSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toSide request: "<<request<<std::endl;
		}
		double temp_fromAzimuth = 0.0;
		if(request.getDouble("fromAzimuth", temp_fromAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromAzimuth request: "<<request<<std::endl;
		}
		double temp_toAzimuth = 0.0;
		if(request.getDouble("toAzimuth", temp_toAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toAzimuth request: "<<request<<std::endl;
		}
		double temp_fromElevation = 0.0;
		if(request.getDouble("fromElevation", temp_fromElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromElevation request: "<<request<<std::endl;
		}
		double temp_toElevation = 0.0;
		if(request.getDouble("toElevation", temp_toElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toElevation request: "<<request<<std::endl;
		}
		double temp_fromRoll = 0.0;
		if(request.getDouble("fromRoll", temp_fromRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromRoll request: "<<request<<std::endl;
		}
		double temp_toRoll = 0.0;
		if(request.getDouble("toRoll", temp_toRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toRoll request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_SIMPLECore(
			temp_fromHeight, 
			temp_toHeight, 
			temp_fromDepth, 
			temp_toDepth, 
			temp_fromSide, 
			temp_toSide, 
			temp_fromAzimuth, 
			temp_toAzimuth, 
			temp_fromElevation, 
			temp_toElevation, 
			temp_fromRoll, 
			temp_toRoll
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.NORMAL_PATH")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_NORMAL_PATHCore(
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.OBJ_ADD")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("objectID", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_ADDCore(
			temp_objectID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.OBJ_COMPUTEGRASPTABLE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("objectID", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_COMPUTEGRASPTABLECore(
			temp_objectID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.OBJ_DELETE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("objectID", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_DELETECore(
			temp_objectID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.OBJ_MOVE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("objectID", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		double temp_x = 0.0;
		if(request.getDouble("x", temp_x) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: x request: "<<request<<std::endl;
		}
		double temp_y = 0.0;
		if(request.getDouble("y", temp_y) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: y request: "<<request<<std::endl;
		}
		double temp_z = 0.0;
		if(request.getDouble("z", temp_z) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: z request: "<<request<<std::endl;
		}
		double temp_yaw = 0.0;
		if(request.getDouble("yaw", temp_yaw) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: yaw request: "<<request<<std::endl;
		}
		double temp_pitch = 0.0;
		if(request.getDouble("pitch", temp_pitch) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: pitch request: "<<request<<std::endl;
		}
		double temp_roll = 0.0;
		if(request.getDouble("roll", temp_roll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: roll request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_MOVECore(
			temp_objectID, 
			temp_x, 
			temp_y, 
			temp_z, 
			temp_yaw, 
			temp_pitch, 
			temp_roll
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLANNING_GRASPOBJ")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("objectID", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_GRASPOBJCore(
			temp_objectID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLANNING_RELEASEOBJ")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("objectID", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_RELEASEOBJCore(
			temp_objectID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLAN_FURNITURE_MANIPUATION_TASK")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_mode = "";
		if(request.getString("mode", temp_mode) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: mode request: "<<request<<std::endl;
		}
		unsigned int temp_furnitureIdentifier = 0;
		if(request.getInteger("furnitureIdentifier", temp_furnitureIdentifier) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: furnitureIdentifier request: "<<request<<std::endl;
		}
		unsigned int temp_doorIdentifier = 0;
		if(request.getInteger("doorIdentifier", temp_doorIdentifier) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: doorIdentifier request: "<<request<<std::endl;
		}
		double temp_openAmount = 0.0;
		if(request.getDouble("openAmount", temp_openAmount) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: openAmount request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_FURNITURE_MANIPUATION_TASKCore(
			temp_mode, 
			temp_furnitureIdentifier, 
			temp_doorIdentifier, 
			temp_openAmount
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLAN_PATH_TARGET_JOINT_ANGLES")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::list<double> temp_angles;
		if(request.getDoubleList("angles", temp_angles) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: angles request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_JOINT_ANGLESCore(
			temp_angles
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLAN_PATH_TARGET_TCP_POSE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		double temp_x = 0.0;
		if(request.getDouble("x", temp_x) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: x request: "<<request<<std::endl;
		}
		double temp_y = 0.0;
		if(request.getDouble("y", temp_y) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: y request: "<<request<<std::endl;
		}
		double temp_z = 0.0;
		if(request.getDouble("z", temp_z) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: z request: "<<request<<std::endl;
		}
		double temp_azimuth = 0.0;
		if(request.getDouble("azimuth", temp_azimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: azimuth request: "<<request<<std::endl;
		}
		double temp_elevation = 0.0;
		if(request.getDouble("elevation", temp_elevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: elevation request: "<<request<<std::endl;
		}
		double temp_roll = 0.0;
		if(request.getDouble("roll", temp_roll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: roll request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_TCP_POSECore(
			temp_x, 
			temp_y, 
			temp_z, 
			temp_azimuth, 
			temp_elevation, 
			temp_roll
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.SIMULATION_PLAN_ALL")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_PLAN_ALLCore(
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.SIMULATION_TEST_IK_ONLY")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_TEST_IK_ONLYCore(
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


SmartACE::CommParameterResponse ParamUpdateHandler::handleParametersSequence(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;
	
	std::string tag = request.getTag();
	for (auto & c: tag) c = toupper(c);
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.CONSTRAINED_PATH")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		double temp_fromHeight = 0.0;
		if(request.getDouble("1", temp_fromHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromHeight request: "<<request<<std::endl;
		}
		double temp_toHeight = 0.0;
		if(request.getDouble("2", temp_toHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toHeight request: "<<request<<std::endl;
		}
		double temp_fromDepth = 0.0;
		if(request.getDouble("3", temp_fromDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromDepth request: "<<request<<std::endl;
		}
		double temp_toDepth = 0.0;
		if(request.getDouble("4", temp_toDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toDepth request: "<<request<<std::endl;
		}
		double temp_fromSide = 0.0;
		if(request.getDouble("5", temp_fromSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromSide request: "<<request<<std::endl;
		}
		double temp_toSide = 0.0;
		if(request.getDouble("6", temp_toSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toSide request: "<<request<<std::endl;
		}
		double temp_fromAzimuth = 0.0;
		if(request.getDouble("7", temp_fromAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromAzimuth request: "<<request<<std::endl;
		}
		double temp_toAzimuth = 0.0;
		if(request.getDouble("8", temp_toAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toAzimuth request: "<<request<<std::endl;
		}
		double temp_fromElevation = 0.0;
		if(request.getDouble("9", temp_fromElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromElevation request: "<<request<<std::endl;
		}
		double temp_toElevation = 0.0;
		if(request.getDouble("10", temp_toElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toElevation request: "<<request<<std::endl;
		}
		double temp_fromRoll = 0.0;
		if(request.getDouble("11", temp_fromRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromRoll request: "<<request<<std::endl;
		}
		double temp_toRoll = 0.0;
		if(request.getDouble("12", temp_toRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toRoll request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_CONSTRAINED_PATHCore(
			temp_fromHeight, 
			temp_toHeight, 
			temp_fromDepth, 
			temp_toDepth, 
			temp_fromSide, 
			temp_toSide, 
			temp_fromAzimuth, 
			temp_toAzimuth, 
			temp_fromElevation, 
			temp_toElevation, 
			temp_fromRoll, 
			temp_toRoll
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.ENV_CLEAR")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_CLEARCore(
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.ENV_LOAD_FILE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_fileID = 0;
		if(request.getInteger("1", temp_fileID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fileID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_FILECore(
			temp_fileID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.ENV_LOAD_OBJECTRECOGNITION")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_envID = 0;
		if(request.getInteger("1", temp_envID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: envID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_LOAD_OBJECTRECOGNITIONCore(
			temp_envID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.ENV_SAVE_FILE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_ENV_SAVE_FILECore(
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.GRASPING_CENTERED")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		double temp_fromHeight = 0.0;
		if(request.getDouble("1", temp_fromHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromHeight request: "<<request<<std::endl;
		}
		double temp_toHeight = 0.0;
		if(request.getDouble("2", temp_toHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toHeight request: "<<request<<std::endl;
		}
		double temp_fromDepth = 0.0;
		if(request.getDouble("3", temp_fromDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromDepth request: "<<request<<std::endl;
		}
		double temp_toDepth = 0.0;
		if(request.getDouble("4", temp_toDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toDepth request: "<<request<<std::endl;
		}
		double temp_fromSide = 0.0;
		if(request.getDouble("5", temp_fromSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromSide request: "<<request<<std::endl;
		}
		double temp_toSide = 0.0;
		if(request.getDouble("6", temp_toSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toSide request: "<<request<<std::endl;
		}
		double temp_fromAzimuth = 0.0;
		if(request.getDouble("7", temp_fromAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromAzimuth request: "<<request<<std::endl;
		}
		double temp_toAzimuth = 0.0;
		if(request.getDouble("8", temp_toAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toAzimuth request: "<<request<<std::endl;
		}
		double temp_fromElevation = 0.0;
		if(request.getDouble("9", temp_fromElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromElevation request: "<<request<<std::endl;
		}
		double temp_toElevation = 0.0;
		if(request.getDouble("10", temp_toElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toElevation request: "<<request<<std::endl;
		}
		double temp_fromRoll = 0.0;
		if(request.getDouble("11", temp_fromRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromRoll request: "<<request<<std::endl;
		}
		double temp_toRoll = 0.0;
		if(request.getDouble("12", temp_toRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toRoll request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_CENTEREDCore(
			temp_fromHeight, 
			temp_toHeight, 
			temp_fromDepth, 
			temp_toDepth, 
			temp_fromSide, 
			temp_toSide, 
			temp_fromAzimuth, 
			temp_toAzimuth, 
			temp_fromElevation, 
			temp_toElevation, 
			temp_fromRoll, 
			temp_toRoll
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.GRASPING_NONE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_NONECore(
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.GRASPING_SIMPLE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		double temp_fromHeight = 0.0;
		if(request.getDouble("1", temp_fromHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromHeight request: "<<request<<std::endl;
		}
		double temp_toHeight = 0.0;
		if(request.getDouble("2", temp_toHeight) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toHeight request: "<<request<<std::endl;
		}
		double temp_fromDepth = 0.0;
		if(request.getDouble("3", temp_fromDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromDepth request: "<<request<<std::endl;
		}
		double temp_toDepth = 0.0;
		if(request.getDouble("4", temp_toDepth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toDepth request: "<<request<<std::endl;
		}
		double temp_fromSide = 0.0;
		if(request.getDouble("5", temp_fromSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromSide request: "<<request<<std::endl;
		}
		double temp_toSide = 0.0;
		if(request.getDouble("6", temp_toSide) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toSide request: "<<request<<std::endl;
		}
		double temp_fromAzimuth = 0.0;
		if(request.getDouble("7", temp_fromAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromAzimuth request: "<<request<<std::endl;
		}
		double temp_toAzimuth = 0.0;
		if(request.getDouble("8", temp_toAzimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toAzimuth request: "<<request<<std::endl;
		}
		double temp_fromElevation = 0.0;
		if(request.getDouble("9", temp_fromElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromElevation request: "<<request<<std::endl;
		}
		double temp_toElevation = 0.0;
		if(request.getDouble("10", temp_toElevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toElevation request: "<<request<<std::endl;
		}
		double temp_fromRoll = 0.0;
		if(request.getDouble("11", temp_fromRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: fromRoll request: "<<request<<std::endl;
		}
		double temp_toRoll = 0.0;
		if(request.getDouble("12", temp_toRoll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: toRoll request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_GRASPING_SIMPLECore(
			temp_fromHeight, 
			temp_toHeight, 
			temp_fromDepth, 
			temp_toDepth, 
			temp_fromSide, 
			temp_toSide, 
			temp_fromAzimuth, 
			temp_toAzimuth, 
			temp_fromElevation, 
			temp_toElevation, 
			temp_fromRoll, 
			temp_toRoll
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.NORMAL_PATH")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_NORMAL_PATHCore(
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.OBJ_ADD")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("1", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_ADDCore(
			temp_objectID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.OBJ_COMPUTEGRASPTABLE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("1", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_COMPUTEGRASPTABLECore(
			temp_objectID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.OBJ_DELETE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("1", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_DELETECore(
			temp_objectID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.OBJ_MOVE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("1", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		double temp_x = 0.0;
		if(request.getDouble("2", temp_x) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: x request: "<<request<<std::endl;
		}
		double temp_y = 0.0;
		if(request.getDouble("3", temp_y) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: y request: "<<request<<std::endl;
		}
		double temp_z = 0.0;
		if(request.getDouble("4", temp_z) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: z request: "<<request<<std::endl;
		}
		double temp_yaw = 0.0;
		if(request.getDouble("5", temp_yaw) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: yaw request: "<<request<<std::endl;
		}
		double temp_pitch = 0.0;
		if(request.getDouble("6", temp_pitch) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: pitch request: "<<request<<std::endl;
		}
		double temp_roll = 0.0;
		if(request.getDouble("7", temp_roll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: roll request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_OBJ_MOVECore(
			temp_objectID, 
			temp_x, 
			temp_y, 
			temp_z, 
			temp_yaw, 
			temp_pitch, 
			temp_roll
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLANNING_GRASPOBJ")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("1", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_GRASPOBJCore(
			temp_objectID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLANNING_RELEASEOBJ")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		int temp_objectID = 0;
		if(request.getInteger("1", temp_objectID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: objectID request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLANNING_RELEASEOBJCore(
			temp_objectID
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLAN_FURNITURE_MANIPUATION_TASK")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_mode = "";
		if(request.getString("1", temp_mode) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: mode request: "<<request<<std::endl;
		}
		unsigned int temp_furnitureIdentifier = 0;
		if(request.getInteger("2", temp_furnitureIdentifier) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: furnitureIdentifier request: "<<request<<std::endl;
		}
		unsigned int temp_doorIdentifier = 0;
		if(request.getInteger("3", temp_doorIdentifier) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: doorIdentifier request: "<<request<<std::endl;
		}
		double temp_openAmount = 0.0;
		if(request.getDouble("4", temp_openAmount) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: openAmount request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_FURNITURE_MANIPUATION_TASKCore(
			temp_mode, 
			temp_furnitureIdentifier, 
			temp_doorIdentifier, 
			temp_openAmount
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLAN_PATH_TARGET_JOINT_ANGLES")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::list<double> temp_angles;
		if(request.getDoubleList("1", temp_angles) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: angles request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_JOINT_ANGLESCore(
			temp_angles
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.PLAN_PATH_TARGET_TCP_POSE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		double temp_x = 0.0;
		if(request.getDouble("1", temp_x) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: x request: "<<request<<std::endl;
		}
		double temp_y = 0.0;
		if(request.getDouble("2", temp_y) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: y request: "<<request<<std::endl;
		}
		double temp_z = 0.0;
		if(request.getDouble("3", temp_z) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: z request: "<<request<<std::endl;
		}
		double temp_azimuth = 0.0;
		if(request.getDouble("4", temp_azimuth) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: azimuth request: "<<request<<std::endl;
		}
		double temp_elevation = 0.0;
		if(request.getDouble("5", temp_elevation) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: elevation request: "<<request<<std::endl;
		}
		double temp_roll = 0.0;
		if(request.getDouble("6", temp_roll) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
			std::cout<<"ParamUpdateHandler - error parsing value: roll request: "<<request<<std::endl;
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_PLAN_PATH_TARGET_TCP_POSECore(
			temp_x, 
			temp_y, 
			temp_z, 
			temp_azimuth, 
			temp_elevation, 
			temp_roll
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.SIMULATION_PLAN_ALL")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_PLAN_ALLCore(
			);
		}
	}
	else if (tag == "COMMMANIPULATIONPLANNEROBJECTS.MANIPULATIONPLANNERPARAMETER.SIMULATION_TEST_IK_ONLY")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommManipulationPlannerObjects_ManipulationPlannerParameter_SIMULATION_TEST_IK_ONLYCore(
			);
		}
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter OpenRave
		if(parameter.getBoolean("OpenRave", "debugGrasping", commitState.OpenRave.debugGrasping))
		{
			globalState.OpenRave.debugGrasping = commitState.OpenRave.debugGrasping;
		}
		if(parameter.getBoolean("OpenRave", "debugOpenRave", commitState.OpenRave.debugOpenRave))
		{
			globalState.OpenRave.debugOpenRave = commitState.OpenRave.debugOpenRave;
		}
		if(parameter.getBoolean("OpenRave", "debugSend", commitState.OpenRave.debugSend))
		{
			globalState.OpenRave.debugSend = commitState.OpenRave.debugSend;
		}
		if(parameter.getString("OpenRave", "defaultEnvironmentPath", commitState.OpenRave.defaultEnvironmentPath))
		{
			globalState.OpenRave.defaultEnvironmentPath = commitState.OpenRave.defaultEnvironmentPath;
		}
		if(parameter.getBoolean("OpenRave", "gui_active", commitState.OpenRave.gui_active))
		{
			globalState.OpenRave.gui_active = commitState.OpenRave.gui_active;
		}
		if(parameter.getString("OpenRave", "objectDatabasePath", commitState.OpenRave.objectDatabasePath))
		{
			globalState.OpenRave.objectDatabasePath = commitState.OpenRave.objectDatabasePath;
		}
		if(parameter.getString("OpenRave", "objectDatabaseXMLFilename", commitState.OpenRave.objectDatabaseXMLFilename))
		{
			globalState.OpenRave.objectDatabaseXMLFilename = commitState.OpenRave.objectDatabaseXMLFilename;
		}
		if(parameter.getString("OpenRave", "python_path", commitState.OpenRave.python_path))
		{
			globalState.OpenRave.python_path = commitState.OpenRave.python_path;
		}
		if(parameter.getString("OpenRave", "robotName", commitState.OpenRave.robotName))
		{
			globalState.OpenRave.robotName = commitState.OpenRave.robotName;
		}
		if(parameter.getString("OpenRave", "robotPath", commitState.OpenRave.robotPath))
		{
			globalState.OpenRave.robotPath = commitState.OpenRave.robotPath;
		}
		if(parameter.getBoolean("OpenRave", "saveObjectsToFile", commitState.OpenRave.saveObjectsToFile))
		{
			globalState.OpenRave.saveObjectsToFile = commitState.OpenRave.saveObjectsToFile;
		}
		if(parameter.getBoolean("OpenRave", "saveTrajectoryToFile", commitState.OpenRave.saveTrajectoryToFile))
		{
			globalState.OpenRave.saveTrajectoryToFile = commitState.OpenRave.saveTrajectoryToFile;
		}
		if(parameter.getBoolean("OpenRave", "showCompleteTrajectory", commitState.OpenRave.showCompleteTrajectory))
		{
			globalState.OpenRave.showCompleteTrajectory = commitState.OpenRave.showCompleteTrajectory;
		}
		if(parameter.getString("OpenRave", "storedEnvironmentName", commitState.OpenRave.storedEnvironmentName))
		{
			globalState.OpenRave.storedEnvironmentName = commitState.OpenRave.storedEnvironmentName;
		}
		if(parameter.getString("OpenRave", "storedEnvironmentPath", commitState.OpenRave.storedEnvironmentPath))
		{
			globalState.OpenRave.storedEnvironmentPath = commitState.OpenRave.storedEnvironmentPath;
		}
		// parameter PortParameter
		if(parameter.getString("PortParameter", "gripperComponentName", commitState.PortParameter.gripperComponentName))
		{
			globalState.PortParameter.gripperComponentName = commitState.PortParameter.gripperComponentName;
		}
		if(parameter.getString("PortParameter", "gripperComponentParameterService", commitState.PortParameter.gripperComponentParameterService))
		{
			globalState.PortParameter.gripperComponentParameterService = commitState.PortParameter.gripperComponentParameterService;
		}
		if(parameter.getBoolean("PortParameter", "withGripper", commitState.PortParameter.withGripper))
		{
			globalState.PortParameter.withGripper = commitState.PortParameter.withGripper;
		}
		if(parameter.getBoolean("PortParameter", "withManipulator", commitState.PortParameter.withManipulator))
		{
			globalState.PortParameter.withManipulator = commitState.PortParameter.withManipulator;
		}
		if(parameter.getBoolean("PortParameter", "withObjectRecognition", commitState.PortParameter.withObjectRecognition))
		{
			globalState.PortParameter.withObjectRecognition = commitState.PortParameter.withObjectRecognition;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
