//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ComponentOpenRave.hh"
#include "smartTimedTaskTrigger.h"
//FIXME: implement logging
//#include "smartGlobalLogger.hh"

// the ace port-factory is used as a default port-mapping
#include "ComponentOpenRaveAcePortFactory.hh"

#include "PlanningEventServiceOutEventTestHandler.hh"

// initialize static singleton pointer to zero
ComponentOpenRave* ComponentOpenRave::_componentOpenRave = 0;

// constructor
ComponentOpenRave::ComponentOpenRave()
{
	std::cout << "constructor of ComponentOpenRave\n";
	
	// set all pointer members to NULL
	//coordinationPort = NULL;
	//coordinationPort = NULL;
	demonstrationTask = NULL;
	demonstrationTaskTrigger = NULL;
	environmentQueryServiceReq = NULL;
	eventActivity = NULL;
	eventActivityTrigger = NULL;
	gripperEventServiceIn = NULL;
	gripperEventServiceInInputTaskTrigger = NULL;
	gripperEventServiceInUpcallManager = NULL;
	gripperEventServiceInInputCollector = NULL;
	gripperEventServiceInHandler = NULL;
	gripperStateQueryServiceReq = NULL;
	gripperStateServiceIn = NULL;
	gripperStateServiceInInputTaskTrigger = NULL;
	gripperStateServiceInUpcallManager = NULL;
	gripperStateServiceInInputCollector = NULL;
	manipulatorEventServiceIn = NULL;
	manipulatorEventServiceInInputTaskTrigger = NULL;
	manipulatorEventServiceInUpcallManager = NULL;
	manipulatorEventServiceInInputCollector = NULL;
	manipulatorEventServiceInHandler = NULL;
	mobileManipulatorStateQueryServiceReq = NULL;
	mobileManipulatorStateServiceIn = NULL;
	mobileManipulatorStateServiceInInputTaskTrigger = NULL;
	mobileManipulatorStateServiceInUpcallManager = NULL;
	mobileManipulatorStateServiceInInputCollector = NULL;
	objectQueryServiceAnsw = NULL;
	objectQueryServiceAnswInputTaskTrigger = NULL;
	objectQueryServiceAnswHandler = NULL;
	objectQueryServiceReq = NULL;
	planningEventServiceOut = NULL;
	planningEventServiceOutWrapper = NULL;
	planningEventServiceOutEventTestHandler = nullptr; 
	sendTrajectoryOut = NULL;
	sendTrajectoryOutWrapper = NULL;
	trajectorySampling = NULL;
	trajectorySamplingTrigger = NULL;
	stateChangeHandler = NULL;
	stateSlave = NULL;
	wiringSlave = NULL;
	param = NULL;
	
	// set default ini parameter values
	connections.component.name = "ComponentOpenRave";
	connections.component.initialComponentMode = "Neutral";
	connections.component.defaultScheduler = "DEFAULT";
	connections.component.useLogger = false;
	
	connections.objectQueryServiceAnsw.serviceName = "ObjectQueryServiceAnsw";
	connections.objectQueryServiceAnsw.roboticMiddleware = "ACE_SmartSoft";
	connections.planningEventServiceOut.serviceName = "PlanningEventServiceOut";
	connections.planningEventServiceOut.roboticMiddleware = "ACE_SmartSoft";
	connections.environmentQueryServiceReq.initialConnect = false;
	connections.environmentQueryServiceReq.wiringName = "EnvironmentQueryServiceReq";
	connections.environmentQueryServiceReq.serverName = "unknown";
	connections.environmentQueryServiceReq.serviceName = "unknown";
	connections.environmentQueryServiceReq.interval = 1;
	connections.environmentQueryServiceReq.roboticMiddleware = "ACE_SmartSoft";
	connections.gripperEventServiceIn.initialConnect = false;
	connections.gripperEventServiceIn.wiringName = "GripperEventServiceIn";
	connections.gripperEventServiceIn.serverName = "unknown";
	connections.gripperEventServiceIn.serviceName = "unknown";
	connections.gripperEventServiceIn.interval = 1;
	connections.gripperEventServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.gripperStateQueryServiceReq.initialConnect = false;
	connections.gripperStateQueryServiceReq.wiringName = "GripperStateQueryServiceReq";
	connections.gripperStateQueryServiceReq.serverName = "unknown";
	connections.gripperStateQueryServiceReq.serviceName = "unknown";
	connections.gripperStateQueryServiceReq.interval = 1;
	connections.gripperStateQueryServiceReq.roboticMiddleware = "ACE_SmartSoft";
	connections.gripperStateServiceIn.initialConnect = false;
	connections.gripperStateServiceIn.wiringName = "GripperStateServiceIn";
	connections.gripperStateServiceIn.serverName = "unknown";
	connections.gripperStateServiceIn.serviceName = "unknown";
	connections.gripperStateServiceIn.interval = 1;
	connections.gripperStateServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.manipulatorEventServiceIn.initialConnect = false;
	connections.manipulatorEventServiceIn.wiringName = "ManipulatorEventServiceIn";
	connections.manipulatorEventServiceIn.serverName = "unknown";
	connections.manipulatorEventServiceIn.serviceName = "unknown";
	connections.manipulatorEventServiceIn.interval = 1;
	connections.manipulatorEventServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.mobileManipulatorStateQueryServiceReq.initialConnect = false;
	connections.mobileManipulatorStateQueryServiceReq.wiringName = "MobileManipulatorStateQueryServiceReq";
	connections.mobileManipulatorStateQueryServiceReq.serverName = "unknown";
	connections.mobileManipulatorStateQueryServiceReq.serviceName = "unknown";
	connections.mobileManipulatorStateQueryServiceReq.interval = 1;
	connections.mobileManipulatorStateQueryServiceReq.roboticMiddleware = "ACE_SmartSoft";
	connections.mobileManipulatorStateServiceIn.initialConnect = false;
	connections.mobileManipulatorStateServiceIn.wiringName = "MobileManipulatorStateServiceIn";
	connections.mobileManipulatorStateServiceIn.serverName = "unknown";
	connections.mobileManipulatorStateServiceIn.serviceName = "unknown";
	connections.mobileManipulatorStateServiceIn.interval = 1;
	connections.mobileManipulatorStateServiceIn.roboticMiddleware = "ACE_SmartSoft";
	connections.objectQueryServiceReq.initialConnect = false;
	connections.objectQueryServiceReq.wiringName = "ObjectQueryServiceReq";
	connections.objectQueryServiceReq.serverName = "unknown";
	connections.objectQueryServiceReq.serviceName = "unknown";
	connections.objectQueryServiceReq.interval = 1;
	connections.objectQueryServiceReq.roboticMiddleware = "ACE_SmartSoft";
	connections.sendTrajectoryOut.initialConnect = false;
	connections.sendTrajectoryOut.wiringName = "SendTrajectoryOut";
	connections.sendTrajectoryOut.serverName = "unknown";
	connections.sendTrajectoryOut.serviceName = "unknown";
	connections.sendTrajectoryOut.interval = 1;
	connections.sendTrajectoryOut.roboticMiddleware = "ACE_SmartSoft";
	connections.demonstrationTask.minActFreq = 0.0;
	connections.demonstrationTask.maxActFreq = 0.0;
	// scheduling default parameters
	connections.demonstrationTask.scheduler = "DEFAULT";
	connections.demonstrationTask.priority = -1;
	connections.demonstrationTask.cpuAffinity = -1;
	connections.eventActivity.minActFreq = 0.0;
	connections.eventActivity.maxActFreq = 0.0;
	// scheduling default parameters
	connections.eventActivity.scheduler = "DEFAULT";
	connections.eventActivity.priority = -1;
	connections.eventActivity.cpuAffinity = -1;
	connections.trajectorySampling.minActFreq = 0.0;
	connections.trajectorySampling.maxActFreq = 0.0;
	// scheduling default parameters
	connections.trajectorySampling.scheduler = "DEFAULT";
	connections.trajectorySampling.priority = -1;
	connections.trajectorySampling.cpuAffinity = -1;
	connections.gripperEventServiceInHandler.prescale = 1;
	connections.manipulatorEventServiceInHandler.prescale = 1;
	
}

void ComponentOpenRave::addPortFactory(const std::string &name, ComponentOpenRavePortFactoryInterface *portFactory)
{
	portFactoryRegistry[name] = portFactory;
}

void ComponentOpenRave::addExtension(ComponentOpenRaveExtension *extension)
{
	componentExtensionRegistry[extension->getName()] = extension;
}

SmartACE::SmartComponent* ComponentOpenRave::getComponentImpl()
{
	return dynamic_cast<ComponentOpenRaveAcePortFactory*>(portFactoryRegistry["ACE_SmartSoft"])->getComponentImpl();
}

/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void ComponentOpenRave::setStartupFinished() {
	stateSlave->setWaitState("Alive");
	std::cout << "ComponentDefinition initialization/startup finished." << std::endl;
}


Smart::StatusCode ComponentOpenRave::connectEnvironmentQueryServiceReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.environmentQueryServiceReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = environmentQueryServiceReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->environmentQueryServiceReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode ComponentOpenRave::connectGripperEventServiceIn(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.gripperEventServiceIn.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = gripperEventServiceIn->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->gripperEventServiceIn->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode ComponentOpenRave::connectGripperStateQueryServiceReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.gripperStateQueryServiceReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = gripperStateQueryServiceReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->gripperStateQueryServiceReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode ComponentOpenRave::connectGripperStateServiceIn(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.gripperStateServiceIn.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = gripperStateServiceIn->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->gripperStateServiceIn->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	gripperStateServiceIn->subscribe(connections.gripperStateServiceIn.interval);
	return status;
}
Smart::StatusCode ComponentOpenRave::connectManipulatorEventServiceIn(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.manipulatorEventServiceIn.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = manipulatorEventServiceIn->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->manipulatorEventServiceIn->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode ComponentOpenRave::connectMobileManipulatorStateQueryServiceReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.mobileManipulatorStateQueryServiceReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = mobileManipulatorStateQueryServiceReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->mobileManipulatorStateQueryServiceReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode ComponentOpenRave::connectMobileManipulatorStateServiceIn(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.mobileManipulatorStateServiceIn.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = mobileManipulatorStateServiceIn->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->mobileManipulatorStateServiceIn->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	mobileManipulatorStateServiceIn->subscribe(connections.mobileManipulatorStateServiceIn.interval);
	return status;
}
Smart::StatusCode ComponentOpenRave::connectObjectQueryServiceReq(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.objectQueryServiceReq.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = objectQueryServiceReq->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->objectQueryServiceReq->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
Smart::StatusCode ComponentOpenRave::connectSendTrajectoryOut(const std::string &serverName, const std::string &serviceName) {
	Smart::StatusCode status;
	
	if(connections.sendTrajectoryOut.initialConnect == false) {
		return Smart::SMART_OK;
	}
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = sendTrajectoryOut->connect(serverName, serviceName);
	while(status != Smart::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->sendTrajectoryOut->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}


/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
Smart::StatusCode ComponentOpenRave::connectAndStartAllServices() {
	Smart::StatusCode status = Smart::SMART_OK;
	
	status = connectEnvironmentQueryServiceReq(connections.environmentQueryServiceReq.serverName, connections.environmentQueryServiceReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectGripperEventServiceIn(connections.gripperEventServiceIn.serverName, connections.gripperEventServiceIn.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectGripperStateQueryServiceReq(connections.gripperStateQueryServiceReq.serverName, connections.gripperStateQueryServiceReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectGripperStateServiceIn(connections.gripperStateServiceIn.serverName, connections.gripperStateServiceIn.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectManipulatorEventServiceIn(connections.manipulatorEventServiceIn.serverName, connections.manipulatorEventServiceIn.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectMobileManipulatorStateQueryServiceReq(connections.mobileManipulatorStateQueryServiceReq.serverName, connections.mobileManipulatorStateQueryServiceReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectMobileManipulatorStateServiceIn(connections.mobileManipulatorStateServiceIn.serverName, connections.mobileManipulatorStateServiceIn.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectObjectQueryServiceReq(connections.objectQueryServiceReq.serverName, connections.objectQueryServiceReq.serviceName);
	if(status != Smart::SMART_OK) return status;
	status = connectSendTrajectoryOut(connections.sendTrajectoryOut.serverName, connections.sendTrajectoryOut.serviceName);
	if(status != Smart::SMART_OK) return status;
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void ComponentOpenRave::startAllTasks() {
	// start task DemonstrationTask
	if(connections.demonstrationTask.scheduler != "DEFAULT") {
		ACE_Sched_Params demonstrationTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.demonstrationTask.scheduler == "FIFO") {
			demonstrationTask_SchedParams.policy(ACE_SCHED_FIFO);
			demonstrationTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.demonstrationTask.scheduler == "RR") {
			demonstrationTask_SchedParams.policy(ACE_SCHED_RR);
			demonstrationTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		demonstrationTask->start(demonstrationTask_SchedParams, connections.demonstrationTask.cpuAffinity);
	} else {
		demonstrationTask->start();
	}
	// start task EventActivity
	if(connections.eventActivity.scheduler != "DEFAULT") {
		ACE_Sched_Params eventActivity_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.eventActivity.scheduler == "FIFO") {
			eventActivity_SchedParams.policy(ACE_SCHED_FIFO);
			eventActivity_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.eventActivity.scheduler == "RR") {
			eventActivity_SchedParams.policy(ACE_SCHED_RR);
			eventActivity_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		eventActivity->start(eventActivity_SchedParams, connections.eventActivity.cpuAffinity);
	} else {
		eventActivity->start();
	}
	// start task TrajectorySampling
	if(connections.trajectorySampling.scheduler != "DEFAULT") {
		ACE_Sched_Params trajectorySampling_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(connections.trajectorySampling.scheduler == "FIFO") {
			trajectorySampling_SchedParams.policy(ACE_SCHED_FIFO);
			trajectorySampling_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(connections.trajectorySampling.scheduler == "RR") {
			trajectorySampling_SchedParams.policy(ACE_SCHED_RR);
			trajectorySampling_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		trajectorySampling->start(trajectorySampling_SchedParams, connections.trajectorySampling.cpuAffinity);
	} else {
		trajectorySampling->start();
	}
}

/**
 * Start all timers contained in this component
 */
void ComponentOpenRave::startAllTimers() {
}


Smart::TaskTriggerSubject* ComponentOpenRave::getInputTaskTriggerFromString(const std::string &client)
{
	if(client == "GripperEventServiceIn") return gripperEventServiceInInputTaskTrigger;
	if(client == "GripperStateServiceIn") return gripperStateServiceInInputTaskTrigger;
	if(client == "ManipulatorEventServiceIn") return manipulatorEventServiceInInputTaskTrigger;
	if(client == "MobileManipulatorStateServiceIn") return mobileManipulatorStateServiceInInputTaskTrigger;
	
	return NULL;
}


void ComponentOpenRave::init(int argc, char *argv[])
{
	try {
		Smart::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		// print out the actual parameters which are used to initialize the component
		std::cout << " \nComponentDefinition Initial-Parameters:\n" << COMP->getParameters() << std::endl;
		
		
		// initialize all registered port-factories
		for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
		{
			portFactory->second->initialize(this, argc, argv);
		}
		
		// initialize all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->initialize(this, argc, argv);
		}
		
		ComponentOpenRavePortFactoryInterface *acePortFactory = portFactoryRegistry["ACE_SmartSoft"];
		if(acePortFactory == 0) {
			std::cerr << "ERROR: acePortFactory NOT instantiated -> exit(-1)" << std::endl;
			exit(-1);
		}
		
		// this pointer is used for backwards compatibility (deprecated: should be removed as soon as all patterns, including coordination, are moved to port-factory)
		SmartACE::SmartComponent *component = dynamic_cast<ComponentOpenRaveAcePortFactory*>(acePortFactory)->getComponentImpl();
		
		std::cout << "ComponentDefinition ComponentOpenRave is named " << connections.component.name << std::endl;
		
		if(connections.component.useLogger == true) {
			//FIXME: use logging
			//Smart::LOGGER->openLogFileInFolder("data/"+connections.component.name);
			//Smart::LOGGER->startLogging();
		}

		// create event-test handlers (if needed)
		planningEventServiceOutEventTestHandler = std::make_shared<PlanningEventServiceOutEventTestHandler>();
		
		// create server ports
		// TODO: set minCycleTime from Ini-file
		objectQueryServiceAnsw = portFactoryRegistry[connections.objectQueryServiceAnsw.roboticMiddleware]->createObjectQueryServiceAnsw(connections.objectQueryServiceAnsw.serviceName);
		objectQueryServiceAnswInputTaskTrigger = new Smart::QueryServerTaskTrigger<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>(objectQueryServiceAnsw);
		planningEventServiceOutEventTestHandler = std::make_shared<PlanningEventServiceOutEventTestHandler>();
		planningEventServiceOut = portFactoryRegistry[connections.planningEventServiceOut.roboticMiddleware]->createPlanningEventServiceOut(connections.planningEventServiceOut.serviceName, planningEventServiceOutEventTestHandler);
		planningEventServiceOutWrapper = new PlanningEventServiceOutWrapper(planningEventServiceOut);
		
		// create client ports
		environmentQueryServiceReq = portFactoryRegistry[connections.environmentQueryServiceReq.roboticMiddleware]->createEnvironmentQueryServiceReq();
		gripperEventServiceIn = portFactoryRegistry[connections.gripperEventServiceIn.roboticMiddleware]->createGripperEventServiceIn();
		gripperStateQueryServiceReq = portFactoryRegistry[connections.gripperStateQueryServiceReq.roboticMiddleware]->createGripperStateQueryServiceReq();
		gripperStateServiceIn = portFactoryRegistry[connections.gripperStateServiceIn.roboticMiddleware]->createGripperStateServiceIn();
		manipulatorEventServiceIn = portFactoryRegistry[connections.manipulatorEventServiceIn.roboticMiddleware]->createManipulatorEventServiceIn();
		mobileManipulatorStateQueryServiceReq = portFactoryRegistry[connections.mobileManipulatorStateQueryServiceReq.roboticMiddleware]->createMobileManipulatorStateQueryServiceReq();
		mobileManipulatorStateServiceIn = portFactoryRegistry[connections.mobileManipulatorStateServiceIn.roboticMiddleware]->createMobileManipulatorStateServiceIn();
		objectQueryServiceReq = portFactoryRegistry[connections.objectQueryServiceReq.roboticMiddleware]->createObjectQueryServiceReq();
		sendTrajectoryOut = portFactoryRegistry[connections.sendTrajectoryOut.roboticMiddleware]->createSendTrajectoryOut();
		sendTrajectoryOutWrapper = new SendTrajectoryOutWrapper(sendTrajectoryOut);
		
		// create InputTaskTriggers and UpcallManagers
		gripperEventServiceInInputCollector = new GripperEventServiceInInputCollector(gripperEventServiceIn);
		gripperEventServiceInInputTaskTrigger = new Smart::InputTaskTrigger<Smart::EventInputType<CommManipulatorObjects::CommManipulatorEventResult>>(gripperEventServiceInInputCollector);
		gripperEventServiceInUpcallManager = new GripperEventServiceInUpcallManager(gripperEventServiceInInputCollector);
		gripperStateServiceInInputCollector = new GripperStateServiceInInputCollector(gripperStateServiceIn);
		gripperStateServiceInInputTaskTrigger = new Smart::InputTaskTrigger<CommManipulatorObjects::CommGripperState>(gripperStateServiceInInputCollector);
		gripperStateServiceInUpcallManager = new GripperStateServiceInUpcallManager(gripperStateServiceInInputCollector);
		manipulatorEventServiceInInputCollector = new ManipulatorEventServiceInInputCollector(manipulatorEventServiceIn);
		manipulatorEventServiceInInputTaskTrigger = new Smart::InputTaskTrigger<Smart::EventInputType<CommManipulatorObjects::CommManipulatorEventResult>>(manipulatorEventServiceInInputCollector);
		manipulatorEventServiceInUpcallManager = new ManipulatorEventServiceInUpcallManager(manipulatorEventServiceInInputCollector);
		mobileManipulatorStateServiceInInputCollector = new MobileManipulatorStateServiceInInputCollector(mobileManipulatorStateServiceIn);
		mobileManipulatorStateServiceInInputTaskTrigger = new Smart::InputTaskTrigger<CommManipulatorObjects::CommMobileManipulatorState>(mobileManipulatorStateServiceInInputCollector);
		mobileManipulatorStateServiceInUpcallManager = new MobileManipulatorStateServiceInUpcallManager(mobileManipulatorStateServiceInInputCollector);
		
		// create input-handler
		gripperEventServiceInHandler = new GripperEventServiceInHandler(gripperEventServiceIn, connections.gripperEventServiceInHandler.prescale);
		manipulatorEventServiceInHandler = new ManipulatorEventServiceInHandler(manipulatorEventServiceIn, connections.manipulatorEventServiceInHandler.prescale);
		
		// create request-handlers
		objectQueryServiceAnswHandler = new ObjectQueryServiceAnswHandler(objectQueryServiceAnsw);
		
		// create state pattern
		stateChangeHandler = new SmartStateChangeHandler();
		stateSlave = new SmartACE::StateSlave(component, stateChangeHandler);
		if (stateSlave->defineStates("Trajectory" ,"trajectory") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion Trajectory.trajectory" << std::endl;
		if (stateSlave->defineStates("Demonstration" ,"demonstration") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion Demonstration.demonstration" << std::endl;
		if (stateSlave->defineStates("Simulation" ,"simulation") != Smart::SMART_OK) std::cerr << "ERROR: defining state combinaion Simulation.simulation" << std::endl;
		status = stateSlave->setUpInitialState(connections.component.initialComponentMode);
		if (status != Smart::SMART_OK) std::cerr << status << "; failed setting initial ComponentMode: " << connections.component.initialComponentMode << std::endl;
		// activate state slave
		status = stateSlave->activate();
		if(status != Smart::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		wiringSlave = new SmartACE::WiringSlave(component);
		// add client port to wiring slave
		if(connections.environmentQueryServiceReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionEnvironment>*>(environmentQueryServiceReq)->add(wiringSlave, connections.environmentQueryServiceReq.wiringName);
		}
		if(connections.gripperEventServiceIn.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::EventClient<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult>*>(gripperEventServiceIn)->add(wiringSlave, connections.gripperEventServiceIn.wiringName);
		}
		if(connections.gripperStateQueryServiceReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommGripperState>*>(gripperStateQueryServiceReq)->add(wiringSlave, connections.gripperStateQueryServiceReq.wiringName);
		}
		if(connections.gripperStateServiceIn.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<CommManipulatorObjects::CommGripperState>*>(gripperStateServiceIn)->add(wiringSlave, connections.gripperStateServiceIn.wiringName);
		}
		if(connections.manipulatorEventServiceIn.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::EventClient<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult>*>(manipulatorEventServiceIn)->add(wiringSlave, connections.manipulatorEventServiceIn.wiringName);
		}
		if(connections.mobileManipulatorStateQueryServiceReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState>*>(mobileManipulatorStateQueryServiceReq)->add(wiringSlave, connections.mobileManipulatorStateQueryServiceReq.wiringName);
		}
		if(connections.mobileManipulatorStateServiceIn.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::PushClient<CommManipulatorObjects::CommMobileManipulatorState>*>(mobileManipulatorStateServiceIn)->add(wiringSlave, connections.mobileManipulatorStateServiceIn.wiringName);
		}
		if(connections.objectQueryServiceReq.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>*>(objectQueryServiceReq)->add(wiringSlave, connections.objectQueryServiceReq.wiringName);
		}
		if(connections.sendTrajectoryOut.roboticMiddleware == "ACE_SmartSoft") {
			//FIXME: this must also work with other implementations
			dynamic_cast<SmartACE::SendClient<CommManipulatorObjects::CommManipulatorTrajectory>*>(sendTrajectoryOut)->add(wiringSlave, connections.sendTrajectoryOut.wiringName);
		}
		
		// create parameter slave
		param = new SmartACE::ParameterSlave(component, &paramHandler);
		
		
		// create Task DemonstrationTask
		demonstrationTask = new DemonstrationTask(component);
		// configure input-links
		gripperStateServiceInUpcallManager->attach(demonstrationTask);
		mobileManipulatorStateServiceInUpcallManager->attach(demonstrationTask);
		// configure task-trigger (if task is configurable)
		if(connections.demonstrationTask.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.demonstrationTask.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(demonstrationTask);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				demonstrationTaskTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task DemonstrationTask" << std::endl;
			}
		} else if(connections.demonstrationTask.trigger == "DataTriggered") {
			demonstrationTaskTrigger = getInputTaskTriggerFromString(connections.demonstrationTask.inPortRef);
			if(demonstrationTaskTrigger != NULL) {
				demonstrationTaskTrigger->attach(demonstrationTask, connections.demonstrationTask.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.demonstrationTask.inPortRef << " as activation source for Task DemonstrationTask" << std::endl;
			}
		} 
		
		// create Task EventActivity
		eventActivity = new EventActivity(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.eventActivity.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.eventActivity.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(eventActivity);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				eventActivityTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task EventActivity" << std::endl;
			}
		} else if(connections.eventActivity.trigger == "DataTriggered") {
			eventActivityTrigger = getInputTaskTriggerFromString(connections.eventActivity.inPortRef);
			if(eventActivityTrigger != NULL) {
				eventActivityTrigger->attach(eventActivity, connections.eventActivity.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.eventActivity.inPortRef << " as activation source for Task EventActivity" << std::endl;
			}
		} 
		
		// create Task TrajectorySampling
		trajectorySampling = new TrajectorySampling(component);
		// configure input-links
		// configure task-trigger (if task is configurable)
		if(connections.trajectorySampling.trigger == "PeriodicTimer") {
			// create PeriodicTimerTrigger
			int microseconds = 1000*1000 / connections.trajectorySampling.periodicActFreq;
			if(microseconds > 0) {
				Smart::TimedTaskTrigger *triggerPtr = new Smart::TimedTaskTrigger();
				triggerPtr->attach(trajectorySampling);
				component->getTimerManager()->scheduleTimer(triggerPtr, (void *) 0, std::chrono::microseconds(microseconds), std::chrono::microseconds(microseconds));
				// store trigger in class member
				trajectorySamplingTrigger = triggerPtr;
			} else {
				std::cerr << "ERROR: could not set-up Timer with cycle-time " << microseconds << " as activation source for Task TrajectorySampling" << std::endl;
			}
		} else if(connections.trajectorySampling.trigger == "DataTriggered") {
			trajectorySamplingTrigger = getInputTaskTriggerFromString(connections.trajectorySampling.inPortRef);
			if(trajectorySamplingTrigger != NULL) {
				trajectorySamplingTrigger->attach(trajectorySampling, connections.trajectorySampling.prescale);
			} else {
				std::cerr << "ERROR: could not set-up InPort " << connections.trajectorySampling.inPortRef << " as activation source for Task TrajectorySampling" << std::endl;
			}
		} 
		
		
		// link observers with subjects
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void ComponentOpenRave::run()
{
	stateSlave->acquire("init");
	// startup all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onStartup();
	}
	
	// startup all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onStartup();
	}
	stateSlave->release("init");
	
	// do not call this handler within the init state (see above) as this handler internally calls setStartupFinished() (this should be fixed in future)
	compHandler.onStartup();
	
	// this call blocks until the component is commanded to shutdown
	stateSlave->acquire("shutdown");
	
	// shutdown all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->onShutdown();
	}
	
	// shutdown all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->onShutdown();
	}
	
	if(connections.component.useLogger == true) {
		//FIXME: use logging
		//Smart::LOGGER->stopLogging();
	}
	
	compHandler.onShutdown();
	
	stateSlave->release("shutdown");
}

// clean-up component's resources
void ComponentOpenRave::fini()
{
	// unlink all observers
	
	// destroy all task instances
	// unlink all UpcallManagers
	gripperStateServiceInUpcallManager->detach(demonstrationTask);
	mobileManipulatorStateServiceInUpcallManager->detach(demonstrationTask);
	// unlink the TaskTrigger
	if(demonstrationTaskTrigger != NULL){
		demonstrationTaskTrigger->detach(demonstrationTask);
		delete demonstrationTask;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(eventActivityTrigger != NULL){
		eventActivityTrigger->detach(eventActivity);
		delete eventActivity;
	}
	// unlink all UpcallManagers
	// unlink the TaskTrigger
	if(trajectorySamplingTrigger != NULL){
		trajectorySamplingTrigger->detach(trajectorySampling);
		delete trajectorySampling;
	}

	// destroy all input-handler
	delete gripperEventServiceInHandler;
	delete manipulatorEventServiceInHandler;

	// destroy InputTaskTriggers and UpcallManagers
	delete gripperEventServiceInInputTaskTrigger;
	delete gripperEventServiceInUpcallManager;
	delete gripperEventServiceInInputCollector;
	delete gripperStateServiceInInputTaskTrigger;
	delete gripperStateServiceInUpcallManager;
	delete gripperStateServiceInInputCollector;
	delete manipulatorEventServiceInInputTaskTrigger;
	delete manipulatorEventServiceInUpcallManager;
	delete manipulatorEventServiceInInputCollector;
	delete mobileManipulatorStateServiceInInputTaskTrigger;
	delete mobileManipulatorStateServiceInUpcallManager;
	delete mobileManipulatorStateServiceInInputCollector;

	// destroy client ports
	delete environmentQueryServiceReq;
	delete gripperEventServiceIn;
	delete gripperStateQueryServiceReq;
	delete gripperStateServiceIn;
	delete manipulatorEventServiceIn;
	delete mobileManipulatorStateQueryServiceReq;
	delete mobileManipulatorStateServiceIn;
	delete objectQueryServiceReq;
	delete sendTrajectoryOutWrapper;
	delete sendTrajectoryOut;

	// destroy server ports
	delete objectQueryServiceAnsw;
	delete objectQueryServiceAnswInputTaskTrigger;
	delete planningEventServiceOutWrapper;
	delete planningEventServiceOut;
	// destroy event-test handlers (if needed)
	planningEventServiceOutEventTestHandler;
	
	// destroy request-handlers
	delete objectQueryServiceAnswHandler;
	
	delete stateSlave;
	// destroy state-change-handler
	delete stateChangeHandler;
	
	// destroy all master/slave ports
	delete wiringSlave;
	delete param;
	

	// destroy all registered component-extensions
	for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
	{
		extension->second->destroy();
	}

	// destroy all registered port-factories
	for(auto portFactory = portFactoryRegistry.begin(); portFactory != portFactoryRegistry.end(); portFactory++) 
	{
		portFactory->second->destroy();
	}
	
}

void ComponentOpenRave::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	SmartACE::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("ComponentOpenRave.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load ComponentOpenRave.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: ComponentOpenRave.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		SmartACE::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(SmartACE::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(SmartACE::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		parameter.getString("component", "initialComponentMode", connections.component.initialComponentMode);
		if(parameter.checkIfParameterExists("component", "defaultScheduler")) {
			parameter.getString("component", "defaultScheduler", connections.component.defaultScheduler);
		}
		if(parameter.checkIfParameterExists("component", "useLogger")) {
			parameter.getBoolean("component", "useLogger", connections.component.useLogger);
		}
		
		// load parameters for client EnvironmentQueryServiceReq
		parameter.getBoolean("EnvironmentQueryServiceReq", "initialConnect", connections.environmentQueryServiceReq.initialConnect);
		parameter.getString("EnvironmentQueryServiceReq", "serviceName", connections.environmentQueryServiceReq.serviceName);
		parameter.getString("EnvironmentQueryServiceReq", "serverName", connections.environmentQueryServiceReq.serverName);
		parameter.getString("EnvironmentQueryServiceReq", "wiringName", connections.environmentQueryServiceReq.wiringName);
		if(parameter.checkIfParameterExists("EnvironmentQueryServiceReq", "roboticMiddleware")) {
			parameter.getString("EnvironmentQueryServiceReq", "roboticMiddleware", connections.environmentQueryServiceReq.roboticMiddleware);
		}
		// load parameters for client GripperEventServiceIn
		parameter.getBoolean("GripperEventServiceIn", "initialConnect", connections.gripperEventServiceIn.initialConnect);
		parameter.getString("GripperEventServiceIn", "serviceName", connections.gripperEventServiceIn.serviceName);
		parameter.getString("GripperEventServiceIn", "serverName", connections.gripperEventServiceIn.serverName);
		parameter.getString("GripperEventServiceIn", "wiringName", connections.gripperEventServiceIn.wiringName);
		if(parameter.checkIfParameterExists("GripperEventServiceIn", "roboticMiddleware")) {
			parameter.getString("GripperEventServiceIn", "roboticMiddleware", connections.gripperEventServiceIn.roboticMiddleware);
		}
		// load parameters for client GripperStateQueryServiceReq
		parameter.getBoolean("GripperStateQueryServiceReq", "initialConnect", connections.gripperStateQueryServiceReq.initialConnect);
		parameter.getString("GripperStateQueryServiceReq", "serviceName", connections.gripperStateQueryServiceReq.serviceName);
		parameter.getString("GripperStateQueryServiceReq", "serverName", connections.gripperStateQueryServiceReq.serverName);
		parameter.getString("GripperStateQueryServiceReq", "wiringName", connections.gripperStateQueryServiceReq.wiringName);
		if(parameter.checkIfParameterExists("GripperStateQueryServiceReq", "roboticMiddleware")) {
			parameter.getString("GripperStateQueryServiceReq", "roboticMiddleware", connections.gripperStateQueryServiceReq.roboticMiddleware);
		}
		// load parameters for client GripperStateServiceIn
		parameter.getBoolean("GripperStateServiceIn", "initialConnect", connections.gripperStateServiceIn.initialConnect);
		parameter.getString("GripperStateServiceIn", "serviceName", connections.gripperStateServiceIn.serviceName);
		parameter.getString("GripperStateServiceIn", "serverName", connections.gripperStateServiceIn.serverName);
		parameter.getString("GripperStateServiceIn", "wiringName", connections.gripperStateServiceIn.wiringName);
		parameter.getInteger("GripperStateServiceIn", "interval", connections.gripperStateServiceIn.interval);
		if(parameter.checkIfParameterExists("GripperStateServiceIn", "roboticMiddleware")) {
			parameter.getString("GripperStateServiceIn", "roboticMiddleware", connections.gripperStateServiceIn.roboticMiddleware);
		}
		// load parameters for client ManipulatorEventServiceIn
		parameter.getBoolean("ManipulatorEventServiceIn", "initialConnect", connections.manipulatorEventServiceIn.initialConnect);
		parameter.getString("ManipulatorEventServiceIn", "serviceName", connections.manipulatorEventServiceIn.serviceName);
		parameter.getString("ManipulatorEventServiceIn", "serverName", connections.manipulatorEventServiceIn.serverName);
		parameter.getString("ManipulatorEventServiceIn", "wiringName", connections.manipulatorEventServiceIn.wiringName);
		if(parameter.checkIfParameterExists("ManipulatorEventServiceIn", "roboticMiddleware")) {
			parameter.getString("ManipulatorEventServiceIn", "roboticMiddleware", connections.manipulatorEventServiceIn.roboticMiddleware);
		}
		// load parameters for client MobileManipulatorStateQueryServiceReq
		parameter.getBoolean("MobileManipulatorStateQueryServiceReq", "initialConnect", connections.mobileManipulatorStateQueryServiceReq.initialConnect);
		parameter.getString("MobileManipulatorStateQueryServiceReq", "serviceName", connections.mobileManipulatorStateQueryServiceReq.serviceName);
		parameter.getString("MobileManipulatorStateQueryServiceReq", "serverName", connections.mobileManipulatorStateQueryServiceReq.serverName);
		parameter.getString("MobileManipulatorStateQueryServiceReq", "wiringName", connections.mobileManipulatorStateQueryServiceReq.wiringName);
		if(parameter.checkIfParameterExists("MobileManipulatorStateQueryServiceReq", "roboticMiddleware")) {
			parameter.getString("MobileManipulatorStateQueryServiceReq", "roboticMiddleware", connections.mobileManipulatorStateQueryServiceReq.roboticMiddleware);
		}
		// load parameters for client MobileManipulatorStateServiceIn
		parameter.getBoolean("MobileManipulatorStateServiceIn", "initialConnect", connections.mobileManipulatorStateServiceIn.initialConnect);
		parameter.getString("MobileManipulatorStateServiceIn", "serviceName", connections.mobileManipulatorStateServiceIn.serviceName);
		parameter.getString("MobileManipulatorStateServiceIn", "serverName", connections.mobileManipulatorStateServiceIn.serverName);
		parameter.getString("MobileManipulatorStateServiceIn", "wiringName", connections.mobileManipulatorStateServiceIn.wiringName);
		parameter.getInteger("MobileManipulatorStateServiceIn", "interval", connections.mobileManipulatorStateServiceIn.interval);
		if(parameter.checkIfParameterExists("MobileManipulatorStateServiceIn", "roboticMiddleware")) {
			parameter.getString("MobileManipulatorStateServiceIn", "roboticMiddleware", connections.mobileManipulatorStateServiceIn.roboticMiddleware);
		}
		// load parameters for client ObjectQueryServiceReq
		parameter.getBoolean("ObjectQueryServiceReq", "initialConnect", connections.objectQueryServiceReq.initialConnect);
		parameter.getString("ObjectQueryServiceReq", "serviceName", connections.objectQueryServiceReq.serviceName);
		parameter.getString("ObjectQueryServiceReq", "serverName", connections.objectQueryServiceReq.serverName);
		parameter.getString("ObjectQueryServiceReq", "wiringName", connections.objectQueryServiceReq.wiringName);
		if(parameter.checkIfParameterExists("ObjectQueryServiceReq", "roboticMiddleware")) {
			parameter.getString("ObjectQueryServiceReq", "roboticMiddleware", connections.objectQueryServiceReq.roboticMiddleware);
		}
		// load parameters for client SendTrajectoryOut
		parameter.getBoolean("SendTrajectoryOut", "initialConnect", connections.sendTrajectoryOut.initialConnect);
		parameter.getString("SendTrajectoryOut", "serviceName", connections.sendTrajectoryOut.serviceName);
		parameter.getString("SendTrajectoryOut", "serverName", connections.sendTrajectoryOut.serverName);
		parameter.getString("SendTrajectoryOut", "wiringName", connections.sendTrajectoryOut.wiringName);
		if(parameter.checkIfParameterExists("SendTrajectoryOut", "roboticMiddleware")) {
			parameter.getString("SendTrajectoryOut", "roboticMiddleware", connections.sendTrajectoryOut.roboticMiddleware);
		}
		
		// load parameters for server ObjectQueryServiceAnsw
		parameter.getString("ObjectQueryServiceAnsw", "serviceName", connections.objectQueryServiceAnsw.serviceName);
		if(parameter.checkIfParameterExists("ObjectQueryServiceAnsw", "roboticMiddleware")) {
			parameter.getString("ObjectQueryServiceAnsw", "roboticMiddleware", connections.objectQueryServiceAnsw.roboticMiddleware);
		}
		// load parameters for server PlanningEventServiceOut
		parameter.getString("PlanningEventServiceOut", "serviceName", connections.planningEventServiceOut.serviceName);
		if(parameter.checkIfParameterExists("PlanningEventServiceOut", "roboticMiddleware")) {
			parameter.getString("PlanningEventServiceOut", "roboticMiddleware", connections.planningEventServiceOut.roboticMiddleware);
		}
		
		// load parameters for task DemonstrationTask
		parameter.getDouble("DemonstrationTask", "minActFreqHz", connections.demonstrationTask.minActFreq);
		parameter.getDouble("DemonstrationTask", "maxActFreqHz", connections.demonstrationTask.maxActFreq);
		parameter.getString("DemonstrationTask", "triggerType", connections.demonstrationTask.trigger);
		if(connections.demonstrationTask.trigger == "PeriodicTimer") {
			parameter.getDouble("DemonstrationTask", "periodicActFreqHz", connections.demonstrationTask.periodicActFreq);
		} else if(connections.demonstrationTask.trigger == "DataTriggered") {
			parameter.getString("DemonstrationTask", "inPortRef", connections.demonstrationTask.inPortRef);
			parameter.getInteger("DemonstrationTask", "prescale", connections.demonstrationTask.prescale);
		}
		if(parameter.checkIfParameterExists("DemonstrationTask", "scheduler")) {
			parameter.getString("DemonstrationTask", "scheduler", connections.demonstrationTask.scheduler);
		}
		if(parameter.checkIfParameterExists("DemonstrationTask", "priority")) {
			parameter.getInteger("DemonstrationTask", "priority", connections.demonstrationTask.priority);
		}
		if(parameter.checkIfParameterExists("DemonstrationTask", "cpuAffinity")) {
			parameter.getInteger("DemonstrationTask", "cpuAffinity", connections.demonstrationTask.cpuAffinity);
		}
		// load parameters for task EventActivity
		parameter.getDouble("EventActivity", "minActFreqHz", connections.eventActivity.minActFreq);
		parameter.getDouble("EventActivity", "maxActFreqHz", connections.eventActivity.maxActFreq);
		parameter.getString("EventActivity", "triggerType", connections.eventActivity.trigger);
		if(connections.eventActivity.trigger == "PeriodicTimer") {
			parameter.getDouble("EventActivity", "periodicActFreqHz", connections.eventActivity.periodicActFreq);
		} else if(connections.eventActivity.trigger == "DataTriggered") {
			parameter.getString("EventActivity", "inPortRef", connections.eventActivity.inPortRef);
			parameter.getInteger("EventActivity", "prescale", connections.eventActivity.prescale);
		}
		if(parameter.checkIfParameterExists("EventActivity", "scheduler")) {
			parameter.getString("EventActivity", "scheduler", connections.eventActivity.scheduler);
		}
		if(parameter.checkIfParameterExists("EventActivity", "priority")) {
			parameter.getInteger("EventActivity", "priority", connections.eventActivity.priority);
		}
		if(parameter.checkIfParameterExists("EventActivity", "cpuAffinity")) {
			parameter.getInteger("EventActivity", "cpuAffinity", connections.eventActivity.cpuAffinity);
		}
		// load parameters for task TrajectorySampling
		parameter.getDouble("TrajectorySampling", "minActFreqHz", connections.trajectorySampling.minActFreq);
		parameter.getDouble("TrajectorySampling", "maxActFreqHz", connections.trajectorySampling.maxActFreq);
		parameter.getString("TrajectorySampling", "triggerType", connections.trajectorySampling.trigger);
		if(connections.trajectorySampling.trigger == "PeriodicTimer") {
			parameter.getDouble("TrajectorySampling", "periodicActFreqHz", connections.trajectorySampling.periodicActFreq);
		} else if(connections.trajectorySampling.trigger == "DataTriggered") {
			parameter.getString("TrajectorySampling", "inPortRef", connections.trajectorySampling.inPortRef);
			parameter.getInteger("TrajectorySampling", "prescale", connections.trajectorySampling.prescale);
		}
		if(parameter.checkIfParameterExists("TrajectorySampling", "scheduler")) {
			parameter.getString("TrajectorySampling", "scheduler", connections.trajectorySampling.scheduler);
		}
		if(parameter.checkIfParameterExists("TrajectorySampling", "priority")) {
			parameter.getInteger("TrajectorySampling", "priority", connections.trajectorySampling.priority);
		}
		if(parameter.checkIfParameterExists("TrajectorySampling", "cpuAffinity")) {
			parameter.getInteger("TrajectorySampling", "cpuAffinity", connections.trajectorySampling.cpuAffinity);
		}
		if(parameter.checkIfParameterExists("GripperEventServiceInHandler", "prescale")) {
			parameter.getInteger("GripperEventServiceInHandler", "prescale", connections.gripperEventServiceInHandler.prescale);
		}
		if(parameter.checkIfParameterExists("ManipulatorEventServiceInHandler", "prescale")) {
			parameter.getInteger("ManipulatorEventServiceInHandler", "prescale", connections.manipulatorEventServiceInHandler.prescale);
		}
		
		
		// load parameters for all registered component-extensions
		for(auto extension = componentExtensionRegistry.begin(); extension != componentExtensionRegistry.end(); extension++) 
		{
			extension->second->loadParameters(parameter);
		}
		
		paramHandler.loadParameter(parameter);
	
	} catch (const SmartACE::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
