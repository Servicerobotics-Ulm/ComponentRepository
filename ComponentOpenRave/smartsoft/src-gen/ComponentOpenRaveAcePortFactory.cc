//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "ComponentOpenRaveAcePortFactory.hh"

// create a static instance of the default AcePortFactory
static ComponentOpenRaveAcePortFactory acePortFactory;

ComponentOpenRaveAcePortFactory::ComponentOpenRaveAcePortFactory()
{  
	componentImpl = 0;
	ComponentOpenRave::instance()->addPortFactory("ACE_SmartSoft", this);
}

ComponentOpenRaveAcePortFactory::~ComponentOpenRaveAcePortFactory()
{  }

void ComponentOpenRaveAcePortFactory::initialize(ComponentOpenRave *component, int argc, char* argv[])
{
	if(component->connections.component.defaultScheduler != "DEFAULT") {
		ACE_Sched_Params sched_params(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(component->connections.component.defaultScheduler == "FIFO") {
			sched_params.policy(ACE_SCHED_FIFO);
			#if defined(ACE_HAS_PTHREADS)
				sched_params.priority(ACE_THR_PRI_FIFO_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				sched_params.priority(THREAD_PRIORITY_IDLE);
			#endif
		} else if(component->connections.component.defaultScheduler == "RR") {
			sched_params.policy(ACE_SCHED_RR);
			#if defined(ACE_HAS_PTHREADS)
				sched_params.priority(ACE_THR_PRI_RR_MIN);
			#elif defined (ACE_HAS_WTHREADS)
				sched_params.priority(THREAD_PRIORITY_IDLE);
			#endif
		}
		// create new instance of the SmartSoft component with customized scheuling parameters 
		componentImpl = new ComponentOpenRaveImpl(component->connections.component.name, argc, argv, sched_params);
	} else {
		// create new instance of the SmartSoft component
		componentImpl = new ComponentOpenRaveImpl(component->connections.component.name, argc, argv);
	}
}

int ComponentOpenRaveAcePortFactory::onStartup()
{
	return componentImpl->startComponentInfrastructure();
}

Smart::IQueryClientPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionEnvironment> * ComponentOpenRaveAcePortFactory::createEnvironmentQueryServiceReq()
{
	return new SmartACE::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionEnvironment>(componentImpl);
}

Smart::IEventClientPattern<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult> * ComponentOpenRaveAcePortFactory::createGripperEventServiceIn()
{
	return new SmartACE::EventClient<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult>(componentImpl);
}

Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommGripperState> * ComponentOpenRaveAcePortFactory::createGripperStateQueryServiceReq()
{
	return new SmartACE::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommGripperState>(componentImpl);
}

Smart::IPushClientPattern<CommManipulatorObjects::CommGripperState> * ComponentOpenRaveAcePortFactory::createGripperStateServiceIn()
{
	return new SmartACE::PushClient<CommManipulatorObjects::CommGripperState>(componentImpl);
}

Smart::IEventClientPattern<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult> * ComponentOpenRaveAcePortFactory::createManipulatorEventServiceIn()
{
	return new SmartACE::EventClient<CommManipulatorObjects::CommManipulatorEventParameter, CommManipulatorObjects::CommManipulatorEventResult>(componentImpl);
}

Smart::IQueryClientPattern<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState> * ComponentOpenRaveAcePortFactory::createMobileManipulatorStateQueryServiceReq()
{
	return new SmartACE::QueryClient<CommBasicObjects::CommVoid, CommManipulatorObjects::CommMobileManipulatorState>(componentImpl);
}

Smart::IPushClientPattern<CommManipulatorObjects::CommMobileManipulatorState> * ComponentOpenRaveAcePortFactory::createMobileManipulatorStateServiceIn()
{
	return new SmartACE::PushClient<CommManipulatorObjects::CommMobileManipulatorState>(componentImpl);
}

Smart::IQueryClientPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties> * ComponentOpenRaveAcePortFactory::createObjectQueryServiceReq()
{
	return new SmartACE::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>(componentImpl);
}

Smart::ISendClientPattern<CommManipulatorObjects::CommManipulatorTrajectory> * ComponentOpenRaveAcePortFactory::createSendTrajectoryOut()
{
	return new SmartACE::SendClient<CommManipulatorObjects::CommManipulatorTrajectory>(componentImpl);
}


Smart::IQueryServerPattern<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties> * ComponentOpenRaveAcePortFactory::createObjectQueryServiceAnsw(const std::string &serviceName)
{
	return new SmartACE::QueryServer<CommObjectRecognitionObjects::CommObjectRecognitionId, CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>(componentImpl, serviceName);
}

Smart::IEventServerPattern<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState> * ComponentOpenRaveAcePortFactory::createPlanningEventServiceOut(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState>> planningEventServiceOutEventTestHandler)
{
	return new SmartACE::EventServer<CommManipulationPlannerObjects::CommManipulationPlannerEventParameter, CommManipulationPlannerObjects::CommManipulationPlannerEventResult, CommManipulationPlannerObjects::CommManipulationPlannerEventState>(componentImpl, serviceName, planningEventServiceOutEventTestHandler);
}


SmartACE::SmartComponent* ComponentOpenRaveAcePortFactory::getComponentImpl()
{
	return componentImpl;
}

int ComponentOpenRaveAcePortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	componentImpl->stopComponentInfrastructure(timeoutTime);
	return 0;
}

void ComponentOpenRaveAcePortFactory::destroy()
{
	// clean-up component's internally used resources (internally used communication middleware) 
	componentImpl->cleanUpComponentResources();
	delete componentImpl;
}
